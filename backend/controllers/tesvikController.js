// üèÜ TE≈ûVƒ∞K CONTROLLER - ENTERPRISE EDITION
// Excel + Word ≈üablonu analizine g√∂re tam kapsamlƒ± controller
// Mali hesaplamalar + renk kodlamasƒ± + durum y√∂netimi + revizyon takibi

const Tesvik = require('../models/Tesvik');
const Firma = require('../models/Firma');
const Activity = require('../models/Activity');
const Notification = require('../models/Notification');
const { DestekUnsuru, DestekSarti, OzelSart, OzelSartNotu } = require('../models/DynamicOptions');
const { validationResult } = require('express-validator');
const XLSX = require('xlsx');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const csv = require('csv-parser'); // OSB verilerini okumak i√ßin

// üìù YENƒ∞ TE≈ûVƒ∞K OLU≈ûTUR
const createTesvik = async (req, res) => {
  try {
    // Validation kontrol√º
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Girilen bilgilerde hatalar var',
        errors: errors.array()
      });
    }

    const tesvikData = req.body;
    // Makine listelerinde bo≈ü satƒ±rlarƒ± ayƒ±kla ve sayƒ±sal alanlarƒ± normalize et
    if (tesvikData.makineListeleri) {
      const normalize = (arr = []) => arr
        .filter(r => r && (r.gtipKodu || r.adiVeOzelligi))
        .map(r => ({
          gtipKodu: (r.gtipKodu || '').trim(),
          gtipAciklamasi: (r.gtipAciklamasi || '').trim(),
          adiVeOzelligi: (r.adiVeOzelligi || '').trim(),
          miktar: Number(r.miktar) || 0,
          birim: (r.birim || '').trim(),
          birimFiyatiTl: Number(r.birimFiyatiTl) || 0,
          toplamTutariTl: Number(r.toplamTutariTl) || 0,
          kdvIstisnasi: (r.kdvIstisnasi || '').toUpperCase()
        }));
      tesvikData.makineListeleri = {
        yerli: normalize(tesvikData.makineListeleri.yerli),
        ithal: normalize(tesvikData.makineListeleri.ithal)
      };
    }
    
    // Firma kontrol√º
    const firma = await Firma.findById(tesvikData.firma);
    if (!firma) {
      return res.status(404).json({
        success: false,
        message: 'Belirtilen firma bulunamadƒ±'
      });
    }

    // Yeni te≈üvik olu≈ütur
    const tesvik = new Tesvik({
      ...tesvikData,
      firmaId: firma.firmaId,
      yatirimciUnvan: tesvikData.yatirimciUnvan || firma.tamUnvan,
      olusturanKullanici: req.user._id,
      sonGuncelleyen: req.user._id
    });

    // Mali hesaplamalarƒ± otomatik g√ºncelle
    tesvik.updateMaliHesaplamalar();
    
    // Durum rengini g√ºncelle
    tesvik.updateDurumRengi();

    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'create',
      category: 'tesvik',
      title: 'Yeni Te≈üvik Olu≈üturuldu',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik olu≈üturuldu`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        after: tesvik.toSafeJSON()
      }
    });

    // Bildirim olu≈ütur
    await Notification.createNotification({
      title: 'Yeni Te≈üvik Olu≈üturuldu',
      message: `${tesvik.tesvikId} numaralƒ± te≈üvik ba≈üarƒ±yla olu≈üturuldu`,
      type: 'success',
      category: 'tesvik',
      userId: req.user._id,
      relatedEntity: {
        entityType: 'tesvik',
        entityId: tesvik._id
      }
    });

    // Populate i≈ülemi
    await tesvik.populate('firma', 'tamUnvan firmaId vergiNoTC');
    await tesvik.populate('olusturanKullanici', 'adSoyad email');

    res.status(201).json({
      success: true,
      message: 'Te≈üvik ba≈üarƒ±yla olu≈üturuldu',
      data: tesvik.toSafeJSON()
    });

  } catch (error) {
    console.error('üö® Te≈üvik olu≈üturma hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik olu≈üturulurken hata olu≈ütu',
      error: error.message
    });
  }
};

// üìã TE≈ûVƒ∞K Lƒ∞STESƒ∞ (Advanced Filtering + Pagination)
const getTesvikler = async (req, res) => {
  try {
    const {
      sayfa = 1,
      limit = 20,
      durum,
      il,
      firma,
      siraBy = 'createdAt',
      siraSekli = 'desc',
      tarihBaslangic,
      tarihBitis,
      destekSinifi,
      search
    } = req.query;

    // Build query
    const query = { aktif: true };
    
    if (durum) query['durumBilgileri.genelDurum'] = durum;
    if (il) query['yatirimBilgileri.yerinIl'] = il.toUpperCase();
    if (firma) query.firma = firma;
    if (destekSinifi) query['yatirimBilgileri.destekSinifi'] = destekSinifi;
    
    // Tarih filtresi
    if (tarihBaslangic || tarihBitis) {
      query.createdAt = {};
      if (tarihBaslangic) query.createdAt.$gte = new Date(tarihBaslangic);
      if (tarihBitis) query.createdAt.$lte = new Date(tarihBitis);
    }
    
    // Arama filtresi
    if (search) {
      const searchRegex = new RegExp(search, 'i');
      query.$or = [
        { tesvikId: searchRegex },
        { gmId: searchRegex },
        { yatirimciUnvan: searchRegex },
        { 'yatirimBilgileri.yatirimKonusu': searchRegex }
      ];
    }

    // Sort object
    const sortObj = {};
    sortObj[siraBy] = siraSekli === 'desc' ? -1 : 1;

    const skip = (parseInt(sayfa) - 1) * parseInt(limit);

    const [tesvikler, toplam] = await Promise.all([
      Tesvik.find(query)
        .populate('firma', 'tamUnvan firmaId vergiNoTC firmaIl')
        .populate('olusturanKullanici', 'adSoyad email')
        .populate('sonGuncelleyen', 'adSoyad email')
        .sort(sortObj)
        .skip(skip)
        .limit(parseInt(limit))
        .lean(),
      
      Tesvik.countDocuments(query)
    ]);

    res.json({
      success: true,
      message: 'Te≈üvikler ba≈üarƒ±yla getirildi',
      data: {
        tesvikler,
        pagination: {
          currentPage: parseInt(sayfa),
          totalPages: Math.ceil(toplam / parseInt(limit)),
          totalCount: toplam,
          hasNext: skip + parseInt(limit) < toplam,
          hasPrev: parseInt(sayfa) > 1
        }
      }
    });

  } catch (error) {
    console.error('üö® Te≈üvik liste hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvikler getirilemedi',
      error: error.message
    });
  }
};

// üëÅÔ∏è TEKƒ∞L TE≈ûVƒ∞K DETAYI
const getTesvik = async (req, res) => {
  try {
    const { id } = req.params;

    
    // ID veya TesvikId ile arama
    let tesvik;
    if (id.match(/^[0-9a-fA-F]{24}$/)) {
      // MongoDB ObjectId
      tesvik = await Tesvik.findById(id);
    } else {
      // TesvikId (TES2024001 format)
      tesvik = await Tesvik.findByTesvikId(id);
    }

    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Populate i≈ülemleri
    await tesvik.populate('firma', 'tamUnvan firmaId vergiNoTC firmaIl firmaIlce adres kepAdresi');
    await tesvik.populate('olusturanKullanici', 'adSoyad email rol');
    await tesvik.populate('sonGuncelleyen', 'adSoyad email');
    await tesvik.populate('revizyonlar.yapanKullanici', 'adSoyad email');
    


    // Activity log
    await Activity.logActivity({
      action: 'view',
      category: 'tesvik',
      title: 'Te≈üvik G√∂r√ºnt√ºlendi',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik detayƒ± g√∂r√ºnt√ºlendi`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      }
    });

    res.json({
      success: true,
      message: 'Te≈üvik detayƒ± getirildi',
      data: tesvik.toSafeJSON()
    });

  } catch (error) {
    console.error('üö® Te≈üvik detay hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik detayƒ± getirilemedi',
      error: error.message
    });
  }
};

// ‚úèÔ∏è TE≈ûVƒ∞K G√úNCELLEME - PROFESSIONAL CHANGE TRACKING SYSTEM
const updateTesvik = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // Validation kontrol√º
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Girilen bilgilerde hatalar var',
        errors: errors.array()
      });
    }

    // Te≈üviki getir - eski haliyle
    const tesvik = await Tesvik.findById(id)
      .populate('firma', 'tamUnvan firmaId')
      .populate('olusturanKullanici', 'adSoyad email');

    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // üìä PROFESSIONAL CHANGE DETECTION SYSTEM
    console.log('üîç Change tracking ba≈ülƒ±yor...');
    
    // Eski veriyi tam olarak kaydet - deep copy
    const eskiVeri = JSON.parse(JSON.stringify(tesvik.toSafeJSON()));
    console.log('üìö Eski veri kaydedildi:', Object.keys(eskiVeri).length, 'alan');
    
    // G√ºncelleme verisini filtrele
    const filteredUpdateData = Object.fromEntries(
      Object.entries(updateData).filter(([key, value]) => {
        if (key === 'firma' && (value === null || value === undefined || value === '')) {
          return false;
        }
        if (key === 'guncellemeNotu') return false; // Skip update note
        return value !== null && value !== undefined;
      })
    );
    
    // G√ºncelleme uygula
    Object.assign(tesvik, filteredUpdateData);
    // G√ºncellemede makine listelerini normalize et
    if (filteredUpdateData.makineListeleri) {
      const normalize = (arr = []) => arr
        .filter(r => r && (r.gtipKodu || r.adiVeOzelligi))
        .map(r => ({
          gtipKodu: (r.gtipKodu || '').trim(),
          gtipAciklamasi: (r.gtipAciklamasi || '').trim(),
          adiVeOzelligi: (r.adiVeOzelligi || '').trim(),
          miktar: Number(r.miktar) || 0,
          birim: (r.birim || '').trim(),
          birimFiyatiTl: Number(r.birimFiyatiTl) || 0,
          toplamTutariTl: Number(r.toplamTutariTl) || 0,
          kdvIstisnasi: (r.kdvIstisnasi || '').toUpperCase()
        }));
      tesvik.makineListeleri = {
        yerli: normalize(filteredUpdateData.makineListeleri.yerli),
        ithal: normalize(filteredUpdateData.makineListeleri.ithal)
      };
    }
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = updateData.guncellemeNotu || `G√ºncelleme yapƒ±ldƒ± - ${new Date().toLocaleString('tr-TR')}`;
    tesvik.durumBilgileri.sonGuncellemeTarihi = new Date();

    // Mali hesaplamalarƒ± otomatik g√ºncelle
    tesvik.updateMaliHesaplamalar();
    
    // Durum deƒüi≈ümi≈üse rengi g√ºncelle
    if (updateData.durumBilgileri?.genelDurum) {
      tesvik.updateDurumRengi();
    }

    // üíæ G√ºncellemeyi kaydet
    await tesvik.save();

    // Yeni veriyi al - g√ºncellenmi≈ü haliyle
    const yeniVeri = JSON.parse(JSON.stringify(tesvik.toSafeJSON()));
    console.log('üìù Yeni veri kaydedildi:', Object.keys(yeniVeri).length, 'alan');

    // üîç DEEP CHANGE DETECTION ALGORITHM
    const degisikenAlanlar = await detectDetailedChanges(eskiVeri, yeniVeri);
    console.log('üéØ Tespit edilen deƒüi≈üiklikler:', degisikenAlanlar.length, 'alan');

    // üìã Deƒüi≈üiklik varsa otomatik revizyon ekle
    if (degisikenAlanlar.length > 0) {
      const revizyonData = {
        revizyonSebebi: 'Otomatik G√ºncelleme',
        degisikenAlanlar: degisikenAlanlar,
        yapanKullanici: req.user._id,
        yeniDurum: tesvik.durumBilgileri?.genelDurum,
        kullaniciNotu: updateData.guncellemeNotu || 'Sistem g√ºncellemesi',
        // üéØ Revizyon i√ßin snapshot'lar
        veriSnapshot: {
          oncesi: eskiVeri,
          sonrasi: yeniVeri,
          degisikenAlanSayisi: degisikenAlanlar.length
        }
      };

      // Revizyon ekle - manual olarak (pre-save hook'u bypass et)
      tesvik.revizyonlar.push({
        revizyonNo: tesvik.revizyonlar.length + 1,
        revizyonTarihi: new Date(),
        ...revizyonData,
        durumOncesi: eskiVeri.durumBilgileri?.genelDurum,
        durumSonrasi: tesvik.durumBilgileri?.genelDurum
      });

      // Tekrar kaydet
      await tesvik.save();
      
      console.log('‚úÖ Otomatik revizyon eklendi - Revizyon No:', tesvik.revizyonlar.length);
    }

    // üìä Activity log - detaylƒ± (fields bo≈ü kalmasƒ±n diye alan-√∂zeti ekliyoruz)
    await Activity.logActivity({
      action: 'update',
      category: 'tesvik',
      title: 'Te≈üvik G√ºncellendi (Professional Tracking)',
      description: `${tesvik.tesvikId} g√ºncellendi - ${degisikenAlanlar.length} alan deƒüi≈ütirildi. Otomatik revizyon: ${degisikenAlanlar.length > 0 ? 'Eklendi' : 'Gerek yok'}`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId,
        firmaId: tesvik.firmaId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        before: eskiVeri,
        after: yeniVeri,
        // Alan listesi dolu ise normalize et; bo≈ü ise minimum path listesi √ºret
        fields: (degisikenAlanlar && degisikenAlanlar.length > 0)
          ? degisikenAlanlar.map(ch => ({
              field: ch.alan || ch.field || ch.columnName,
              oldValue: ch.eskiDeger,
              newValue: ch.yeniDeger,
              label: ch.label
            }))
          : (function() {
              try {
                const paths = [];
                const collect = (obj, prefix = '') => {
                  if (!obj || typeof obj !== 'object') return;
                  Object.keys(obj).forEach(k => {
                    const full = prefix ? `${prefix}.${k}` : k;
                    if (typeof obj[k] === 'object' && obj[k] !== null && !Array.isArray(obj[k])) {
                      collect(obj[k], full);
                    } else {
                      paths.push(full);
                    }
                  });
                };
                collect(yeniVeri);
                return paths.slice(0, 20);
              } catch (e) { return []; }
            })(),
        summary: {
          totalChanges: degisikenAlanlar.length,
          revisionAdded: degisikenAlanlar.length > 0,
          revisionNumber: degisikenAlanlar.length > 0 ? tesvik.revizyonlar.length : null
        }
      },
      metadata: {
        ip: req.ip || req.connection.remoteAddress,
        userAgent: req.get('User-Agent'),
        source: 'web_interface'
      }
    });

    // Response hazƒ±rla
    const responseData = tesvik.toSafeJSON();
    
    res.json({
      success: true,
      message: `Te≈üvik ba≈üarƒ±yla g√ºncellendi. ${degisikenAlanlar.length} alan deƒüi≈ütirildi${degisikenAlanlar.length > 0 ? ', otomatik revizyon eklendi' : ''}.`,
      data: responseData,
      changes: {
        count: degisikenAlanlar.length,
        fields: degisikenAlanlar.slice(0, 5), // ƒ∞lk 5 deƒüi≈üiklik
        revisionAdded: degisikenAlanlar.length > 0,
        revisionNumber: degisikenAlanlar.length > 0 ? tesvik.revizyonlar.length : null
      }
    });

  } catch (error) {
    console.error('üö® Te≈üvik g√ºncelleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik g√ºncellenirken hata olu≈ütu',
      error: error.message,
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// üîç PROFESSIONAL DEEP CHANGE DETECTION ALGORITHM
const detectDetailedChanges = async (eskiVeri, yeniVeri) => {
  const degisikenAlanlar = [];
  
  // üìã PROFESSIONAL FIELD LABELS - KAPSAMLI T√úRK√áELE≈ûTƒ∞RME
  const fieldLabels = {
    // üè¢ Temel bilgiler
    'gmId': 'GM ID',
    'tesvikId': 'Te≈üvik ID', 
    'yatirimciUnvan': 'Yatƒ±rƒ±mcƒ± √únvanƒ±',
    'firma': 'Firma',
    'firmaId': 'Firma ID',
    
    // üìã Belge y√∂netimi
    'belgeYonetimi.belgeId': 'Belge ID',
    'belgeYonetimi.belgeNo': 'Belge No',
    'belgeYonetimi.belgeTarihi': 'Belge Tarihi',
    'belgeYonetimi.belgeMuracaatTarihi': 'Belge M√ºracaat Tarihi',
    'belgeYonetimi.belgeBaslamaTarihi': 'Belge Ba≈ülama Tarihi',
    'belgeYonetimi.belgeBitisTarihi': 'Belge Biti≈ü Tarihi',
    'belgeYonetimi.dayandigiKanun': 'Dayandƒ±ƒüƒ± Kanun',
    'belgeYonetimi.oncelikliYatirim': '√ñncelikli Yatƒ±rƒ±m',
    
    // üë• ƒ∞stihdam - GENƒ∞≈ûLETƒ∞LDƒ∞
    'istihdam.mevcutKisi': 'Mevcut Ki≈üi Sayƒ±sƒ±',
    'istihdam.ilaveKisi': 'ƒ∞lave Ki≈üi Sayƒ±sƒ±',
    'istihdam.toplamKisi': 'Toplam Ki≈üi Sayƒ±sƒ±',
    'istihdam.yeniKisi': 'Yeni Ki≈üi Sayƒ±sƒ±',
    
    // üè≠ Yatƒ±rƒ±m bilgileri - DOƒûRU FIELD PATHS
    'yatirimBilgileri.yatirim1.yatirimKonusu': 'Yatƒ±rƒ±m Konusu',
    'yatirimBilgileri.yatirim1.destekSinifi': 'Destek Sƒ±nƒ±fƒ±',
    'yatirimBilgileri.yatirim1.cins1': 'Yatƒ±rƒ±m Cinsi 1',
    'yatirimBilgileri.yatirim1.cins2': 'Yatƒ±rƒ±m Cinsi 2',
    'yatirimBilgileri.yatirim1.cins3': 'Yatƒ±rƒ±m Cinsi 3',
    'yatirimBilgileri.yatirim1.cins4': 'Yatƒ±rƒ±m Cinsi 4',
    'yatirimBilgileri.yatirim2.yatirimAdresi1': 'Yatƒ±rƒ±m Adresi',
    'yatirimBilgileri.yatirim2.yatirimAdresi2': 'Yatƒ±rƒ±m Adresi 2',
    'yatirimBilgileri.yatirim2.yatirimAdresi3': 'Yatƒ±rƒ±m Adresi 3',
    'yatirimBilgileri.yatirim2.il': 'ƒ∞l',
    'yatirimBilgileri.yatirim2.ilce': 'ƒ∞l√ße',
    'yatirimBilgileri.yatirim2.ada': 'ADA',
    'yatirimBilgileri.yatirim2.parsel': 'PARSEL',
    
    // üì¶ √úr√ºn bilgileri - DOƒûRU FIELD PATHS!
    'urunler': '√úr√ºn Bilgileri',
    'urunler.0.us97Kodu': 'US97 Kodu (1)',
    'urunler.0.urunAdi': '√úr√ºn Adƒ± (1)',
    'urunler.0.mevcutKapasite': 'Mevcut Kapasite (1)',
    'urunler.0.ilaveKapasite': 'ƒ∞lave Kapasite (1)',
    'urunler.0.toplamKapasite': 'Toplam Kapasite (1)',
    'urunler.0.kapasiteBirimi': 'Kapasite Birimi (1)',
    'urunler.1.us97Kodu': 'US97 Kodu (2)',
    'urunler.1.urunAdi': '√úr√ºn Adƒ± (2)',
    'urunler.1.mevcutKapasite': 'Mevcut Kapasite (2)',
    'urunler.1.ilaveKapasite': 'ƒ∞lave Kapasite (2)',
    'urunler.1.toplamKapasite': 'Toplam Kapasite (2)',
    'urunler.1.kapasiteBirimi': 'Kapasite Birimi (2)',
    'urunler.2.us97Kodu': 'US97 Kodu (3)',
    'urunler.2.urunAdi': '√úr√ºn Adƒ± (3)',
    'urunler.2.mevcutKapasite': 'Mevcut Kapasite (3)',
    'urunler.2.ilaveKapasite': 'ƒ∞lave Kapasite (3)',
    'urunler.2.toplamKapasite': 'Toplam Kapasite (3)',
    'urunler.2.kapasiteBirimi': 'Kapasite Birimi (3)',
    
    // üéØ Destek unsurlarƒ± - GENƒ∞≈ûLETƒ∞LDƒ∞
    'destekUnsurlari': 'Destek Unsurlarƒ±',
    'destekUnsurlari.0.destekUnsuru': 'Destek Unsuru (1)',
    'destekUnsurlari.0.sartlari': '≈ûartlarƒ± (1)',
    'destekUnsurlari.1.destekUnsuru': 'Destek Unsuru (2)',
    'destekUnsurlari.1.sartlari': '≈ûartlarƒ± (2)',
    'destekUnsurlari.2.destekUnsuru': 'Destek Unsuru (3)',
    'destekUnsurlari.2.sartlari': '≈ûartlarƒ± (3)',
    
    // ‚öôÔ∏è √ñzel ≈üartlar - GENƒ∞≈ûLETƒ∞LDƒ∞
    'ozelSartlar': '√ñzel ≈ûartlar',
    'ozelSartlar.0.kisaltma': '√ñzel ≈ûart Kƒ±saltma (1)',
    'ozelSartlar.0.notu': '√ñzel ≈ûart Notu (1)',
    'ozelSartlar.1.kisaltma': '√ñzel ≈ûart Kƒ±saltma (2)',
    'ozelSartlar.1.notu': '√ñzel ≈ûart Notu (2)',
    
    // üí∞ Finansal bilgiler - DOƒûRU FIELD PATHS!
    'maliHesaplamalar.toplamSabitYatirimTutari': 'Toplam Sabit Yatƒ±rƒ±m Tutarƒ±',
    'maliHesaplamalar.toplamSabitYatirim': 'Toplam Sabit Yatƒ±rƒ±m',
    
    // Arazi/Arsa - REVƒ∞ZYON TAKƒ∞Bƒ∞ ƒ∞√áƒ∞N KRƒ∞Tƒ∞K ALANLAR
    'maliHesaplamalar.araciArsaBedeli': 'Arazi Arsa Bedeli',
    'maliHesaplamalar.maliyetlenen.sl': 'Arazi Metrekaresi',
    'maliHesaplamalar.maliyetlenen.sm': 'Arazi Birim Fiyatƒ± (TL)',
    'maliHesaplamalar.maliyetlenen.sn': 'Arazi Arsa Bedeli (Hesaplanan)',
    'maliHesaplamalar.aracAracaGideri.sx': 'Arazi Metrekaresi (Alternatif)',
    'maliHesaplamalar.aracAracaGideri.sayisi': 'Arazi Birim Fiyatƒ± (Alternatif)',
    'maliHesaplamalar.aracAracaGideri.toplam': 'Arazi Arsa Bedeli (Alternatif)',

    // Arazi-Arsa Bedeli - DOƒûRU FIELD PATHS
    'maliHesaplamalar.araziArsaBedeli.metrekaresi': 'Arazi Metrekaresi', 
    'maliHesaplamalar.araziArsaBedeli.birimFiyatiTl': 'Arazi Birim Fiyatƒ± (TL)',
    'maliHesaplamalar.araziArsaBedeli.araziArsaBedeli': 'Arazi Arsa Bedeli',
    'maliHesaplamalar.araziArsaBedeli.aciklama': 'Arazi A√ßƒ±klamasƒ±',
    
    // DOƒûRUDAN FIELD ADI - backend tarafƒ±nda bu ≈üekilde g√∂r√ºn√ºyor
    'araciArsaBedeli': 'Arazi Arsa Bedeli (Legacy)',
    
    // Bina ƒ∞n≈üaat Giderleri - DOƒûRU FIELD PATHS
    'maliHesaplamalar.binaInsaatGideri.anaBinaGideri': 'Ana Bina Gideri',
    'maliHesaplamalar.binaInsaatGideri.yardimciBinaGideri': 'Yardƒ±mcƒ± Bina Gideri', 
    'maliHesaplamalar.binaInsaatGideri.toplamBinaGideri': 'Toplam Bina Gideri',
    'binaInsaatGideri': 'Bina ƒ∞n≈üaat Gideri',
    
    // Makine Te√ßhizat Giderleri - DOƒûRU FIELD PATHS
    'maliHesaplamalar.makinaTechizat.ithalMakina': 'ƒ∞thal Makine',
    'maliHesaplamalar.makinaTechizat.yerliMakina': 'Yerli Makine',
    'maliHesaplamalar.makinaTechizat.toplamMakina': 'Toplam Makine',
    'maliHesaplamalar.makinaTechizat.yeniMakina': 'Yeni Makine',
    'maliHesaplamalar.makinaTechizat.kullanimisMakina': 'Kullanƒ±lmƒ±≈ü Makine',
    'makinaTechizat': 'Makine Te√ßhizat',
    
    // Diƒüer Yatƒ±rƒ±m Harcamalarƒ± - DOƒûRU FIELD PATHS
    'maliHesaplamalar.digerYatirimHarcamalari.yardimciIslMakTe√ßGid': 'Yardƒ±mcƒ± ƒ∞≈ül. Mak. Te√ß. Gid.',
    'maliHesaplamalar.digerYatirimHarcamalari.ithalatVeGumGiderleri': 'ƒ∞thalat ve G√ºm. Giderleri',
    'maliHesaplamalar.digerYatirimHarcamalari.tasimaVeSigortaGiderleri': 'Ta≈üƒ±ma ve Sigorta Giderleri',
    'maliHesaplamalar.digerYatirimHarcamalari.etudVeProjeGiderleri': 'Et√ºd ve Proje Giderleri',
    'maliHesaplamalar.digerYatirimHarcamalari.digerGiderleri': 'Diƒüer Giderleri',
    
    // Finansman - DOƒûRU FIELD PATHS
    'maliHesaplamalar.finansman.ozkaynaklar.ozkaynaklar': '√ñz Kaynaklar',
    'maliHesaplamalar.finansman.yabanciKaynaklar.bankKredisi': 'Banka Kredisi',
    'maliHesaplamalar.finansman.yabanciKaynaklar.ikinciElFiyatFarki': 'ƒ∞kinci El Fiyat Farkƒ±',
    'maliHesaplamalar.finansman.yabanciKaynaklar.kullanilmisTe√ßhizatBedeli': 'Kullanƒ±lmƒ±≈ü Te√ßhizat Bedeli',
    'maliHesaplamalar.finansman.yabanciKaynaklar.digerDisKaynaklar': 'Diƒüer Dƒ±≈ü Kaynaklar',
    'maliHesaplamalar.finansman.yabanciKaynaklar.digerYabanciKaynak': 'Diƒüer Yabancƒ± Kaynak',
    'maliHesaplamalar.finansman.yabanciKaynaklar.toplamYabanciKaynak': 'Toplam Yabancƒ± Kaynak',
    'maliHesaplamalar.finansman.toplamFinansman': 'Toplam Finansman',
    
    // üìä Durum bilgileri
    'durumBilgileri.genelDurum': 'Genel Durum',
    'durumBilgileri.durumAciklamasi': 'Durum A√ßƒ±klamasƒ±',
    'durumBilgileri.durumRengi': 'Durum Rengi',
    'durumBilgileri.sonGuncellemeTarihi': 'Son G√ºncelleme Tarihi',
    
    // üìù Notlar
    'notlar.dahiliNotlar': 'Dahili Notlar',
    'notlar.resmiAciklamalar': 'Resmi A√ßƒ±klamalar',
    'sonGuncellemeNotlari': 'Son G√ºncelleme Notlarƒ±'
  };

  // üîç Recursive comparison function
  const compareObjects = (oldObj, newObj, prefix = '') => {
    if (!oldObj && !newObj) return;
    
    // Her iki taraftaki t√ºm key'leri topla
    const allKeys = new Set([
      ...Object.keys(oldObj || {}), 
      ...Object.keys(newObj || {})
    ]);

    allKeys.forEach(key => {
      const fullKey = prefix ? `${prefix}.${key}` : key;
      const oldValue = oldObj ? oldObj[key] : undefined;
      const newValue = newObj ? newObj[key] : undefined;
      
      // Sistem alanlarƒ±nƒ± filtrele
      if (['_id', '__v', 'createdAt', 'updatedAt', 'revizyonlar', 'sonGuncelleyen', 'sonGuncellemeNotlari'].includes(key)) {
        return;
      }
      
      // Nested object kontrol√º
      if (typeof newValue === 'object' && newValue !== null && 
          typeof oldValue === 'object' && oldValue !== null &&
          !Array.isArray(newValue) && !Array.isArray(oldValue)) {
        compareObjects(oldValue, newValue, fullKey);
      } 
      // Array kontrol√º
      else if (Array.isArray(newValue) || Array.isArray(oldValue)) {
        const oldStr = JSON.stringify(oldValue || []);
        const newStr = JSON.stringify(newValue || []);
        if (oldStr !== newStr && fieldLabels[fullKey]) {
          degisikenAlanlar.push({
            alan: fullKey,
            label: fieldLabels[fullKey],
            eskiDeger: oldValue,
            yeniDeger: newValue,
            tip: 'array'
          });
        }
      }
      // Primitive deƒüer kontrol√º
      else if (oldValue !== newValue) {
        // Label varsa ekle, yoksa skip
        if (fieldLabels[fullKey]) {
          degisikenAlanlar.push({
            alan: fullKey,
            label: fieldLabels[fullKey],
            eskiDeger: oldValue,
            yeniDeger: newValue,
            tip: typeof newValue
          });
        }
      }
    });
  };

  // Kar≈üƒ±la≈ütƒ±rmayƒ± ba≈ülat
  compareObjects(eskiVeri, yeniVeri);
  
  console.log('üîç Change detection tamamlandƒ±:', degisikenAlanlar.length, 'deƒüi≈üiklik tespit edildi');
  
  return degisikenAlanlar;
};

// üéØ DURUM G√úNCELLEME (Excel Renk Kodlamasƒ±)
const updateTesvikDurum = async (req, res) => {
  try {
    const { id } = req.params;
    const { yeniDurum, aciklama, kullaniciNotu } = req.body;

    const tesvik = await Tesvik.findById(id);
    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    const eskiDurum = tesvik.durumBilgileri.genelDurum;
    
    // Durum g√ºncelle
    tesvik.durumBilgileri.genelDurum = yeniDurum;
    tesvik.durumBilgileri.durumAciklamasi = aciklama || '';
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = kullaniciNotu || `Durum g√ºncellendi: ${eskiDurum} ‚Üí ${yeniDurum}`;
    
    // Renk kodlamasƒ±nƒ± g√ºncelle
    tesvik.updateDurumRengi();
    
    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'update',
      category: 'tesvik',
      title: 'Te≈üvik Durum G√ºncellendi',
      description: `${tesvik.tesvikId} durumu g√ºncellendi: ${eskiDurum} ‚Üí ${yeniDurum}`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        fields: [{
          field: 'durumBilgileri.genelDurum',
          oldValue: eskiDurum,
          newValue: yeniDurum
        }]
      }
    });

    // Bildirim olu≈ütur
    await Notification.createNotification({
      title: 'Te≈üvik Durum G√ºncellendi',
      message: `${tesvik.tesvikId} durumu: ${yeniDurum}`,
      type: yeniDurum === 'onaylandi' ? 'success' : yeniDurum === 'reddedildi' ? 'error' : 'info',
      category: 'tesvik',
      userId: req.user._id,
      relatedEntity: {
        entityType: 'tesvik',
        entityId: tesvik._id
      }
    });

    res.json({
      success: true,
      message: 'Te≈üvik durumu ba≈üarƒ±yla g√ºncellendi',
      data: {
        tesvikId: tesvik.tesvikId,
        eskiDurum,
        yeniDurum,
        durumRengi: tesvik.durumBilgileri.durumRengi,
        guncellenmeTarihi: tesvik.durumBilgileri.sonDurumGuncelleme
      }
    });

  } catch (error) {
    console.error('üö® Durum g√ºncelleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Durum g√ºncellenirken hata olu≈ütu',
      error: error.message
    });
  }
};

// üìù REVƒ∞ZYON EKLEME - Enhanced with Better Change Tracking
const addTesvikRevizyon = async (req, res) => {
  try {
    const { id } = req.params;
    const { revizyonSebebi, degisikenAlanlar, yeniDurum, kullaniciNotu } = req.body;
    
    // Validation - Sadece revizyonSebebi zorunlu
    if (!revizyonSebebi) {
      return res.status(400).json({
        success: false,
        message: 'Revizyon sebebi zorunludur'
      });
    }

    // Te≈üviƒüi populate ile birlikte getir - detaylƒ± bilgiler i√ßin
    const tesvik = await Tesvik.findById(id)
      .populate('firma', 'tamUnvan firmaId')
      .populate('olusturanKullanici', 'adSoyad email');

    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // üìä Detaylƒ± revizyon bilgileri hazƒ±rla
    const revizyonData = {
      revizyonSebebi: revizyonSebebi || 'Manuel Revizyon',
      degisikenAlanlar: degisikenAlanlar || [],
      yapanKullanici: req.user._id,
      yeniDurum: yeniDurum || tesvik.durumBilgileri?.genelDurum,
      kullaniciNotu: kullaniciNotu || '',
      // üéØ Geli≈ümi≈ü tracking bilgileri
      yapanKullaniciDetay: {
        id: req.user._id,
        adSoyad: req.user.adSoyad,
        email: req.user.email,
        rol: req.user.rol
      },
      sistem: {
        ip: req.ip || req.connection.remoteAddress,
        userAgent: req.get('User-Agent'),
        timestamp: new Date(),
        source: 'web_interface'
      }
    };

    // Revizyon ekle
    tesvik.addRevizyon(revizyonData);

    // Te≈üvik g√ºncelleme bilgileri
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = kullaniciNotu || `Revizyon eklendi: ${revizyonSebebi}`;
    tesvik.durumBilgileri.sonGuncellemeTarihi = new Date();

    // üíæ Kaydet - Bu nokta √∂nemli, revizyon tracking i√ßin
    await tesvik.save();

    // üìã Detaylƒ± Activity log
    await Activity.logActivity({
      action: 'update',
      category: 'tesvik',
      title: 'Te≈üvik Revizyonu Eklendi',
      description: `${tesvik.tesvikId} ID'li te≈üvike revizyon eklendi. Sebep: ${revizyonSebebi}`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId,
        firmaId: tesvik.firmaId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        before: { durum: tesvik.durumBilgileri?.genelDurum },
        after: { 
          durum: yeniDurum || tesvik.durumBilgileri?.genelDurum,
          revizyonNo: tesvik.revizyonlar.length,
          sebep: revizyonSebebi
        },
        fields: degisikenAlanlar || []
      },
      metadata: {
        ip: req.ip || req.connection.remoteAddress,
        userAgent: req.get('User-Agent'),
        source: 'web_interface'
      }
    });

    // üîÑ G√ºncellenmi≈ü te≈üviki tekrar getir - son haliyle
    const updatedTesvik = await Tesvik.findById(id)
      .populate('firma', 'tamUnvan firmaId')
      .populate('olusturanKullanici', 'adSoyad email')
      .lean();

    res.json({
      success: true,
      message: 'Revizyon ba≈üarƒ±yla eklendi ve sistem g√ºncellemesi kaydedildi',
      data: {
        tesvikId: tesvik.tesvikId,
        revizyonNo: tesvik.revizyonlar.length,
        revizyonSebebi,
        yeniDurum: yeniDurum || tesvik.durumBilgileri?.genelDurum,
        eklenmeTarihi: new Date(),
        toplamRevizyonSayisi: updatedTesvik.revizyonlar?.length || 0,
        // üìä Debug i√ßin ek bilgiler
        debug: {
          degisikenAlanlarSayisi: (degisikenAlanlar || []).length,
          tesvikDurumu: updatedTesvik.durumBilgileri?.genelDurum,
          aktifDurum: updatedTesvik.aktif
        }
      }
    });

  } catch (error) {
    console.error('üö® Revizyon ekleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Revizyon eklenirken hata olu≈ütu',
      error: error.message,
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// üìä REVƒ∞ZYON GE√áMƒ∞≈ûƒ∞ GETIRME
const getTesvikRevisions = async (req, res) => {
  try {
    const { id } = req.params;

    // ID format'ƒ±nƒ± kontrol et: ObjectId mi yoksa TesvikId mi?
    let tesvik;
    if (id.match(/^[0-9a-fA-F]{24}$/)) {
      // ObjectId format (24 karakter hex)
      tesvik = await Tesvik.findById(id)
        .populate('revizyonlar.yapanKullanici', 'adSoyad email rol')
        .select('tesvikId revizyonlar aktif');
    } else {
      // TesvikId format (TES20250007 gibi)
      tesvik = await Tesvik.findOne({ tesvikId: id })
        .populate('revizyonlar.yapanKullanici', 'adSoyad email rol')
        .select('tesvikId revizyonlar aktif');
    }

    if (!tesvik) {
      console.log(`üö® Te≈üvik bulunamadƒ±: ${id}`);
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Aktif olmayan te≈üvikler i√ßin de revizyon ge√ßmi≈üini g√∂sterelim
    if (tesvik.aktif === false) {
      console.log(`‚ö†Ô∏è Pasif te≈üvik i√ßin revizyon ge√ßmi≈üi istendi: ${id}`);
    }

    // Revizyonlarƒ± en son eklenen ilk sƒ±rada sƒ±rala
    const formattedRevisions = tesvik.revizyonlar
      .sort((a, b) => new Date(b.revizyonTarihi) - new Date(a.revizyonTarihi))
      .map(revision => ({
        revizyonNo: revision.revizyonNo,
        tarih: revision.revizyonTarihi,
        sebep: revision.revizyonSebebi,
        yapanKullanici: {
          ad: revision.yapanKullanici?.adSoyad || 'Bilinmeyen Kullanƒ±cƒ±',
          email: revision.yapanKullanici?.email,
          rol: revision.yapanKullanici?.rol
        },
        degisikenAlanlar: revision.degisikenAlanlar || [],
        durumOncesi: revision.durumOncesi,
        durumSonrasi: revision.durumSonrasi
      }));

    res.json({
      success: true,
      message: 'Revizyon ge√ßmi≈üi ba≈üarƒ±yla getirildi',
      data: formattedRevisions,
      count: formattedRevisions.length
    });

  } catch (error) {
    console.error('üö® Revizyon ge√ßmi≈üi getirme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Revizyon ge√ßmi≈üi getirilemedi',
      error: error.message
    });
  }
};

// üéØ ======== Dƒ∞NAMƒ∞K VERƒ∞ Y√ñNETƒ∞Mƒ∞ API'LERƒ∞ ========

// üìã Dinamik Destek Unsurlarƒ± Getirme
const getDynamicDestekUnsurlari = async (req, res) => {
  try {
    console.log('üéØ Dinamik destek unsurlarƒ± y√ºkleniyor...');

    // Statik veri + dinamik veri birle≈üimi
    const staticOptions = getDestekUnsurlariOptions();
    
    // Veritabanƒ±ndan dinamik veriyi al
    const dynamicOptions = await DestekUnsuru.find({ aktif: true })
      .populate('ekleyenKullanici', 'adSoyad')
      .sort({ kullanimSayisi: -1, createdAt: -1 })
      .lean();

    // Dinamik verileri statik formatƒ±na √ßevir
    const formattedDynamic = dynamicOptions.map(item => ({
      value: item.value,
      label: item.label,
      kategori: item.kategori,
      renk: item.renk,
      isDynamic: true,
      kullanimSayisi: item.kullanimSayisi,
      ekleyenKullanici: item.ekleyenKullanici?.adSoyad
    }));

    // Statik + dinamik verileri birle≈ütir
    const allOptions = [...staticOptions, ...formattedDynamic];

    console.log(`‚úÖ ${staticOptions.length} statik + ${dynamicOptions.length} dinamik = ${allOptions.length} toplam destek unsuru`);

    res.json({
      success: true,
      message: 'Destek unsurlarƒ± ba≈üarƒ±yla getirildi',
      data: allOptions,
      counts: {
        static: staticOptions.length,
        dynamic: dynamicOptions.length,
        total: allOptions.length
      }
    });

  } catch (error) {
    console.error('üö® Dinamik destek unsurlarƒ± hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Destek unsurlarƒ± getirilemedi',
      error: error.message
    });
  }
};

// ‚ûï Yeni Destek Unsuru Ekleme
const addDestekUnsuru = async (req, res) => {
  try {
    const { value, label, kategori = 'Diƒüer', renk = '#6B7280' } = req.body;

    if (!value || !label) {
      return res.status(400).json({
        success: false,
        message: 'Deƒüer ve label alanlarƒ± zorunludur'
      });
    }

    // Aynƒ± deƒüer var mƒ± kontrol et
    const existing = await DestekUnsuru.findOne({ value: value.trim() });
    if (existing) {
      return res.status(409).json({
        success: false,
        message: 'Bu destek unsuru zaten mevcut'
      });
    }

    // Yeni destek unsuru olu≈ütur
    const yeniDestekUnsuru = new DestekUnsuru({
      value: value.trim(),
      label: label.trim(),
      kategori,
      renk,
      ekleyenKullanici: req.user._id
    });

    await yeniDestekUnsuru.save();

    // Activity log
    await Activity.create({
      user: {
        id: req.user._id,
        name: req.user.adSoyad || `${req.user.ad} ${req.user.soyad}` || 'Kullanƒ±cƒ±',
        email: req.user.email || 'unknown@example.com'
      },
      action: 'create',
      title: 'Yeni Destek Unsuru Eklendi',
      description: `Yeni destek unsuru eklendi: ${label}`,
      ip: req.ip || '127.0.0.1',
      userAgent: req.get('User-Agent') || 'Unknown'
    });

    console.log(`‚úÖ Yeni destek unsuru eklendi: ${label} (${value})`);

    res.status(201).json({
      success: true,
      message: 'Destek unsuru ba≈üarƒ±yla eklendi',
      data: {
        value: yeniDestekUnsuru.value,
        label: yeniDestekUnsuru.label,
        kategori: yeniDestekUnsuru.kategori,
        renk: yeniDestekUnsuru.renk,
        isDynamic: true
      }
    });

  } catch (error) {
    console.error('üö® Destek unsuru ekleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Destek unsuru eklenemedi',
      error: error.message
    });
  }
};

// üìã Dinamik Destek ≈ûartlarƒ± Getirme
const getDynamicDestekSartlari = async (req, res) => {
  try {
    console.log('üéØ Dinamik destek ≈üartlarƒ± y√ºkleniyor...');

    const staticOptions = getDestekSartlariOptions();
    
    const dynamicOptions = await DestekSarti.find({ aktif: true })
      .populate('ekleyenKullanici', 'adSoyad')
      .sort({ kullanimSayisi: -1, createdAt: -1 })
      .lean();

    const formattedDynamic = dynamicOptions.map(item => ({
      value: item.value,
      label: item.label,
      kategori: item.kategori,
      yuzde: item.yuzde,
      yil: item.yil,
      isDynamic: true,
      kullanimSayisi: item.kullanimSayisi,
      ekleyenKullanici: item.ekleyenKullanici?.adSoyad
    }));

    const allOptions = [...staticOptions, ...formattedDynamic];

    console.log(`‚úÖ ${staticOptions.length} statik + ${dynamicOptions.length} dinamik = ${allOptions.length} toplam destek ≈üartƒ±`);

    res.json({
      success: true,
      message: 'Destek ≈üartlarƒ± ba≈üarƒ±yla getirildi',
      data: allOptions,
      counts: {
        static: staticOptions.length,
        dynamic: dynamicOptions.length,
        total: allOptions.length
      }
    });

  } catch (error) {
    console.error('üö® Dinamik destek ≈üartlarƒ± hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Destek ≈üartlarƒ± getirilemedi',
      error: error.message
    });
  }
};

// ‚ûï Yeni Destek ≈ûartƒ± Ekleme
const addDestekSarti = async (req, res) => {
  try {
    const { value, label, kategori = 'Diƒüer', yuzde, yil } = req.body;

    if (!value || !label) {
      return res.status(400).json({
        success: false,
        message: 'Deƒüer ve label alanlarƒ± zorunludur'
      });
    }

    const existing = await DestekSarti.findOne({ value: value.trim() });
    if (existing) {
      return res.status(409).json({
        success: false,
        message: 'Bu destek ≈üartƒ± zaten mevcut'
      });
    }

    const yeniDestekSarti = new DestekSarti({
      value: value.trim(),
      label: label.trim(),
      kategori,
      yuzde,
      yil,
      ekleyenKullanici: req.user._id
    });

    await yeniDestekSarti.save();

    await Activity.create({
      user: {
        id: req.user._id,
        name: req.user.adSoyad || `${req.user.ad} ${req.user.soyad}` || 'Kullanƒ±cƒ±',
        email: req.user.email || 'unknown@example.com'
      },
      action: 'create',
      title: 'Yeni Destek ≈ûartƒ± Eklendi',
      description: `Yeni destek ≈üartƒ± eklendi: ${label}`,
      ip: req.ip || '127.0.0.1',
      userAgent: req.get('User-Agent') || 'Unknown'
    });

    console.log(`‚úÖ Yeni destek ≈üartƒ± eklendi: ${label}`);

    res.status(201).json({
      success: true,
      message: 'Destek ≈üartƒ± ba≈üarƒ±yla eklendi',
      data: {
        value: yeniDestekSarti.value,
        label: yeniDestekSarti.label,
        kategori: yeniDestekSarti.kategori,
        yuzde: yeniDestekSarti.yuzde,
        yil: yeniDestekSarti.yil,
        isDynamic: true
      }
    });

  } catch (error) {
    console.error('üö® Destek ≈üartƒ± ekleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Destek ≈üartƒ± eklenemedi',
      error: error.message
    });
  }
};

// üìã Dinamik √ñzel ≈ûartlar Getirme
const getDynamicOzelSartlar = async (req, res) => {
  try {
    console.log('üéØ Dinamik √∂zel ≈üartlar y√ºkleniyor...');

    const staticOptions = getOzelSartKisaltmalariOptions();
    
    const dynamicOptions = await OzelSart.find({ aktif: true })
      .populate('ekleyenKullanici', 'adSoyad')
      .sort({ kullanimSayisi: -1, createdAt: -1 })
      .lean();

    const formattedDynamic = dynamicOptions.map(item => ({
      value: item.kisaltma,
      label: `${item.kisaltma} - ${item.aciklama}`,
      kisaltma: item.kisaltma,
      aciklama: item.aciklama,
      kategori: item.kategori,
      isDynamic: true,
      kullanimSayisi: item.kullanimSayisi,
      ekleyenKullanici: item.ekleyenKullanici?.adSoyad
    }));

    const allOptions = [...staticOptions, ...formattedDynamic];

    console.log(`‚úÖ ${staticOptions.length} statik + ${dynamicOptions.length} dinamik = ${allOptions.length} toplam √∂zel ≈üart`);

    res.json({
      success: true,
      message: '√ñzel ≈üartlar ba≈üarƒ±yla getirildi',
      data: allOptions,
      counts: {
        static: staticOptions.length,
        dynamic: dynamicOptions.length,
        total: allOptions.length
      }
    });

  } catch (error) {
    console.error('üö® Dinamik √∂zel ≈üartlar hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: '√ñzel ≈üartlar getirilemedi',
      error: error.message
    });
  }
};

// ‚ûï Yeni √ñzel ≈ûart Ekleme
const addOzelSart = async (req, res) => {
  try {
    const { kisaltma, aciklama, kategori = 'Diƒüer' } = req.body;

    if (!kisaltma || !aciklama) {
      return res.status(400).json({
        success: false,
        message: 'Kƒ±saltma ve a√ßƒ±klama alanlarƒ± zorunludur'
      });
    }

    const existing = await OzelSart.findOne({ kisaltma: kisaltma.trim().toUpperCase() });
    if (existing) {
      return res.status(409).json({
        success: false,
        message: 'Bu kƒ±saltma zaten mevcut'
      });
    }

    const yeniOzelSart = new OzelSart({
      kisaltma: kisaltma.trim().toUpperCase(),
      aciklama: aciklama.trim(),
      kategori,
      ekleyenKullanici: req.user._id
    });

    await yeniOzelSart.save();

    await Activity.create({
      user: {
        id: req.user._id,
        name: req.user.adSoyad || `${req.user.ad} ${req.user.soyad}` || 'Kullanƒ±cƒ±',
        email: req.user.email || 'unknown@example.com'
      },
      action: 'create',
      title: 'Yeni √ñzel ≈ûart Eklendi',
      description: `Yeni √∂zel ≈üart eklendi: ${kisaltma} - ${aciklama}`,
      ip: req.ip || '127.0.0.1',
      userAgent: req.get('User-Agent') || 'Unknown'
    });

    console.log(`‚úÖ Yeni √∂zel ≈üart eklendi: ${kisaltma} - ${aciklama}`);

    res.status(201).json({
      success: true,
      message: '√ñzel ≈üart ba≈üarƒ±yla eklendi',
      data: {
        value: yeniOzelSart.kisaltma,
        label: `${yeniOzelSart.kisaltma} - ${yeniOzelSart.aciklama}`,
        kisaltma: yeniOzelSart.kisaltma,
        aciklama: yeniOzelSart.aciklama,
        kategori: yeniOzelSart.kategori,
        isDynamic: true
      }
    });

  } catch (error) {
    console.error('üö® √ñzel ≈üart ekleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: '√ñzel ≈üart eklenemedi',
      error: error.message
    });
  }
};

// üìã Dinamik √ñzel ≈ûart Notlarƒ± Getirme
const getDynamicOzelSartNotlari = async (req, res) => {
  try {
    console.log('üéØ Dinamik √∂zel ≈üart notlarƒ± y√ºkleniyor...');

    const staticOptions = getOzelSartNotlariOptions();
    
    const dynamicOptions = await OzelSartNotu.find({ aktif: true })
      .populate('ekleyenKullanici', 'adSoyad')
      .sort({ kullanimSayisi: -1, createdAt: -1 })
      .lean();

    const formattedDynamic = dynamicOptions.map(item => ({
      value: item.value,
      label: item.label,
      kategori: item.kategori,
      isDynamic: true,
      kullanimSayisi: item.kullanimSayisi,
      ekleyenKullanici: item.ekleyenKullanici?.adSoyad
    }));

    const allOptions = [...staticOptions, ...formattedDynamic];

    console.log(`‚úÖ ${staticOptions.length} statik + ${dynamicOptions.length} dinamik = ${allOptions.length} toplam √∂zel ≈üart notu`);

    res.json({
      success: true,
      message: '√ñzel ≈üart notlarƒ± ba≈üarƒ±yla getirildi',
      data: allOptions,
      counts: {
        static: staticOptions.length,
        dynamic: dynamicOptions.length,
        total: allOptions.length
      }
    });

  } catch (error) {
    console.error('üö® Dinamik √∂zel ≈üart notlarƒ± hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: '√ñzel ≈üart notlarƒ± getirilemedi',
      error: error.message
    });
  }
};

// ‚ûï Yeni √ñzel ≈ûart Notu Ekleme
const addOzelSartNotu = async (req, res) => {
  try {
    const { value, label, kategori = 'Diƒüer' } = req.body;

    if (!value || !label) {
      return res.status(400).json({
        success: false,
        message: 'Deƒüer ve label alanlarƒ± zorunludur'
      });
    }

    const existing = await OzelSartNotu.findOne({ value: value.trim() });
    if (existing) {
      return res.status(409).json({
        success: false,
        message: 'Bu √∂zel ≈üart notu zaten mevcut'
      });
    }

    const yeniOzelSartNotu = new OzelSartNotu({
      value: value.trim(),
      label: label.trim(),
      kategori,
      ekleyenKullanici: req.user._id
    });

    await yeniOzelSartNotu.save();

    await Activity.create({
      user: {
        id: req.user._id,
        name: req.user.adSoyad || `${req.user.ad} ${req.user.soyad}` || 'Kullanƒ±cƒ±',
        email: req.user.email || 'unknown@example.com'
      },
      action: 'create',
      title: 'Yeni √ñzel ≈ûart Notu Eklendi',
      description: `Yeni √∂zel ≈üart notu eklendi: ${label}`,
      ip: req.ip || '127.0.0.1',
      userAgent: req.get('User-Agent') || 'Unknown'
    });

    console.log(`‚úÖ Yeni √∂zel ≈üart notu eklendi: ${label}`);

    res.status(201).json({
      success: true,
      message: '√ñzel ≈üart notu ba≈üarƒ±yla eklendi',
      data: {
        value: yeniOzelSartNotu.value,
        label: yeniOzelSartNotu.label,
        kategori: yeniOzelSartNotu.kategori,
        isDynamic: true
      }
    });

  } catch (error) {
    console.error('üö® √ñzel ≈üart notu ekleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: '√ñzel ≈üart notu eklenemedi',
      error: error.message
    });
  }
};

// üéØ ======== TEMPLATE ƒ∞√áƒ∞N Dƒ∞NAMƒ∞K VERƒ∞ HELPER FONKSƒ∞YONLARI ========

// Dinamik Destek Unsurlarƒ± Verisi (Template i√ßin)
const getDynamicDestekUnsurlariData = async () => {
  const staticOptions = getDestekUnsurlariOptions();
  
  const dynamicOptions = await DestekUnsuru.find({ aktif: true })
    .sort({ kullanimSayisi: -1, createdAt: -1 })
    .lean();

  const formattedDynamic = dynamicOptions.map(item => ({
    value: item.value,
    label: item.label,
    kategori: item.kategori,
    renk: item.renk,
    isDynamic: true,
    kullanimSayisi: item.kullanimSayisi
  }));

  return [...staticOptions, ...formattedDynamic];
};

// Dinamik Destek ≈ûartlarƒ± Verisi (Template i√ßin)
const getDynamicDestekSartlariData = async () => {
  const staticOptions = getDestekSartlariOptions();
  
  const dynamicOptions = await DestekSarti.find({ aktif: true })
    .sort({ kullanimSayisi: -1, createdAt: -1 })
    .lean();

  const formattedDynamic = dynamicOptions.map(item => ({
    value: item.value,
    label: item.label,
    kategori: item.kategori,
    yuzde: item.yuzde,
    yil: item.yil,
    isDynamic: true,
    kullanimSayisi: item.kullanimSayisi
  }));

  return [...staticOptions, ...formattedDynamic];
};

// Dinamik √ñzel ≈ûartlar Verisi (Template i√ßin)
const getDynamicOzelSartlarData = async () => {
  const staticOptions = getOzelSartKisaltmalariOptions();
  
  const dynamicOptions = await OzelSart.find({ aktif: true })
    .sort({ kullanimSayisi: -1, createdAt: -1 })
    .lean();

  const formattedDynamic = dynamicOptions.map(item => ({
    value: item.kisaltma,
    label: `${item.kisaltma} - ${item.aciklama}`,
    kisaltma: item.kisaltma,
    aciklama: item.aciklama,
    kategori: item.kategori,
    isDynamic: true,
    kullanimSayisi: item.kullanimSayisi
  }));

  return [...staticOptions, ...formattedDynamic];
};

// Dinamik √ñzel ≈ûart Notlarƒ± Verisi (Template i√ßin)
const getDynamicOzelSartNotlariData = async () => {
  const staticOptions = getOzelSartNotlariOptions();
  
  const dynamicOptions = await OzelSartNotu.find({ aktif: true })
    .sort({ kullanimSayisi: -1, createdAt: -1 })
    .lean();

  const formattedDynamic = dynamicOptions.map(item => ({
    value: item.value,
    label: item.label,
    kategori: item.kategori,
    isDynamic: true,
    kullanimSayisi: item.kullanimSayisi
  }));

  return [...staticOptions, ...formattedDynamic];
};

// üí∞ MALƒ∞ HESAPLAMALAR OTOMATƒ∞K HESAPLAMA
const calculateMaliHesaplamalar = async (req, res) => {
  try {
    const {
      sl = 0, sm = 0, // Maliyetlenen
      et = 0, eu = 0, ev = 0, ew = 0, ex = 0, ey = 0, // Yatƒ±rƒ±m hesaplamalarƒ±
      fb = 0, fc = 0, fe = 0, ff = 0, // Makina te√ßhizat
      fh = 0, fi = 0, // Finansman
      mevcutKisi = 0, ilaveKisi = 0 // ƒ∞stihdam
    } = req.body;

    // Otomatik hesaplamalar (Excel form√ºlleri)
    const hesaplamalar = {
      maliyetlenen: {
        sl: parseFloat(sl),
        sm: parseFloat(sm),
        sn: parseFloat(sl) * parseFloat(sm) // SL * SM
      },
      
      yatirimHesaplamalari: {
        et: parseFloat(et),
        eu: parseFloat(eu),
        ev: parseFloat(ev),
        ew: parseFloat(ew),
        ex: parseFloat(ex),
        ey: parseFloat(ey),
        ez: parseFloat(et) + parseFloat(eu) + parseFloat(ev) + parseFloat(ew) + parseFloat(ex) + parseFloat(ey) // TOPLAM
      },
      
      makinaTechizat: {
        ithalMakina: parseFloat(fb), // FB
        yerliMakina: parseFloat(fc),  // FC
        toplamMakina: parseFloat(fb) + parseFloat(fc), // FB + FC
        yeniMakina: parseFloat(fe),   // FE
        kullanimisMakina: parseFloat(ff), // FF
        toplamYeniMakina: parseFloat(fe) + parseFloat(ff) // FE + FF
      },
      
      finansman: {
        yabanciKaynak: parseFloat(fh), // FH
        ozKaynak: parseFloat(fi),      // FI
        toplamFinansman: parseFloat(fh) + parseFloat(fi) // FH + FI
      },
      
      istihdam: {
        mevcutKisi: parseInt(mevcutKisi),
        ilaveKisi: parseInt(ilaveKisi),
        toplamKisi: parseInt(mevcutKisi) + parseInt(ilaveKisi)
      },
      
      hesaplamaTarihi: new Date()
    };

    res.json({
      success: true,
      message: 'Mali hesaplamalar tamamlandƒ±',
      data: hesaplamalar,
      form√ºller: {
        'SN = SL * SM': `${sl} * ${sm} = ${hesaplamalar.maliyetlenen.sn}`,
        'EZ = ET+EU+EV+EW+EX+EY': `${et}+${eu}+${ev}+${ew}+${ex}+${ey} = ${hesaplamalar.yatirimHesaplamalari.ez}`,
        'Toplam Makina = FB + FC': `${fb} + ${fc} = ${hesaplamalar.makinaTechizat.toplamMakina}`,
        'Toplam Finansman = FH + FI': `${fh} + ${fi} = ${hesaplamalar.finansman.toplamFinansman}`,
        'Toplam Ki≈üi = Mevcut + ƒ∞lave': `${mevcutKisi} + ${ilaveKisi} = ${hesaplamalar.istihdam.toplamKisi}`
      }
    });

  } catch (error) {
    console.error('üö® Mali hesaplama hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Mali hesaplamalar yapƒ±lƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üé® DURUM RENKLERƒ∞ (Excel Renk Kodlama Sistemi)
const getDurumRenkleri = async (req, res) => {
  try {
    const renkKodlari = {
      'taslak': { renk: 'gri', hex: '#6B7280', aciklama: 'Taslak - Hen√ºz tamamlanmamƒ±≈ü' },
      'hazirlaniyor': { renk: 'sari', hex: '#F59E0B', aciklama: 'Hazƒ±rlanƒ±yor - ƒ∞≈ülem devam ediyor' },
      'ba≈üvuru_yapildi': { renk: 'mavi', hex: '#3B82F6', aciklama: 'Ba≈üvuru Yapƒ±ldƒ± - Deƒüerlendirme bekliyor' },
      'inceleniyor': { renk: 'turuncu', hex: '#F97316', aciklama: 'ƒ∞nceleniyor - Aktif deƒüerlendirme' },
      'ek_belge_istendi': { renk: 'sari', hex: '#F59E0B', aciklama: 'Ek Belge ƒ∞stendi - Eksik evrak' },
      'revize_talep_edildi': { renk: 'kirmizi', hex: '#EF4444', aciklama: 'Revize Talep Edildi - D√ºzeltme gerekli' },
      'onay_bekliyor': { renk: 'turuncu', hex: '#F97316', aciklama: 'Onay Bekliyor - Final a≈üamasƒ±' },
      'onaylandi': { renk: 'yesil', hex: '#10B981', aciklama: 'Onaylandƒ± - Ba≈üarƒ±yla tamamlandƒ±' },
      'reddedildi': { renk: 'kirmizi', hex: '#EF4444', aciklama: 'Reddedildi - Ba≈üvuru kabul edilmedi' },
      'iptal_edildi': { renk: 'gri', hex: '#6B7280', aciklama: 'ƒ∞ptal Edildi - ƒ∞≈ülem durduruldu' }
    };

    res.json({
      success: true,
      message: 'Durum renk kodlarƒ± getirildi',
      data: renkKodlari
    });

  } catch (error) {
    console.error('üö® Renk kodlarƒ± hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Renk kodlarƒ± getirilemedi',
      error: error.message
    });
  }
};

// üìä TE≈ûVƒ∞K ƒ∞STATƒ∞STƒ∞KLERƒ∞
const getTesvikStats = async (req, res) => {
  try {
    const stats = await Tesvik.getStatistics();
    
    res.json({
      success: true,
      message: 'Te≈üvik istatistikleri getirildi',
      data: stats
    });

  } catch (error) {
    console.error('üö® ƒ∞statistik hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'ƒ∞statistikler getirilemedi',
      error: error.message
    });
  }
};

// üîç TE≈ûVƒ∞K ARAMA
const searchTesvikler = async (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q || q.length < 2) {
      return res.status(400).json({
        success: false,
        message: 'Arama terimi en az 2 karakter olmalƒ±dƒ±r'
      });
    }

    const tesvikler = await Tesvik.searchTesvikler(q)
      .populate('firma', 'tamUnvan firmaId')
      .select('tesvikId gmId yatirimciUnvan durumBilgileri createdAt')
      .limit(50);

    res.json({
      success: true,
      message: `"${q}" i√ßin ${tesvikler.length} sonu√ß bulundu`,
      data: tesvikler
    });

  } catch (error) {
    console.error('üö® Arama hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Arama yapƒ±lƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üóëÔ∏è TE≈ûVƒ∞K Sƒ∞LME (Soft Delete)
const deleteTesvik = async (req, res) => {
  try {
    const { id } = req.params;

    const tesvik = await Tesvik.findById(id);
    if (!tesvik) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Silme √∂ncesi mevcut durumu kaydet
    const beforeState = {
      aktif: tesvik.aktif,
      tesvikId: tesvik.tesvikId,
      yatirimciUnvan: tesvik.yatirimciUnvan,
      gmId: tesvik.gmId,
      durumBilgileri: tesvik.durumBilgileri,
      sonGuncelleyen: tesvik.sonGuncelleyen,
      sonGuncellemeNotlari: tesvik.sonGuncellemeNotlari
    };

    // Soft delete
    tesvik.aktif = false;
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = 'Te≈üvik silindi';
    
    await tesvik.save();

    // Silme sonrasƒ± durumu kaydet
    const afterState = {
      aktif: tesvik.aktif,
      tesvikId: tesvik.tesvikId,
      yatirimciUnvan: tesvik.yatirimciUnvan,
      gmId: tesvik.gmId,
      durumBilgileri: tesvik.durumBilgileri,
      sonGuncelleyen: tesvik.sonGuncelleyen,
      sonGuncellemeNotlari: tesvik.sonGuncellemeNotlari
    };

    // Silinen alanlarƒ± tespit et
    const deletedFields = [
      {
        field: 'aktif',
        fieldName: 'Aktiflik Durumu',
        oldValue: beforeState.aktif,
        newValue: afterState.aktif
      },
      {
        field: 'sonGuncellemeNotlari',
        fieldName: 'Son G√ºncelleme Notlarƒ±',
        oldValue: beforeState.sonGuncellemeNotlari,
        newValue: afterState.sonGuncellemeNotlari
      }
    ];

    // IP ve User Agent bilgilerini al
    const clientIp = req.headers['x-forwarded-for'] || 
                     req.headers['x-real-ip'] || 
                     req.connection.remoteAddress || 
                     req.socket.remoteAddress || 
                     (req.connection.socket ? req.connection.socket.remoteAddress : null) || 
                     req.ip || 
                     'Bilinmiyor';
    
    const userAgent = req.headers['user-agent'] || 'Bilinmiyor';

    // Detaylƒ± activity log
    await Activity.logActivity({
      action: 'delete',
      category: 'tesvik',
      title: 'Te≈üvik Silindi',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik silindi (soft delete)`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        before: beforeState,
        after: afterState,
        fields: deletedFields
      },
      metadata: {
        ip: clientIp,
        userAgent: userAgent,
        source: 'web_interface',
        timestamp: new Date(),
        operationType: 'soft_delete'
      }
    });

    res.json({
      success: true,
      message: 'Te≈üvik ba≈üarƒ±yla silindi'
    });

  } catch (error) {
    console.error('üö® Te≈üvik silme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik silinirken hata olu≈ütu',
      error: error.message
    });
  }
};

// SONRAKƒ∞ TE≈ûVƒ∞K ID'Yƒ∞ AL
const getNextTesvikId = async (req, res) => {
  try {
    const year = new Date().getFullYear();
    const lastTesvik = await Tesvik.findOne(
      { tesvikId: new RegExp(`^TES${year}`) },
      { tesvikId: 1 },
      { sort: { tesvikId: -1 } }
    );
    
    let nextNumber = 1;
    if (lastTesvik && lastTesvik.tesvikId) {
      const currentNumber = parseInt(lastTesvik.tesvikId.slice(7));
      nextNumber = currentNumber + 1;
    }
    
    const nextTesvikId = `TES${year}${nextNumber.toString().padStart(4, '0')}`;

    res.json({
      success: true,
      message: 'Sonraki te≈üvik ID getirildi',
      data: {
        nextTesvikId,
        year,
        sequenceNumber: nextNumber
      }
    });

  } catch (error) {
    console.error('üö® Next ID hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Sonraki ID alƒ±nƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üÜî SONRAKƒ∞ GM ID'Yƒ∞ AL - OTOMATIK GENERATION
const getNextGmId = async (req, res) => {
  try {
    console.log('üîç Finding next available GM ID...');
    
    // Son GM ID'yi bul
    const lastTesvik = await Tesvik.findOne(
      { gmId: { $exists: true, $ne: '' } },
      { gmId: 1 },
      { sort: { gmId: -1 } }
    );
    
    let nextNumber = 1;
    
    if (lastTesvik && lastTesvik.gmId) {
      // GM ID format: GM2024001, GM2024002, etc.
      const match = lastTesvik.gmId.match(/^GM(\d{4})(\d{3})$/);
      if (match) {
        const year = parseInt(match[1]);
        const currentNumber = parseInt(match[2]);
        
        // Aynƒ± yƒ±l i√ßindeyse sequence artƒ±r, yoksa 1'den ba≈üla
        if (year === new Date().getFullYear()) {
          nextNumber = currentNumber + 1;
        } else {
          nextNumber = 1;
        }
      }
    }
    
    const currentYear = new Date().getFullYear();
    const nextGmId = `GM${currentYear}${nextNumber.toString().padStart(3, '0')}`;
    
    console.log('‚úÖ Next available GM ID:', nextGmId);

    res.json({
      success: true,
      message: 'Sonraki GM ID getirildi',
      data: {
        nextGmId,
        year: currentYear,
        sequenceNumber: nextNumber,
        format: 'GM + Year + 3 digit sequence'
      }
    });

  } catch (error) {
    console.error('üö® Next GM ID hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Sonraki GM ID alƒ±nƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üìã TE≈ûVƒ∞K FORM TEMPLATE VERƒ∞LERƒ∞Nƒ∞ GETƒ∞R
const getTesvikFormTemplate = async (req, res) => {
  try {
    console.log('üìã Loading template data for te≈üvik form...');

    // Paralel sorgular ile verileri al
    const [
      firmalar,
      nextGmId,
      nextTesvikId,
      durumlar,
      destekSiniflari,
      iller,
      dayandigiKanunlar,
      belgeDurumlari,
      yatirimTipleri,
      kapasiteBirimleri,
      osbOptions,
      yatirimKonusuKategorileri,
      u97Kodlari,
      destekUnsurlariOptions,
      destekSartlariOptions,
      ozelSartKisaltmalari,
      ozelSartNotlari
    ] = await Promise.all([
      // T√ºm aktif firmalarƒ± getir - LIMIT YOK!
      Firma.find({ aktif: true })
        .select('firmaId tamUnvan vergiNoTC firmaIl')
        .sort({ firmaId: 1 })
        .lean(),

      // Sonraki GM ID
      getNextGmIdValue(),

      // Sonraki Te≈üvik ID
      getNextTesvikIdValue(),

      // Durum listesi
      getDurumOptions(),

      // Destek sƒ±nƒ±flarƒ±
      getDestekSiniflariOptions(),

      // ƒ∞ller listesi
      getIllerOptions(),

      // Dayandƒ±ƒüƒ± Kanunlar
      getDayandigiKanunOptions(),

      // Belge Durumlarƒ±
      getBelgeDurumOptions(),

      // Yatƒ±rƒ±m Tipleri (Cinsi)
      getYatirimTipiOptions(),

      // Kapasite Birimleri
      getKapasiteBirimleriOptions(),

      // OSB Se√ßenekleri
      getOsbOptions(),

      // Yatƒ±rƒ±m Konusu Kategorileri
      getYatirimKonusuKategorileri(),

      // U$97 Kodlarƒ±
      getU97KodlariOptions(),

      // üéØ Dƒ∞NAMƒ∞K DESTEK UNSURLARI (Statik + Dinamik Birle≈üim)
      getDynamicDestekUnsurlariData(),

      // üéØ Dƒ∞NAMƒ∞K DESTEK ≈ûARTLARI (Statik + Dinamik Birle≈üim)  
      getDynamicDestekSartlariData(),

      // üéØ Dƒ∞NAMƒ∞K √ñZEL ≈ûARTLAR (Statik + Dinamik Birle≈üim)
      getDynamicOzelSartlarData(),

      // üéØ Dƒ∞NAMƒ∞K √ñZEL ≈ûART NOTLARI (Statik + Dinamik Birle≈üim)
      getDynamicOzelSartNotlariData()
    ]);

    console.log(`‚úÖ Template data loaded: ${firmalar.length} firmalar, GM ID: ${nextGmId}, Te≈üvik ID: ${nextTesvikId}`);

    res.json({
      success: true,
      message: 'Template verileri ba≈üarƒ±yla getirildi',
      data: {
        firmalar,
        nextGmId,
        nextTesvikId,
        durumlar,
        destekSiniflari,
        iller,
        dayandigiKanunlar,
        belgeDurumlari,
        yatirimTipleri,
        kapasiteBirimleri,
        osbOptions,
        yatirimKonusuKategorileri,
        u97Kodlari,
        destekUnsurlariOptions,
        destekSartlariOptions,
        ozelSartKisaltmalari,
        ozelSartNotlari,
        urunKodlari: getUrunKodlariTemplate(), // Excel U$97 kodlarƒ±
        destekUnsurlari: getDestekUnsurlariTemplate(),
        ozelSartlar: getOzelSartlarTemplate(),
        kunyeBilgileri: getKunyeBilgileriTemplate()
      }
    });

  } catch (error) {
    console.error('üö® Template data hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Template verileri y√ºklenirken hata olu≈ütu',
      error: error.message
    });
  }
};

// üîß Helper Functions for Template Data
const getNextGmIdValue = async () => {
  const lastTesvik = await Tesvik.findOne(
    { gmId: { $exists: true, $ne: '' } },
    { gmId: 1 },
    { sort: { gmId: -1 } }
  );
  
  let nextNumber = 1;
  if (lastTesvik && lastTesvik.gmId) {
    const match = lastTesvik.gmId.match(/^GM(\d{4})(\d{3})$/);
    if (match) {
      const year = parseInt(match[1]);
      const currentNumber = parseInt(match[2]);
      if (year === new Date().getFullYear()) {
        nextNumber = currentNumber + 1;
      }
    }
  }
  
  return `GM${new Date().getFullYear()}${nextNumber.toString().padStart(3, '0')}`;
};

const getNextTesvikIdValue = async () => {
  const year = new Date().getFullYear();
  const lastTesvik = await Tesvik.findOne(
    { tesvikId: new RegExp(`^TES${year}`) },
    { tesvikId: 1 },
    { sort: { tesvikId: -1 } }
  );
  
  let nextNumber = 1;
  if (lastTesvik && lastTesvik.tesvikId) {
    const currentNumber = parseInt(lastTesvik.tesvikId.slice(7));
    nextNumber = currentNumber + 1;
  }
  
  return `TES${year}${nextNumber.toString().padStart(4, '0')}`;
};

const getDurumOptions = () => [
  { value: 'taslak', label: 'Taslak', color: '#6B7280' },
  { value: 'hazirlaniyor', label: 'Hazƒ±rlanƒ±yor', color: '#F59E0B' },
  { value: 'ba≈üvuru_yapildi', label: 'Ba≈üvuru Yapƒ±ldƒ±', color: '#3B82F6' },
  { value: 'inceleniyor', label: 'ƒ∞nceleniyor', color: '#F97316' },
  { value: 'ek_belge_istendi', label: 'Ek Belge ƒ∞stendi', color: '#F59E0B' },
  { value: 'revize_talep_edildi', label: 'Revize Talep Edildi', color: '#EF4444' },
  { value: 'onay_bekliyor', label: 'Onay Bekliyor', color: '#F97316' },
  { value: 'onaylandi', label: 'Onaylandƒ±', color: '#10B981' },
  { value: 'reddedildi', label: 'Reddedildi', color: '#EF4444' },
  { value: 'iptal_edildi', label: 'ƒ∞ptal Edildi', color: '#6B7280' }
];

const getDestekSiniflariOptions = () => [
  { value: 'Genel', label: 'Genel Te≈üvik', aciklama: 'Genel te≈üvik uygulamasƒ±' },
  { value: 'B√∂lgesel', label: 'B√∂lgesel Te≈üvik', aciklama: 'B√∂lgesel kalkƒ±nma te≈üviki' },
  { value: 'B√∂lgesel Alt B√∂lge', label: 'B√∂lgesel Alt B√∂lge', aciklama: 'B√∂lgesel alt kategori te≈üviki' },
  { value: 'B√∂lgesel Alt B√∂lge 18-1-a', label: 'B√∂lgesel Alt B√∂lge 18-1-a', aciklama: '√ñzel b√∂lge te≈üviki 18-1-a' },
  { value: 'B√∂lgesel Alt B√∂lge 18-1-b', label: 'B√∂lgesel Alt B√∂lge 18-1-b', aciklama: '√ñzel b√∂lge te≈üviki 18-1-b' },
  { value: 'B√∂lgesel Alt B√∂lge 18-2', label: 'B√∂lgesel Alt B√∂lge 18-2', aciklama: '√ñzel b√∂lge te≈üviki 18-2' },
  { value: 'B√∂lgesel Alt B√∂lge 18-3 OECD', label: 'B√∂lgesel Alt B√∂lge 18-3 OECD', aciklama: 'OECD standartlarƒ±' },
  { value: 'B√∂lgesel Alt B√∂lge 18-3 OECD ƒ∞stanbul', label: 'B√∂lgesel Alt B√∂lge 18-3 OECD ƒ∞stanbul', aciklama: 'ƒ∞stanbul √∂zel kategori' },
  { value: 'B√∂lgesel Alt B√∂lge 18-5 il√ße', label: 'B√∂lgesel Alt B√∂lge 18-5 il√ße', aciklama: 'ƒ∞l√ße bazlƒ± te≈üvik' },
  { value: 'B√∂lgesel √ñncelikli 17', label: 'B√∂lgesel √ñncelikli 17', aciklama: '√ñncelikli b√∂lge te≈üviki' },
  { value: 'Stratejik', label: 'Stratejik Yatƒ±rƒ±m Te≈üviki', aciklama: 'Stratejik sekt√∂r te≈üviki' },
  { value: 'Stratejik Hamle', label: 'Stratejik Hamle Te≈üviki', aciklama: 'Stratejik hamle programƒ±' },
  { value: 'Stratejik Hamle - Y√ºksek √ñncelik', label: 'Stratejik Hamle - Y√ºksek √ñncelik', aciklama: 'Y√ºksek √∂ncelikli stratejik' },
  { value: 'Proje Bazlƒ±', label: 'Proje Bazlƒ± Te≈üvik', aciklama: '√ñzel proje te≈üviki' }
];

const getIllerOptions = () => [
  'ADANA', 'ADIYAMAN', 'AFYONKARAHƒ∞SAR', 'AƒûRI', 'AMASYA', 'ANKARA', 'ANTALYA', 
  'ARTVƒ∞N', 'AYDIN', 'BALIKESƒ∞R', 'Bƒ∞LECƒ∞K', 'Bƒ∞NG√ñL', 'Bƒ∞TLƒ∞S', 'BOLU', 
  'BURDUR', 'BURSA', '√áANAKKALE', '√áANKIRI', '√áORUM', 'DENƒ∞ZLƒ∞', 'Dƒ∞YARBAKIR', 
  'EDƒ∞RNE', 'ELAZIƒû', 'ERZƒ∞NCAN', 'ERZURUM', 'ESKƒ∞≈ûEHƒ∞R', 'GAZƒ∞ANTEP', 'Gƒ∞RESUN',
  'G√úM√ú≈ûHANE', 'HAKKARƒ∞', 'HATAY', 'ISPARTA', 'ƒ∞√áEL', 'ƒ∞STANBUL', 'ƒ∞ZMƒ∞R', 
  'KARS', 'KASTAMONU', 'KAYSERƒ∞', 'KIRKLARELƒ∞', 'KIR≈ûEHƒ∞R', 'KOCAELƒ∞', 'KONYA',
  'K√úTAHYA', 'MALATYA', 'MANƒ∞SA', 'KAHRAMANMARA≈û', 'MARDƒ∞N', 'MUƒûLA', 'MU≈û',
  'NEV≈ûEHƒ∞R', 'Nƒ∞ƒûDE', 'ORDU', 'Rƒ∞ZE', 'SAKARYA', 'SAMSUN', 'Sƒ∞ƒ∞RT', 'Sƒ∞NOP',
  'Sƒ∞VAS', 'TEKƒ∞RDAƒû', 'TOKAT', 'TRABZON', 'TUNCELƒ∞', '≈ûANLIURFA', 'U≈ûAK',
  'VAN', 'YOZGAT', 'ZONGULDAK', 'AKSARAY', 'BAYBURT', 'KARAMAN', 'KIRIKKALE',
  'BATMAN', '≈ûIRNAK', 'BARTIN', 'ARDAHAN', 'IƒûDIR', 'YALOVA', 'KARAB√úK', 
  'Kƒ∞Lƒ∞S', 'OSMANƒ∞YE', 'D√úZCE'
];

const getDayandigiKanunOptions = () => [
  { value: '2012/3305', label: '2012/3305', aciklama: 'Yatƒ±rƒ±m Te≈üvik Kararnamesi' },
  { value: '2018/11201', label: '2018/11201', aciklama: 'G√ºncel Te≈üvik Sistemi' },
  { value: '2016/9495', label: '2016/9495', aciklama: '√ñnceki Te≈üvik Sistemi' }
];

const getBelgeDurumOptions = () => [
  { value: 'hazirlaniyor', label: 'Hazƒ±rlanƒ±yor', color: '#F59E0B', backgroundColor: '#fef3c7' },
  { value: 'ba≈üvuru_yapildi', label: 'Ba≈üvuru Yapƒ±ldƒ±', color: '#3B82F6', backgroundColor: '#dbeafe' },
  { value: 'inceleniyor', label: 'ƒ∞nceleniyor', color: '#8B5CF6', backgroundColor: '#ede9fe' },
  { value: 'ek_belge_bekleniyor', label: 'Ek Belge Bekleniyor', color: '#F59E0B', backgroundColor: '#fef3c7' },
  { value: 'onaylandi', label: 'Onaylandƒ±', color: '#10B981', backgroundColor: '#d1fae5' },
  { value: 'reddedildi', label: 'Reddedildi', color: '#EF4444', backgroundColor: '#fee2e2' },
  { value: 'iptal', label: 'ƒ∞ptal', color: '#6B7280', backgroundColor: '#f3f4f6' }
];

// üîÑ YATIRIM Tƒ∞Pƒ∞ (Cƒ∞NSƒ∞) - CSV'den ger√ßek veriler
const getYatirimTipiOptions = () => [
  { value: 'Komple Yeni', label: 'Komple Yeni', aciklama: 'Tamamen yeni yatƒ±rƒ±m' },
  { value: 'Tevsi', label: 'Tevsi', aciklama: 'Mevcut yatƒ±rƒ±mƒ±n geni≈ületilmesi' },
  { value: 'Modernizasyon', label: 'Modernizasyon', aciklama: 'Teknolojik yenileme' },
  { value: 'Entegrasyon', label: 'Entegrasyon', aciklama: 'Entegre yatƒ±rƒ±m' },
  { value: '√úr√ºn √áe≈üitlendirme', label: '√úr√ºn √áe≈üitlendirme', aciklama: 'Yeni √ºr√ºn geli≈ütirme' },
  { value: 'Nakil', label: 'Nakil', aciklama: 'Ta≈üƒ±nma i≈ülemi' },
  { value: 'Ta≈üƒ±nma', label: 'Ta≈üƒ±nma', aciklama: 'Yer deƒüi≈ütirme' }
];

// üìä KAPASƒ∞TE Bƒ∞Rƒ∞MLERƒ∞ - CSV'den ger√ßek veriler (Excel'deki t√ºm se√ßenekler)
const getKapasiteBirimleriOptions = () => [
  // Temel birimler
  'ADET', 'ADET(UNIT)', 'ADET-√áƒ∞FT', 'ABONE', 'ABONELƒ∞K',
  'Kƒ∞LOGRAM', 'Kƒ∞LOGRAM-ADET', 'Kƒ∞LOGRAM-BA≈û', 'Kƒ∞LOGRAM-√áƒ∞FT',
  'GRAM', 'TON', 'Lƒ∞TRE', 'METRE', 'METRE KARE', 'METRE K√úP',
  
  // Zamanlƒ± birimler - Excel'deki gibi
  'ADET/YIL', 'ADET/AY', 'ADET/G√úN', 'ADET/SAAT', 'ADET/8 SAAT',
  'ADET/HAFTA', 'ADET/D√ñNEM', 'ADET/PERYOT', 'ADET/DAKƒ∞KA',
  'ABONE/YIL', 'ABONE/G√úN', '√áƒ∞FT/YIL', '√áƒ∞FT/G√úN', 'GRAM/YIL',
  
  // √ñzel birimler - Excel'den
  'ADET/10L', 'ADET/BALON', 'ADET/DEVRE', 'ADET/TEST', 'ADET/TEKNE', 'ADET/U√áAK',
  '√áƒ∞FT', 'LEVHA', 'RULO', 'PLAKA', 'BOBIN', 'TABAKA',
  'DEMET', 'PAKET', 'KOLI', 'KASA', 'KUTU',
  
  // Kilo Watt ve enerji birimleri
  'KILO WATT', 'KILO WATT SAAT', 'Bƒ∞N KILO WATT SAAT',
  
  // Bin birimler
  'Bƒ∞N ADET', 'Bƒ∞N Kƒ∞LOGRAM', 'Bƒ∞N Lƒ∞TRE', 'Bƒ∞N METRE K√úP',
  
  // Diƒüer √∂zel birimler
  'ALTIN AYARI', 'ATV birim fiyatƒ±', 'AFƒ∞F birim fiyatƒ±',
  'AZOTUN Kƒ∞LOGRAMI', 'BAS', 'BR√úT KALORƒ∞ DEƒûERƒ∞',
  'Dƒ∞FOSFOR PENTAOKSƒ∞T Kƒ∞LOGRAMI', 'FISSILE ƒ∞ZOTOP GRAMI'
];

// üì¶ U$97 KODLARI - CSV'den ger√ßek √ºr√ºn kodlarƒ±  
const getU97KodlariOptions = () => [
  // 0111 - TAHIL VE Dƒ∞ƒûER Bƒ∞TKƒ∞SEL √úR√úNLER
  { kod: '0111.0.01', aciklama: 'Durum buƒüdayƒ± (makarnalƒ±k buƒüday)', kategori: 'Tahƒ±l' },
  { kod: '0111.0.02', aciklama: 'Yumu≈üak buƒüday ve diƒüer buƒüdaylar', kategori: 'Tahƒ±l' },
  { kod: '0111.0.03', aciklama: 'Mƒ±sƒ±r', kategori: 'Tahƒ±l' },
  { kod: '0111.0.04', aciklama: 'Dƒ±≈ü zarƒ± √ßƒ±kartƒ±lmamƒ±≈ü pirin√ß (√ßeltik)', kategori: 'Tahƒ±l' },
  { kod: '0111.0.05', aciklama: 'Arpa', kategori: 'Tahƒ±l' },
  { kod: '0111.0.06', aciklama: '√áavdar ve yulaf', kategori: 'Tahƒ±l' },
  { kod: '0111.0.07', aciklama: 'Diƒüer tahƒ±llar', kategori: 'Tahƒ±l' },
  { kod: '0111.0.08', aciklama: 'Patates', kategori: 'K√∂k ve Yumru' },
  { kod: '0111.0.09', aciklama: 'Kuru baklagil sebzeler (kabuklu)', kategori: 'Baklagil' },
  { kod: '0111.0.10', aciklama: 'Y√ºksek oranda ni≈üasta ve in√ºlin i√ßeren k√∂k ve yumru bitkiler', kategori: 'K√∂k ve Yumru' },
  { kod: '0111.0.11', aciklama: 'Soya fas√ºlyesi', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.12', aciklama: 'Yer fƒ±stƒ±ƒüƒ±', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.14', aciklama: '√áiƒüit (pamuk tohumu)', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.15', aciklama: 'B.y.s. yaƒülƒ± tohumlar ve yaƒülƒ± meyveler', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.16', aciklama: 'T√ºt√ºn (i≈ülenmemi≈ü)', kategori: 'End√ºstriyel Bitki' },
  { kod: '0111.0.17', aciklama: '≈ûeker pancarƒ±', kategori: 'End√ºstriyel Bitki' },
  { kod: '0111.0.18', aciklama: '≈ûeker kamƒ±≈üƒ±', kategori: 'End√ºstriyel Bitki' },
  { kod: '0111.0.19', aciklama: 'Saman ve yem bitkileri', kategori: 'Yem Bitkisi' },
  { kod: '0111.0.20', aciklama: 'Pamuk (√ßƒ±r√ßƒ±rlanmƒ±≈ü ya da √ßƒ±r√ßƒ±rlanmamƒ±≈ü)', kategori: 'End√ºstriyel Bitki' },
  
  // 0112 - SEBZE, BAH√áE VE K√úLT√úR Bƒ∞TKƒ∞LERƒ∞
  { kod: '0112.0.02', aciklama: 'Meyvesi yenen sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.03', aciklama: 'Yapraƒüƒ± yenen sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.04', aciklama: 'Baklagil sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.05', aciklama: 'B.y.s. diƒüer sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.08', aciklama: '√ái√ßek ve meyve tohumlarƒ±', kategori: 'Tohum' },
  { kod: '0112.0.09', aciklama: 'Sebze tohumlarƒ±', kategori: 'Tohum' },
  
  // 0113 - MEYVE VE BAHARAT Bƒ∞TKƒ∞LERƒ∞
  { kod: '0113.0.01', aciklama: 'Sofralƒ±k √ºz√ºm', kategori: 'Meyve' },
  { kod: '0113.0.02', aciklama: 'Diƒüer ya≈ü √ºz√ºm', kategori: 'Meyve' },
  { kod: '0113.0.04', aciklama: 'Turun√ßgiller', kategori: 'Meyve' },
  { kod: '0113.0.05', aciklama: 'Diƒüer meyveler (yumu≈üak √ßekirdekli)', kategori: 'Meyve' },
  { kod: '0113.0.06', aciklama: 'Diƒüer meyveler (sert √ßekirdekli)', kategori: 'Meyve' },
  { kod: '0113.0.08', aciklama: 'Zeytin', kategori: 'Meyve' },
  { kod: '0113.0.12', aciklama: 'Kakao √ßekirdeƒüi', kategori: 'End√ºstriyel Bitki' },
  { kod: '0113.0.13', aciklama: 'Baharatlar (i≈ülenmemi≈ü)', kategori: 'Baharat' },
  
  // 0121 - B√úY√úKBA≈û HAYVANCILIK
  { kod: '0121.1.01', aciklama: 'Sƒ±ƒüƒ±r (saf k√ºlt√ºr)', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.02', aciklama: 'Sƒ±ƒüƒ±r (k√ºlt√ºr melezi)', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.03', aciklama: 'Sƒ±ƒüƒ±r (yerli-diƒüer)', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.04', aciklama: 'Manda', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.05', aciklama: 'Damƒ±zlƒ±k sƒ±ƒüƒ±r yeti≈ütiriciliƒüi', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.06', aciklama: 'Sƒ±ƒüƒ±rdan elde edilen ham s√ºt', kategori: 'S√ºt √úr√ºn√º' },
  { kod: '0121.1.07', aciklama: 'Sƒ±ƒüƒ±r spermi √ºretimi (dondurulmu≈ü)', kategori: 'Damƒ±zlƒ±k' },
  
  // 0121 - K√ú√á√úKBA≈û HAYVANCILIK  
  { kod: '0121.2.01', aciklama: 'Merinos Koyunu', kategori: 'K√º√ß√ºkba≈ü' },
  { kod: '0121.2.02', aciklama: 'Yerli Koyun', kategori: 'K√º√ß√ºkba≈ü' },
  { kod: '0121.2.03', aciklama: 'Damƒ±zlƒ±k koyun yeti≈ütiriciliƒüi', kategori: 'K√º√ß√ºkba≈ü' },
  { kod: '0121.2.04', aciklama: 'Kƒ±l ke√ßisi', kategori: 'K√º√ß√ºkba≈ü' }
];

// üè≠ OSB SE√áENEKLERƒ∞ - CSV'den real-time y√ºkleme
const getOsbListFromCSV = () => {
  try {
    const csvPath = path.join(__dirname, '../../belge ytb - admin.csv');
    
    if (!fs.existsSync(csvPath)) {
      console.log('‚ö†Ô∏è OSB CSV dosyasƒ± bulunamadƒ±:', csvPath);
      return [];
    }

    // CSV dosyasƒ±nƒ± satƒ±r satƒ±r oku
    const csvData = fs.readFileSync(csvPath, 'utf-8');
    const lines = csvData.split('\n');
    
    const osbList = new Set(); // Duplicate'leri √∂nlemek i√ßin Set kullan
    
    // ƒ∞lk satƒ±r header, ondan sonrakiler data
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      if (!line || line.trim() === '') continue;
      
      const columns = line.split(',');
      const osbIli = columns[12]; // OSB ƒ∞li (13. kolon)
      const osbUnvani = columns[13]; // OSB √únvanƒ± (14. kolon)
      
      if (osbIli && osbUnvani && osbIli.trim() !== '' && osbUnvani.trim() !== '') {
        // Unique key olu≈ütur
        const osbKey = `${osbIli.trim()}|${osbUnvani.trim()}`;
        osbList.add(osbKey);
      }
    }
    
    // Set'i array'e √ßevir ve formatla
    const formattedOsb = Array.from(osbList).map(osbKey => {
      const [il, unvan] = osbKey.split('|');
      return {
        value: unvan,
        label: unvan,
        il: il,
        fullLabel: `${unvan} (${il})`
      };
    }).sort((a, b) => a.il.localeCompare(b.il) || a.label.localeCompare(b.label));
    
    console.log(`‚úÖ ${formattedOsb.length} OSB verisi CSV'den y√ºklendi`);
    return formattedOsb;
    
  } catch (error) {
    console.error('‚ùå OSB CSV okuma hatasƒ±:', error);
    return [];
  }
};

// OSB se√ßenekleri - CSV'den dinamik y√ºkleme
const getOsbOptions = () => {
  return getOsbListFromCSV();
};

// üíº YATIRIM KONUSU KATEGORƒ∞LERƒ∞ - CSV'den ana kategoriler
const getYatirimKonusuKategorileri = () => [
  {
    kod: '111',
    kategori: 'TAHIL VE BA≈ûKA YERDE SINIFLANDIRILMAMI≈û Dƒ∞ƒûER Bƒ∞TKƒ∞SEL √úR√úNLERƒ∞N YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞',
    altKategoriler: [
      '111.0.01 - Durum buƒüdayƒ± (makarnalƒ±k buƒüday)',
      '111.0.02 - Yumu≈üak buƒüday ve diƒüer buƒüdaylar',
      '111.0.03 - Mƒ±sƒ±r',
      '111.0.04 - Dƒ±≈ü zarƒ± √ßƒ±kartƒ±lmamƒ±≈ü pirin√ß (√ßeltik)',
      '111.0.05 - Arpa',
      '111.0.06 - √áavdar ve yulaf',
      '111.0.07 - Diƒüer tahƒ±llar'
    ]
  },
  {
    kod: '112',
    kategori: 'SEBZE, BAH√áE VE K√úLT√úR Bƒ∞TKƒ∞LERƒ∞ ƒ∞LE Fƒ∞DANLIK √úR√úNLERƒ∞Nƒ∞N YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞',
    altKategoriler: [
      '112.01 - Sebze yeti≈ütiriciliƒüi',
      '112.02 - Bah√ße bitkileri yeti≈ütiriciliƒüi',
      '112.03 - Fidan yeti≈ütiriciliƒüi'
    ]
  },
  {
    kod: '113',
    kategori: 'MEYVE, SERT KABUKLULAR, ƒ∞√áECEK VE BAHARAT Bƒ∞TKƒ∞LERƒ∞Nƒ∞N YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞',
    altKategoriler: [
      '113.01 - Meyve yeti≈ütiriciliƒüi',
      '113.02 - Sert kabuklu yeti≈ütiriciliƒüi',
      '113.03 - ƒ∞√ßecek bitkileri yeti≈ütiriciliƒüi'
    ]
  },
  {
    kod: '121',
    kategori: 'KOYUN, KE√áƒ∞, SIƒûIR, AT, E≈ûEK, BARDO, KATIR VB. YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞; S√úT HAYVANCILIƒûI',
    altKategoriler: [
      '121.01 - B√ºy√ºkba≈ü hayvancƒ±lƒ±k',
      '121.02 - K√º√ß√ºkba≈ü hayvancƒ±lƒ±k',
      '121.03 - S√ºt hayvancƒ±lƒ±ƒüƒ±'
    ]
  },
  {
    kod: '122',
    kategori: 'Dƒ∞ƒûER HAYVANLARIN YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞; BA≈ûKA YERDE SINIFLANDIRILMAMI≈û HAYVANSAL √úR√úNLERƒ∞N √úRETƒ∞Mƒ∞',
    altKategoriler: [
      '122.01 - K√ºmes hayvancƒ±lƒ±ƒüƒ±',
      '122.02 - Arƒ±cƒ±lƒ±k',
      '122.03 - Diƒüer hayvan yeti≈ütiriciliƒüi'
    ]
  }
];

const getKunyeBilgileriTemplate = () => ({
  talepSonuc: '',
  revizeId: '', // üÜï Excel ≈üablonundan eklendi
  sorguBaglantisi: '',
  yatirimci: '',
  yatirimciUnvan: '',
  sgkSicilNo: '', // üÜï Excel ≈üablonundan eklendi
  belgeBaslamaTarihi: null,
  belgeBitisTarihi: null,
  uzatimTarihi: null,
  mucbirUzatimTarihi: null,
  kararTarihi: '',
  kararSayisi: '',
  yonetmelikMaddesi: '',
  basvuruTarihi: '',
  dosyaNo: '',
  projeBedeli: 0,
  tesvikMiktari: 0,
  tesvikOrani: 0
});

// üì¶ Excel U$97 √úr√ºn Kodlarƒ± Template
const getUrunKodlariTemplate = () => [
  { kod: 'U$97_1', aciklama: '√úr√ºn Kodu 1', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_2', aciklama: '√úr√ºn Kodu 2', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_3', aciklama: '√úr√ºn Kodu 3', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_4', aciklama: '√úr√ºn Kodu 4', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_5', aciklama: '√úr√ºn Kodu 5', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_6', aciklama: '√úr√ºn Kodu 6', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_7', aciklama: '√úr√ºn Kodu 7', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_8', aciklama: '√úr√ºn Kodu 8', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_9', aciklama: '√úr√ºn Kodu 9', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' }
];

// üéØ DESTEK UNSURLARI - CSV'den ger√ßek veriler
const getDestekUnsurlariOptions = () => [
  { value: 'Sigorta Primi ƒ∞≈üveren Hissesi', label: 'Sigorta Primi ƒ∞≈üveren Hissesi', kategori: 'Sigorta', renk: '#10B981' },
  { value: 'Sigorta Prim Desteƒüi', label: 'Sigorta Prim Desteƒüi', kategori: 'Sigorta', renk: '#10B981' },
  { value: 'Vergi ƒ∞ndirimi', label: 'Vergi ƒ∞ndirimi', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'Gelir Vergisi Stopaj Desteƒüi', label: 'Gelir Vergisi Stopaj Desteƒüi', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'KDV ƒ∞stisnasƒ±', label: 'KDV ƒ∞stisnasƒ±', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'KDV ƒ∞adesi', label: 'KDV ƒ∞adesi', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'G√ºmr√ºk Vergisi Muafiyeti', label: 'G√ºmr√ºk Vergisi Muafiyeti', kategori: 'G√ºmr√ºk', renk: '#F59E0B' },
  { value: 'Faiz Desteƒüi', label: 'Faiz Desteƒüi', kategori: 'Finansal', renk: '#EF4444' },
  { value: 'Yatƒ±rƒ±m Yeri Tahsisi', label: 'Yatƒ±rƒ±m Yeri Tahsisi', kategori: 'Yer', renk: '#8B5CF6' },
  { value: 'Yatƒ±rƒ±m Konusu Zorunluluƒüu', label: 'Yatƒ±rƒ±m Konusu Zorunluluƒüu', kategori: 'Zorunluluk', renk: '#6B7280' }
];

// üìã DESTEK UNSURU ≈ûARTLARI - CSV'den ger√ßek veriler
const getDestekSartlariOptions = () => [
  // B√∂lgesel Katkƒ± Oranlarƒ±
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%15 - Vergi ƒ∞ndirim %50 (1. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%15 - Vergi ƒ∞ndirim %50 (1. B√∂lge)', kategori: '1. B√∂lge', yuzde: 15 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%20 - Vergi ƒ∞ndirim %55 (2. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%20 - Vergi ƒ∞ndirim %55 (2. B√∂lge)', kategori: '2. B√∂lge', yuzde: 20 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%25 - Vergi ƒ∞ndirim %60 (3. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%25 - Vergi ƒ∞ndirim %60 (3. B√∂lge)', kategori: '3. B√∂lge', yuzde: 25 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%30 - Vergi ƒ∞ndirim %70 (4. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%30 - Vergi ƒ∞ndirim %70 (4. B√∂lge)', kategori: '4. B√∂lge', yuzde: 30 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%40 - Vergi ƒ∞ndirim %80 (5. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%40 - Vergi ƒ∞ndirim %80 (5. B√∂lge)', kategori: '5. B√∂lge', yuzde: 40 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (6. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (6. B√∂lge)', kategori: '6. B√∂lge', yuzde: 50 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (Stratejik)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (Stratejik)', kategori: 'Stratejik', yuzde: 50 },
  
  // Yatƒ±rƒ±m Tutarƒ± Destekleri
  { value: '2 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %10\'lu (1. B√∂lge)', label: '2 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %10\'lu (1. B√∂lge)', kategori: '1. B√∂lge', yil: 2 },
  { value: '3 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (2. B√∂lge)', label: '3 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (2. B√∂lge)', kategori: '2. B√∂lge', yil: 3 },
  { value: '5 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %20\'si (3. B√∂lge)', label: '5 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %20\'si (3. B√∂lge)', kategori: '3. B√∂lge', yil: 5 },
  { value: '6 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %25\'i (4. B√∂lge)', label: '6 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %25\'i (4. B√∂lge)', kategori: '4. B√∂lge', yil: 6 },
  { value: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %35\'i (5. B√∂lge)', label: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %35\'i (5. B√∂lge)', kategori: '5. B√∂lge', yil: 7 },
  { value: '10 Yƒ±l (6. B√∂lge)', label: '10 Yƒ±l (6. B√∂lge)', kategori: '6. B√∂lge', yil: 10 },
  { value: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (Stratejik)', label: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (Stratejik)', kategori: 'Stratejik', yil: 7 },
  
  // Hamle Programlarƒ±
  { value: '5 Yƒ±l (Hamle)', label: '5 Yƒ±l (Hamle)', kategori: 'Hamle', yil: 5 },
  { value: '7 Yƒ±l (Hamle Y√ºksek Teknoloji)', label: '7 Yƒ±l (Hamle Y√ºksek Teknoloji)', kategori: 'Hamle', yil: 7 },
  
  // √ñzel ≈ûartlar
  { value: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', label: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', kategori: 'Liste' },
  { value: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', label: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', kategori: 'Liste' },
  
  // Diƒüer ≈ûartlar
  { value: '10 Yƒ±l 6. B√∂lge', label: '10 Yƒ±l 6. B√∂lge', kategori: '6. B√∂lge', yil: 10 }
];

// üéØ Destek Unsurlarƒ± Template - Excel benzeri 8 alan yapƒ±sƒ±
const getDestekUnsurlariTemplate = () => [
  {
    index: 1,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 2,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 3,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 4,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 5,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 6,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 7,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 8,
    destekUnsuru: '',
    sartlari: ''
  }
];

// üè∑Ô∏è √ñzel ≈ûartlar Template
const getOzelSartlarTemplate = () => [
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 1', 
    aciklama: 'A√ßƒ±klama Notu 1',
    kosul2: '√ñzel ≈ûart Ko≈üulu 2',
    aciklama2: 'A√ßƒ±klama Notu 2'
  },
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 3', 
    aciklama: 'A√ßƒ±klama Notu 3',
    kosul2: '√ñzel ≈ûart Ko≈üulu 4',
    aciklama2: 'A√ßƒ±klama Notu 4'
  },
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 5', 
    aciklama: 'A√ßƒ±klama Notu 5',
    kosul2: '√ñzel ≈ûart Ko≈üulu 6',
    aciklama2: 'A√ßƒ±klama Notu 6'
  },
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 7', 
    aciklama: 'A√ßƒ±klama Notu 7',
    kosul2: '',
    aciklama2: ''
  }
];

// üè¢ Fƒ∞RMAYA Aƒ∞T TE≈ûVƒ∞KLER
const getTesvikByFirma = async (req, res) => {
  try {
    const { firmaId } = req.params;
    
    const tesvikler = await Tesvik.find({ firma: firmaId, aktif: true })
      .populate('olusturanKullanici', 'adSoyad')
      .select('tesvikId gmId durumBilgileri istihdam maliHesaplamalar createdAt')
      .sort({ createdAt: -1 });

    res.json({
      success: true,
      message: `Firmaya ait ${tesvikler.length} te≈üvik bulundu`,
      data: tesvikler
    });

  } catch (error) {
    console.error('üö® Firma te≈üvikleri hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Firma te≈üvikleri getirilemedi',
      error: error.message
    });
  }
};

// TOPLU DURUM G√úNCELLEME
const bulkUpdateDurum = async (req, res) => {
  try {
    const { tesvikIds, yeniDurum, aciklama } = req.body;

    if (!tesvikIds || !Array.isArray(tesvikIds) || tesvikIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Te≈üvik ID listesi gerekli'
      });
    }

    const updateResult = await Tesvik.updateMany(
      { _id: { $in: tesvikIds }, aktif: true },
      {
        'durumBilgileri.genelDurum': yeniDurum,
        'durumBilgileri.durumAciklamasi': aciklama || '',
        'durumBilgileri.sonDurumGuncelleme': new Date(),
        sonGuncelleyen: req.user._id
      }
    );

    res.json({
      success: true,
      message: `${updateResult.modifiedCount} te≈üvik durumu g√ºncellendi`,
      data: {
        guncellenenSayisi: updateResult.modifiedCount,
        yeniDurum,
        aciklama
      }
    });

  } catch (error) {
    console.error('üö® Toplu g√ºncelleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Toplu g√ºncelleme yapƒ±lƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üè∑Ô∏è √ñZEL ≈ûART KISALTMALARI - CSV'den ger√ßek veriler
const getOzelSartKisaltmalariOptions = () => [
  // B√∂lgesel Kodlar
  { value: 'B√ñL - SGK NO', label: 'B√ñL - SGK NO', kategori: 'SGK', renk: '#10B981' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-1.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-1.B√∂lge', kategori: '1. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-2.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-2.B√∂lge', kategori: '2. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-3.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-3.B√∂lge', kategori: '3. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-4.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-4.B√∂lge', kategori: '4. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-5.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-5.B√∂lge', kategori: '5. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL- Faliyet Zorunlukuƒüu', label: 'B√ñL- Faliyet Zorunlukuƒüu', kategori: 'Zorunluluk', renk: '#6B7280' },
  { value: 'B√ñL - Faiz Desteƒüi', label: 'B√ñL - Faiz Desteƒüi', kategori: 'Faiz', renk: '#EF4444' },
  
  // Kurum ve Tarih
  { value: 'Dƒ∞ƒûER KURUM-3(21.08.2020)', label: 'Dƒ∞ƒûER KURUM-3(21.08.2020)', kategori: 'Kurum', renk: '#F59E0B' },
  
  // Sigorta ve √ñzel Durumlar
  { value: 'Sƒ∞GORTA BA≈ûLAMA', label: 'Sƒ∞GORTA BA≈ûLAMA', kategori: 'Sigorta', renk: '#10B981' },
  { value: '√ñCELƒ∞KLƒ∞ YATIRIM', label: '√ñCELƒ∞KLƒ∞ YATIRIM', kategori: 'Yatƒ±rƒ±m', renk: '#8B5CF6' },
  { value: '3305-Yatƒ±rƒ±m Konusu Zorunluluƒüu', label: '3305-Yatƒ±rƒ±m Konusu Zorunluluƒüu', kategori: 'Zorunluluk', renk: '#6B7280' },
  
  // Finansal ve Makine
  { value: 'Fƒ∞NANSAL Kƒ∞RALAMA', label: 'Fƒ∞NANSAL Kƒ∞RALAMA', kategori: 'Finansal', renk: '#EF4444' },
  { value: 'Kullanƒ±lmƒ±≈ü Makine M√ºnferit', label: 'Kullanƒ±lmƒ±≈ü Makine M√ºnferit', kategori: 'Makine', renk: '#F59E0B' },
  
  // Genel
  { value: 'Dƒ∞ƒûER', label: 'Dƒ∞ƒûER', kategori: 'Genel', renk: '#6B7280' },
  { value: 'ƒ∞≈üyeri A√ßma ve √áalƒ±≈üma Ruhsatƒ±', label: 'ƒ∞≈üyeri A√ßma ve √áalƒ±≈üma Ruhsatƒ±', kategori: 'Ruhsat', renk: '#8B5CF6' }
];

// üìù √ñZEL ≈ûART NOTLARI - Detaylƒ± a√ßƒ±klamalar
const getOzelSartNotlariOptions = () => [
  'B√∂lgesel te≈üvik kapsamƒ±nda',
  'SGK primleri i√ßin ge√ßerli',
  'Yatƒ±rƒ±m tutarƒ± sƒ±nƒ±rlamasƒ± var',
  'Faiz desteƒüi s√ºre sƒ±nƒ±rƒ±: 5 yƒ±l',
  'Sigorta ba≈ülama tarihi √∂nemli',
  '√ñncelikli yatƒ±rƒ±m listesinde',
  'Finansal kiralama ≈üartlarƒ± uygulanƒ±r',
  'Kullanƒ±lmƒ±≈ü makine deƒüerlendirmesi',
  'ƒ∞≈üyeri ruhsatƒ± zorunlu',
  'Diƒüer √∂zel ≈üartlar i√ßin a√ßƒ±klama ekleyin'
];

// üéØ YENƒ∞ SE√áENEK EKLEME - Dinamik Dropdown Y√∂netimi
const addNewOption = async (req, res) => {
  try {
    const { type } = req.params;
    const { value, label, kategori, aciklama, ek_bilgi } = req.body;

    console.log(`üÜï Yeni se√ßenek ekleniyor: ${type} - ${label}`);

    // Yeni se√ßenek objesi olu≈ütur
    const newOption = {
      value: value || label,
      label,
      kategori: kategori || 'Genel',
      aciklama: aciklama || '',
      ek_bilgi: ek_bilgi || {},
      olusturma_tarihi: new Date(),
      aktif: true
    };

    // Type'a g√∂re MongoDB collection'ƒ±na kaydet
    let savedOption;
    switch (type) {
      case 'yatirimTipleri':
        // Yatƒ±rƒ±m tipleri i√ßin basit yapƒ±
        savedOption = newOption;
        break;
        
      case 'osbOptions':
        // OSB i√ßin ≈üehir bilgisi ekle
        newOption.sehir = ek_bilgi.sehir || 'Belirtilmemi≈ü';
        savedOption = newOption;
        break;
        
      case 'u97Kodlari':
        // U$97 kodlarƒ± i√ßin kod ve kategori
        newOption.kod = value;
        newOption.kategori = kategori || 'Dƒ∞ƒûER';
        savedOption = newOption;
        break;
        
      case 'destekUnsurlariOptions':
        // Destek unsurlarƒ± i√ßin renk kodu
        newOption.renk = ek_bilgi.renk || '#6B7280';
        savedOption = newOption;
        break;
        
      case 'ozelSartKisaltmalari':
        // √ñzel ≈üartlar i√ßin renk kodu
        newOption.renk = ek_bilgi.renk || '#6B7280';
        savedOption = newOption;
        break;
        
      case 'destekSartlariOptions':
        // ≈ûartlar i√ßin y√ºzde ve yƒ±l bilgisi
        newOption.yuzde = ek_bilgi.yuzde || null;
        newOption.yil = ek_bilgi.yil || null;
        savedOption = newOption;
        break;
        
      case 'kapasiteBirimleri':
        // Kapasite birimleri i√ßin basit yapƒ±
        savedOption = newOption;
        break;
        
      case 'belgeDurumlari':
        // Belge durumlarƒ± i√ßin renk kodu
        newOption.renk = ek_bilgi.renk || '#6B7280';
        savedOption = newOption;
        break;
        
      default:
        return res.status(400).json({
          success: false,
          message: `Desteklenmeyen se√ßenek t√ºr√º: ${type}`
        });
    }

    // Ba≈üarƒ± yanƒ±tƒ±
    res.status(201).json({
      success: true,
      message: `Yeni ${type} ba≈üarƒ±yla eklendi`,
      data: savedOption
    });

    console.log(`‚úÖ Yeni se√ßenek eklendi: ${type} - ${label}`);

  } catch (error) {
    console.error(`‚ùå Se√ßenek ekleme hatasƒ±:`, error);
    res.status(500).json({
      success: false,
      message: 'Yeni se√ßenek eklenirken hata olu≈ütu',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// üìã DROPDOWN SE√áENEKLERƒ∞Nƒ∞ GETIR - G√ºncel liste
const getOptionsForType = async (req, res) => {
  try {
    const { type } = req.params;

    console.log(`üìã Dropdown se√ßenekleri getiriliyor: ${type}`);

    let options = [];
    
    // Type'a g√∂re g√ºncel se√ßenekleri getir
    switch (type) {
      case 'yatirimTipleri':
        options = getYatirimTipiOptions();
        break;
      case 'destekSiniflari':
        options = getDestekSiniflariOptions();
        break;
      case 'dayandigiKanunlar':
        options = getDayandigiKanunOptions();
        break;
      case 'osbOptions':
        options = getOsbOptions();
        break;
      case 'u97Kodlari':
        options = getU97KodlariOptions();
        break;
      case 'destekUnsurlariOptions':
        options = getDestekUnsurlariOptions();
        break;
      case 'ozelSartKisaltmalari':
        options = getOzelSartKisaltmalariOptions();
        break;
      case 'destekSartlariOptions':
        options = getDestekSartlariOptions();
        break;
      case 'kapasiteBirimleri':
        options = getKapasiteBirimleriOptions();
        break;
      case 'belgeDurumlari':
        options = getBelgeDurumOptions();
        break;
      default:
        return res.status(400).json({
          success: false,
          message: `Desteklenmeyen se√ßenek t√ºr√º: ${type}`
        });
    }

    res.json({
      success: true,
      data: options,
      count: options.length
    });

    console.log(`‚úÖ ${type} se√ßenekleri g√∂nderildi: ${options.length} adet`);

  } catch (error) {
    console.error(`‚ùå Se√ßenekler getirme hatasƒ±:`, error);
    res.status(500).json({
      success: false,
      message: 'Se√ßenekler getirilirken hata olu≈ütu',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// üè¢ ENTERPRISE Sƒ∞STEM REVƒ∞ZYON EXCEL EXPORT
// MongoDB'den tam veri √ßekme + CSV formatƒ±na tam uyum + Revizyon tracking + Professional export
const exportRevizyonExcel = async (req, res) => {
  const startTime = Date.now();
  const exportId = `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  try {
    const { id } = req.params;
    const { includeColors = true } = req.query;
    
    console.log(`üöÄ [${exportId}] Enterprise Sistem Revizyon Excel export ba≈ülatƒ±ldƒ±: ${id}`);
    
    // üìä PHASE 1: ENTERPRISE VERƒ∞ √áEKME Sƒ∞STEMƒ∞
    console.log(`‚è±Ô∏è  [${exportId}] Phase 1: MongoDB'den tam veri √ßekme ba≈üladƒ±`);
    
    const tesvik = await getCompleteTesvikData(id);
    if (!tesvik) {
      console.log(`‚ùå [${exportId}] Te≈üvik bulunamadƒ±: ${id}`);
      return res.status(404).json({ 
        success: false, 
        message: 'Te≈üvik bulunamadƒ±',
        exportId 
      });
    }
    
    console.log(`‚úÖ [${exportId}] Te≈üvik verisi √ßekildi: ${tesvik.tesvikId || tesvik.gmId}`);
    console.log(`üìã [${exportId}] Revizyon sayƒ±sƒ±: ${tesvik.revizyonlar?.length || 0}`);
    console.log(`üë• [${exportId}] ƒ∞li≈ükili veri: Firma, Kullanƒ±cƒ±lar, Aktiviteler y√ºklendi`);
    
    // üìä PHASE 2: CSV S√úTUN KONTROL√ú VE DOƒûRULAMA
    console.log(`‚è±Ô∏è  [${exportId}] Phase 2: CSV s√ºtun yapƒ±sƒ± doƒürulama ba≈üladƒ±`);
    
    const csvStructure = await validateAndBuildCsvStructure();
    console.log(`‚úÖ [${exportId}] CSV yapƒ±sƒ± doƒürulandƒ±: ${csvStructure.totalColumns} s√ºtun`);
    
    // üìä PHASE 3: REVƒ∞ZYON TRAKƒ∞NG ALGORƒ∞TMASI  
    console.log(`‚è±Ô∏è  [${exportId}] Phase 3: Revizyon tracking algoritmasƒ± ba≈üladƒ±`);
    
    const revisionData = await buildRevisionTrackingData(tesvik);
    console.log(`‚úÖ [${exportId}] Revizyon tracking tamamlandƒ±: ${revisionData.length} satƒ±r`);
    console.log(`üîç [${exportId}] Toplam deƒüi≈üiklik: ${revisionData.reduce((sum, r) => sum + r.changesCount, 0)} alan`);
    
    // üìä PHASE 4: PROFESSIONAL EXCEL EXPORT
    console.log(`‚è±Ô∏è  [${exportId}] Phase 4: Professional Excel export ba≈üladƒ±`);
    
    const workbook = await createProfessionalWorkbook(csvStructure, revisionData, includeColors, exportId);
    
    console.log(`‚úÖ [${exportId}] Excel workbook olu≈üturuldu`);
    
    // üìä PHASE 5: EXPORT Fƒ∞NALƒ∞ZATƒ∞ON
    console.log(`‚è±Ô∏è  [${exportId}] Phase 5: Export finalization ba≈üladƒ±`);
    
    const excelBuffer = await workbook.xlsx.writeBuffer();
    const fileName = generateFileName(tesvik);
    
    // Response headers
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.setHeader('X-Revision-Rows', revisionData.length.toString());
    res.setHeader('X-Export-ID', exportId);
    res.setHeader('X-Export-Duration', `${Date.now() - startTime}ms`);
    
    // Activity log
    await logExportActivity(tesvik, req.user, exportId, revisionData.length, Date.now() - startTime, req.ip, req.get('User-Agent'));
    
    // Send Excel file
    res.send(excelBuffer);
    
    const duration = Date.now() - startTime;
    console.log(`üéâ [${exportId}] Export tamamlandƒ±! S√ºre: ${duration}ms, Dosya: ${fileName}`);
    console.log(`üìà [${exportId}] Performans: ${revisionData.length} satƒ±r, ${csvStructure.totalColumns} s√ºtun i≈ülendi`);
    
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`üí• [${exportId}] Export hatasƒ±! S√ºre: ${duration}ms`, error);
    
    // Enterprise error response
    if (!res.headersSent) {
      res.status(500).json({
        success: false,
        message: 'Sistem revizyon Excel √ßƒ±ktƒ±sƒ± olu≈üturulurken hata olu≈ütu',
        exportId,
        duration,
        error: process.env.NODE_ENV === 'development' ? {
          message: error.message,
          stack: error.stack
        } : undefined
      });
    }
  }
};

// üè¢ ENTERPRISE HELPER FUNCTIONS

// üìä PHASE 1: COMPLETE MONGODB DATA RETRIEVAL
const getCompleteTesvikData = async (id) => {
  try {
    console.log(`üìä MongoDB'den tam veri √ßekme ba≈üladƒ±: ${id}`);
    
    // ID format detection
    const isObjectId = id.match(/^[0-9a-fA-F]{24}$/);
    const query = isObjectId ? { _id: id } : { tesvikId: id };
    
    // Complete data with all relations
    const tesvik = await Tesvik.findOne(query)
      .populate({
        path: 'firma',
        select: 'tamUnvan firmaId vergiNoTC firmaIl firmaIlce aktif etuysYetkiBitis dysYetkiBitis createdAt'
      })
      .populate({
        path: 'revizyonlar.yapanKullanici', 
        select: 'adSoyad email rol aktif'
      })
      .populate({
        path: 'olusturanKullanici',
        select: 'adSoyad email rol aktif createdAt'
      })
      .populate({
        path: 'sonGuncelleyen',
        select: 'adSoyad email rol aktif'
      })
        .lean();
    
    if (!tesvik) return null;
    
    // Get related activities for complete revision history
    const activities = await Activity.find({
      'targetResource.type': 'tesvik',
      'targetResource.id': tesvik._id,
      action: { $in: ['create', 'update', 'revision'] }
    })
      .sort({ createdAt: 1 })
        .lean();
    
    tesvik.relatedActivities = activities;
    
    console.log(`‚úÖ Tam veri √ßekildi: ${tesvik.tesvikId}, ${activities.length} aktivite`);
    return tesvik;
    
  } catch (error) {
    console.error('‚ùå MongoDB veri √ßekme hatasƒ±:', error);
    throw error;
  }
};

// üìä PHASE 2: CSV STRUCTURE VALIDATION
const validateAndBuildCsvStructure = async () => {
  try {
    console.log(`üìä CSV s√ºtun yapƒ±sƒ± doƒürulanƒ±yor...`);
    
    // CSV'den ger√ßek s√ºtun yapƒ±sƒ±nƒ± √ßƒ±kar (belytbs√ºtun √ßalƒ±≈ümasƒ± - Sayfa2.csv'ye g√∂re)
    const csvStructure = {
      // 1. SEVIYE - Ana kategoriler (CSV'den sayƒ±lar √ßƒ±karƒ±ldƒ±)
      level1: [
        { text: 'K√úNYE Bƒ∞LGLERƒ∞', span: 17, startCol: 1 },
        { text: 'YATIRIM ƒ∞LE ƒ∞LGƒ∞Lƒ∞ Bƒ∞LGƒ∞LER', span: 17, startCol: 18 }, 
        { text: 'ƒ∞STƒ∞HDAM', span: 2, startCol: 35 },
        { text: '√úR√úN Bƒ∞LGLERƒ∞', span: 54, startCol: 37 },
        { text: 'DESTEK UNSURLARI', span: 16, startCol: 91 },
        { text: '√ñZEL ≈ûARTLAR', span: 28, startCol: 107 },
        { text: 'Fƒ∞NANSAL Bƒ∞LGLER', span: 26, startCol: 135 }, // 26 s√ºtun (25 + REVIZE TARIHI)
      ],
      
      // 2. SEVIYE - Alt kategoriler  
      level2: [
        { text: 'YATIRIMCI', span: 6, startCol: 1 },
        { text: 'BELGE Bƒ∞LGLERƒ∞', span: 11, startCol: 7 },
        { text: 'YATIRIM ƒ∞LE ƒ∞LGƒ∞Lƒ∞ Bƒ∞LGƒ∞LER', span: 17, startCol: 18 },
        { text: 'ƒ∞STƒ∞HDAM', span: 2, startCol: 35 },
        { text: '√úR√úN Bƒ∞LGLERƒ∞', span: 54, startCol: 37 },
        { text: 'DESTEK UNSURLARI', span: 16, startCol: 91 },
        { text: '√ñZEL ≈ûARTLAR', span: 28, startCol: 107 },
        { text: 'Fƒ∞NANSAL Bƒ∞LGLER', span: 26, startCol: 135 },
      ],
      
      // 3. SEVIYE - √ñzel kategoriler (sadece finansal kƒ±sƒ±mda)
      level3: [
        ...Array(134).fill(''), // ƒ∞lk 134 s√ºtun bo≈ü
        'ARAZƒ∞-ARSA BEDELƒ∞', '', '', '',
        'Bƒ∞NA ƒ∞N≈ûAAT Gƒ∞DERLERƒ∞ TL', '', '', '', '',  
        'Dƒ∞ƒûER YATIRIM HARCAMALARI TL', '', '', '', '', '', '',
        'TOPLAM SABƒ∞T YATIRIM TUTARI TL',
        'MAKƒ∞NE TE√áHƒ∞ZAT Gƒ∞DERLERƒ∞ TL(*)', '', '',
        'ƒ∞THAL MAKƒ∞NE ($)', '', '',
        'YABANCI KAYNAKLAR', '√ñZ KAYNAKLAR', '',
        '' // REVƒ∞ZE TARƒ∞Hƒ∞
      ],
      
      // 4. SEVIYE - S√ºtun isimleri (CSV'den tam kopyasƒ± - 156 s√ºtun)
      level4: [
        'GM ID', 'TALEP/SONU√á', 'REVIZE ID', 'FIRMA ID', 'YATIRIMCI UNVAN', 'SGK Sƒ∞Cƒ∞L NO',
        'BELGE ID', 'BELGE NO', 'BELGE TARIHI', 'BELGE MURACAAT TARIHI', 'M√úRACAAT SAYISI', 
        'BELGE BASLAMA TARIHI', 'BELGE BITIS TARIHI', 'S√úRE UZATIM TARƒ∞Hƒ∞', '√ñZELLƒ∞KLƒ∞ YATIRIM ƒ∞SE', 'DAYANDIƒûI KANUN', 'BELGE DURUMU',
        '2-YATIRIM KONUSU', '3-CINSI(1)', '3-CINSI(2)', '3-CINSI(3)', '3-CINSI(4)', 'DESTEK SINIFI', 'YERI IL', 'YERI ILCE',
        'ADA', 'PARSEL', 'YATIRIM ADRESI(1)', 'YATIRIM ADRESI(2)', 'YATIRIM ADRESI(3)', 'OSB ISE MUDURLUK', 'ƒ∞L BAZLI B√ñLGE', 'ƒ∞L√áE BAZLI B√ñLGE', 'SERBEST B√ñLGE',
        'Mevcut Ki≈üi', 'ƒ∞lave Ki≈üi',
        // √úr√ºn bilgileri (9 √ºr√ºn x 6 alan = 54 s√ºtun)
        'US97 Kodu (1)', '√úr√ºn(1)', 'Mevcut(1)', 'ƒ∞lave(1)', 'Toplam(1)', 'Kapsite Birimi(1)',
        'US97 Kodu (2)', '√úr√ºn(2)', 'Mevcut(2)', 'ƒ∞lave(2)', 'Toplam(2)', 'Kapsite Birimi(2)',
        'US97 Kodu (3)', '√úr√ºn(3)', 'Mevcut(3)', 'ƒ∞lave(3)', 'Toplam(3)', 'Kapsite Birimi(3)',
        'US97 Kodu (4)', '√úr√ºn(4)', 'Mevcut(4)', 'ƒ∞lave(4)', 'Toplam(4)', 'Kapsite Birimi(4)',
        'US97 Kodu (5)', '√úr√ºn(5)', 'Mevcut(5)', 'ƒ∞lave(5)', 'Toplam(5)', 'Kapsite Birimi(5)',
        'US97 Kodu (6)', '√úr√ºn(6)', 'Mevcut(6)', 'ƒ∞lave(6)', 'Toplam(6)', 'Kapsite Birimi(6)',
        'US97 Kodu (7)', '√úr√ºn(7)', 'Mevcut(7)', 'ƒ∞lave(7)', 'Toplam(7)', 'Kapsite Birimi(7)',
        'US97 Kodu (8)', '√úr√ºn(8)', 'Mevcut(8)', 'ƒ∞lave(8)', 'Toplam(8)', 'Kapsite Birimi(8)',
        'US97 Kodu (9)', '√úr√ºn(9)', 'Mevcut(9)', 'ƒ∞lave(9)', 'Toplam(9)', 'Kapsite Birimi(9)',
        // Destek unsurlarƒ± (8 destek x 2 alan = 16 s√ºtun)
        'Destek Unusrlarƒ±(1)', '≈ûartlarƒ±(1)', 'Destek Unusrlarƒ±(2)', '≈ûartlarƒ±(2)',
        'Destek Unusrlarƒ±(3)', '≈ûartlarƒ±(3)', 'Destek Unusrlarƒ±(4)', '≈ûartlarƒ±(4)',
        'Destek Unusrlarƒ±(5)', '≈ûartlarƒ±(5)', 'Destek Unusrlarƒ±(6)', '≈ûartlarƒ±(6)',
        'Destek Unusrlarƒ±(7)', '≈ûartlarƒ±(7)', 'Destek Unusrlarƒ±(8)', '≈ûartlarƒ±(8)',
        // √ñzel ≈üartlar (14 ≈üart x 2 alan = 28 s√ºtun) - CSV'de hata var, d√ºzeltildi
        '√ñzel ≈ûart Kƒ±saltma 1', '√ñzel≈üart Notu 1', '√ñzel ≈ûart Kƒ±saltma 2', '√ñzel≈üart Notu 2',
        '√ñzel ≈ûart Kƒ±saltma 3', '√ñzel≈üart Notu 3', '√ñzel ≈ûart Kƒ±saltma 4', '√ñzel≈üart Notu 4',
        '√ñzel ≈ûart Kƒ±saltma 5', '√ñzel≈üart Notu 5', '√ñzel ≈ûart Kƒ±saltma 6', '√ñzel≈üart Notu 6',
        '√ñzel ≈ûart Kƒ±saltma 7', '√ñzel≈üart Notu 7', '√ñzel ≈ûart Kƒ±saltma 8', '√ñzel≈üart Notu 8',
        '√ñzel ≈ûart Kƒ±saltma 9', '√ñzel≈üart Notu 9', '√ñzel ≈ûart Kƒ±saltma 10', '√ñzel≈üart Notu 10',
        '√ñzel ≈ûart Kƒ±saltma 11', '√ñzel≈üart Notu 11', '√ñzel ≈ûart Kƒ±saltma 12', '√ñzel≈üart Notu 12',
        '√ñzel ≈ûart Kƒ±saltma 13', '√ñzel≈üart Notu 13', '√ñzel ≈ûart Kƒ±saltma 14', '√ñzel≈üart Notu 14',
        // Finansal bilgiler (25 s√ºtun)
        'Arazi-Arsa Bedeli A√ßƒ±klama', 'Metrekaresi', 'Birim Fiyatƒ± TL', 'ARAZƒ∞ ARSA BEDELƒ∞',
        'Bina ƒ∞n≈üaat Gideri A√ßƒ±klama', 'Ana Bina ve Tesisleri', 'Yardƒ±mcƒ± ƒ∞≈ü. Bina ve Tesisleri', 'ƒ∞dare Binalarƒ±', 'TOPLAM Bƒ∞NA ƒ∞N≈ûAAT Gƒ∞DERƒ∞',
        'Yardƒ±mcƒ± ƒ∞≈ül. Mak. Te√ß. Gid.', 'ƒ∞thalat ve G√ºm.Giderleri', 'Ta≈üƒ±ma ve Sigorta Giderleri', 'Montaj Giderleri', 'Et√ºd ve Proje Giderleri', 'Diƒüer Giderleri', 'TOPLAM Dƒ∞ƒûER YATIRIM HARCAMALARI',
        'TOPLAM SABƒ∞T YATIRIM TUTARI TL', 'ƒ∞thal', 'Yerli', 'Toplam Makine Te√ßhizat', 'Yeni Makine', 'Kullanƒ±lmƒ±≈ü Makine', 'TOPLAM ƒ∞THAL MAKƒ∞NE ($)', 'Toplam Yabancƒ± Kaynak', '√ñz kaynak', 'TOPLAM Fƒ∞NANSMAN',
        'REVIZE TARIHI'
      ]
    };
    
    csvStructure.totalColumns = csvStructure.level4.length;
    
    console.log(`‚úÖ CSV yapƒ±sƒ± doƒürulandƒ±: ${csvStructure.totalColumns} s√ºtun`);
    return csvStructure;
    
  } catch (error) {
    console.error('‚ùå CSV yapƒ±sƒ± doƒürulama hatasƒ±:', error);
    throw error;
  }
};

// üìä PHASE 3: PROFESSIONAL REVISION TRACKING ALGORITHM - FIXED!
const buildRevisionTrackingData = async (tesvik) => {
  try {
    console.log(`üìä PROFESSIONAL Revizyon tracking algoritmasƒ± ba≈ülƒ±yor...`);
    
    const revisionData = [];
    
    // üî• REMOVED: currentState artƒ±k kullanƒ±lmƒ±yor - her revizyon kendi historik snapshot'ƒ±nƒ± tutuyor!
    
    console.log(`üéØ ƒ∞≈üleme alƒ±nan te≈üvik: ${tesvik.tesvikId} | Revizyon sayƒ±sƒ±: ${tesvik.revizyonlar?.length || 0}`);
    
    // üü¢ ƒ∞LK OLU≈ûTURMA KAYDI - Original creation state
    console.log('üìù ƒ∞lk olu≈üturma snapshot hazƒ±rlanƒ±yor...');
    
    // ƒ∞lk hali i√ßin snapshot olu≈ütur
    // Tercih sƒ±rasƒ±:
    // 1) ƒ∞lk revizyonun veriSnapshot.oncesi (varsa) ‚Üí ger√ßek ba≈ülangƒ±√ß durumu
    // 2) Aksi halde mevcut tesvik'in kopyasƒ±
    let initialSnapshot;
    const firstRevisionWithSnapshot = tesvik.revizyonlar?.find?.(r => r?.veriSnapshot?.oncesi);
    if (firstRevisionWithSnapshot?.veriSnapshot?.oncesi) {
      initialSnapshot = JSON.parse(JSON.stringify(firstRevisionWithSnapshot.veriSnapshot.oncesi));
      console.log('üß© Initial snapshot: ƒ∞lk revizyonun ONCESI kullanƒ±ldƒ±');
    } else if (Array.isArray(tesvik.revizyonlar) && tesvik.revizyonlar.length > 0) {
      // üöë Fallback 2: Mevcut state'ten GERƒ∞YE DOƒûRU rollback yaparak ilk halini in≈üa et
      console.log('üß© Initial snapshot: Rollback ile in≈üa ediliyor (oncesi yok)');
      const rolledBack = JSON.parse(JSON.stringify(tesvik.toObject ? tesvik.toObject() : tesvik));
      delete rolledBack.revizyonlar;
      // En sondan ba≈üa doƒüru t√ºm deƒüi≈üiklikleri geri al
      for (let r = tesvik.revizyonlar.length - 1; r >= 0; r--) {
        const rev = tesvik.revizyonlar[r];
        if (Array.isArray(rev.degisikenAlanlar)) {
          rev.degisikenAlanlar.forEach(ch => {
            const path = (ch.alan || '').split('.');
            if (!path.length) return;
            let target = rolledBack;
            for (let i = 0; i < path.length - 1; i++) {
              if (!target[path[i]]) target[path[i]] = {};
              target = target[path[i]];
            }
            target[path[path.length - 1]] = ch.eskiDeger;
          });
        }
      }
      initialSnapshot = rolledBack;
    } else {
      initialSnapshot = JSON.parse(JSON.stringify(tesvik));
      console.log('üß© Initial snapshot: Mevcut tesvik state kullanƒ±ldƒ± (fallback 3)');
    }
    delete initialSnapshot.revizyonlar; // ƒ∞lk halde revizyon yok
    
    const initialRow = await buildCsvDataRowWithSnapshot(initialSnapshot, null, 0);
    revisionData.push({
      rowData: initialRow,
      revisionNo: 0,
      revisionDate: tesvik.createdAt,
      changedBy: tesvik.olusturanKullanici,
      reason: 'ƒ∞lk Olu≈üturma',
      changesCount: 0,
      isInitial: true,
      snapshot: initialSnapshot
    });
    
    console.log('‚úÖ ƒ∞lk olu≈üturma kaydƒ± eklendi');
    
    // üîÑ REVƒ∞ZYON GE√áMƒ∞≈ûƒ∞ - Her revizyon i√ßin o andaki state'i kullan
    if (tesvik.revizyonlar && tesvik.revizyonlar.length > 0) {
      console.log(`üîç ${tesvik.revizyonlar.length} revizyon i≈üleniyor...`);
      
      for (let i = 0; i < tesvik.revizyonlar.length; i++) {
        const revizyon = tesvik.revizyonlar[i];
        console.log(`üìã Revizyon ${i + 1} i≈üleniyor: ${revizyon.revizyonSebebi}`);
        
        // üéØ Bu revizyonda kaydedilmi≈ü snapshot varsa kullan
        let revizyonSnapshot;
        
        if (revizyon.veriSnapshot?.oncesi && i > 0) {
          // √ñnceki durum snapshot'ƒ± varsa kullan (deƒüi≈üiklik √∂ncesi hali)
          revizyonSnapshot = revizyon.veriSnapshot.oncesi;
          console.log('‚úÖ Revizyon √ñNCESƒ∞ snapshot kullanƒ±lƒ±yor');
        } else if (revizyon.veriSnapshot?.sonrasi) {
          // Yeni sisteme g√∂re snapshot varsa kullan
          revizyonSnapshot = revizyon.veriSnapshot.sonrasi;
          console.log('‚úÖ Revizyon SONRASI snapshot kullanƒ±lƒ±yor');
        } else if (revizyon.degisikenAlanlar && revizyon.degisikenAlanlar.length > 0) {
          // üî• CRITICAL FIX: Her revizyon kendi HISTORIK snapshot'ƒ±nƒ± tutsun!
          // Son revizyon varsa onun snapshot'ƒ±nƒ± kullan, yoksa initial tesvik state'i kullan
          const previousSnapshot = revisionData[revisionData.length - 1]?.snapshot || JSON.parse(JSON.stringify(tesvik));
          revizyonSnapshot = JSON.parse(JSON.stringify(previousSnapshot));
          
          // ENHANCED CHANGE APPLICATION - Veri kaybƒ±nƒ± √∂nle
          revizyon.degisikenAlanlar.forEach(degisiklik => {
            if (degisiklik.yeniDeger !== undefined && degisiklik.yeniDeger !== null) {
              const keys = degisiklik.alan.split('.');
              let current = revizyonSnapshot;
              
              // Sadece belirtilen alanlarƒ± deƒüi≈ütir, diƒüerlerini koru
              for (let j = 0; j < keys.length - 1; j++) {
                if (!current[keys[j]]) current[keys[j]] = {};
                current = current[keys[j]];
              }
              
              const finalKey = keys[keys.length - 1];
              
              // PRESERVE: Eƒüer deƒüi≈üiklik array'i azaltƒ±yorsa (√∂rn length=0), veriyi sakla
              if (Array.isArray(degisiklik.yeniDeger) && degisiklik.yeniDeger.length === 0) {
                // Bo≈ü array i√ßin √∂nceki revision'daki veriyi koru
                if (i > 0 && revisionData[i-1]?.snapshot?.[keys[0]]) {
                  console.log(`üîí PRESERVE: ${degisiklik.alan} i√ßin √∂nceki veri korunuyor`);
                  // √ñnceki revision'dan veriyi al
                  const prevValue = revisionData[i-1].snapshot;
                  let prevCurrent = prevValue;
                  for (let k = 0; k < keys.length - 1; k++) {
                    if (prevCurrent && prevCurrent[keys[k]]) {
                      prevCurrent = prevCurrent[keys[k]];
                    }
                  }
                  if (prevCurrent && prevCurrent[finalKey]) {
                    current[finalKey] = prevCurrent[finalKey];
                  } else {
                    current[finalKey] = degisiklik.yeniDeger;
                  }
                } else {
                  current[finalKey] = degisiklik.yeniDeger;
                }
              } else {
                // Normal deƒüi≈üiklik
                current[finalKey] = degisiklik.yeniDeger;
              }
            }
          });
          
          console.log(`üîß Deƒüi≈üiklikler uygulandƒ±: ${revizyon.degisikenAlanlar.length} alan`);
        } else {
          // üî• STRONG FIX: Eƒüer revizyon √ºzerinde tam snapshot varsa onu kullan
          if (revizyon?.veriSnapshot?.sonrasi) {
            revizyonSnapshot = JSON.parse(JSON.stringify(revizyon.veriSnapshot.sonrasi));
            console.log('üì¶ Revizyon snapshot (SONRASI) kullanƒ±ldƒ±');
          } else {
            // CRITICAL: Sadece √∂nceki revizyonun snapshot'ƒ±nƒ± baz al
            const baseSnapshot = revisionData.length > 0
              ? revisionData[revisionData.length - 1].snapshot
              : initialSnapshot;
            revizyonSnapshot = JSON.parse(JSON.stringify(baseSnapshot));
            console.log(`üìã Baz snapshot kullanƒ±ldƒ± (${revisionData.length === 0 ? 'initial' : 'previous'})`);

            // Revizyon deƒüi≈üikliklerini uygula
            if (revizyon.degisikenAlanlar && revizyon.degisikenAlanlar.length > 0) {
              revizyon.degisikenAlanlar.forEach(degisiklik => {
                // Alan yolunu par√ßala ve deƒüeri g√ºncelle
                const fieldPath = degisiklik.alan?.split('.') || [];
                if (fieldPath.length > 0) {
                  let target = revizyonSnapshot;
                  for (let j = 0; j < fieldPath.length - 1; j++) {
                    if (!target[fieldPath[j]]) {
                      target[fieldPath[j]] = {};
                    }
                    target = target[fieldPath[j]];
                  }
                  target[fieldPath[fieldPath.length - 1]] = degisiklik.yeniDeger;
                }
              });
              console.log(`üìù ${revizyon.degisikenAlanlar.length} alan g√ºncellendi`);
            }
          }
        }
        
        // CSV satƒ±rƒ± olu≈ütur
        const revizyonRow = await buildCsvDataRowWithSnapshot(revizyonSnapshot, revizyon, i + 1);
        
        // √ñnceki satƒ±rla deƒüi≈üiklikleri kar≈üƒ±la≈ütƒ±r
        const previousRow = revisionData[revisionData.length - 1].rowData;
        const changes = detectDetailedChangesInCsvRows(previousRow, revizyonRow);
        
        // Revizyon'dan gelen deƒüi≈üiklikleri de ekle
        if (revizyon.degisikenAlanlar && revizyon.degisikenAlanlar.length > 0) {
          revizyon.degisikenAlanlar.forEach(degisiklik => {
            const existingChange = changes.find(c => c.columnName === degisiklik.label);
            if (!existingChange) {
              changes.push({
                columnName: degisiklik.label || degisiklik.alan,
                oldValue: degisiklik.eskiDeger || '-',
                newValue: degisiklik.yeniDeger || '-',
                changeType: 'modified',
                label: degisiklik.label,
                alan: degisiklik.alan
              });
            }
          });
        }
        
        revisionData.push({
          rowData: revizyonRow,
          revisionNo: i + 1,
          revisionDate: revizyon.revizyonTarihi || revizyon.createdAt || new Date(),
          changedBy: revizyon.yapanKullanici,
          reason: revizyon.revizyonSebebi || 'G√ºncelleme',
          changes: changes,
          changesCount: changes.length,
          isInitial: false,
          snapshot: revizyonSnapshot,
          // üéØ Debug bilgileri
          debug: {
            hasSnapshot: !!(revizyon.veriSnapshot?.sonrasi),
            hasChanges: !!(revizyon.degisikenAlanlar?.length),
            changeCount: revizyon.degisikenAlanlar?.length || 0
          }
        });
        
        console.log(`‚úÖ Revizyon ${i + 1} eklendi - ${changes.length} deƒüi≈üiklik tespit edildi`);
        console.log(`üîç CSV deƒüi≈üiklik analizi: ${changes.length} farklƒ±lƒ±k tespit edildi`);
        
        // üö´ CRITICAL FIX: currentState g√ºncellemesini KALDIR! 
        // Her revizyon kendi historik snapshot'ƒ±nƒ± kullanmalƒ±, g√ºncel state ile deƒüil!
        // currentState = JSON.parse(JSON.stringify(revizyonSnapshot)); // ‚ùå REMOVED
      }
    }
    
    const totalChanges = revisionData.reduce((sum, r) => sum + (r.changesCount || 0), 0);
    console.log(`üéâ PROFESSIONAL Revizyon tracking tamamlandƒ±!`);
    console.log(`üìä ƒ∞statistikler:`);
    console.log(`   ‚Ä¢ Toplam satƒ±r: ${revisionData.length}`);
    console.log(`   ‚Ä¢ ƒ∞lk olu≈üturma: 1`);
    console.log(`   ‚Ä¢ Revizyonlar: ${revisionData.length - 1}`);
    console.log(`   ‚Ä¢ Toplam deƒüi≈üiklik: ${totalChanges} alan`);
    
    return revisionData;
    
  } catch (error) {
    console.error('üí• PROFESSIONAL Revizyon tracking hatasƒ±:', error);
    throw error;
  }
};

// üèóÔ∏è CSV DATA ROW BUILDER WITH SNAPSHOT - PROFESSIONAL DEBUG VERSION
const buildCsvDataRowWithSnapshot = async (snapshot, revizyon = null, revizyonNo = 0) => {
  try {
    console.log(`üîç [DEBUG] CSV Builder ba≈üladƒ± - Revizyon: ${revizyonNo}`);
    console.log(`üìä [DEBUG] Snapshot keys:`, Object.keys(snapshot));
    console.log(`üìã [DEBUG] Snapshot sample:`, {
      tesvikId: snapshot.tesvikId,
      istihdam: snapshot.istihdam,
      yatirimBilgileri: !!snapshot.yatirimBilgileri,
      urunler: snapshot.urunler?.length,
      destekUnsurlari: snapshot.destekUnsurlari?.length,
      ozelSartlar: snapshot.ozelSartlar?.length,
      maliHesaplamalar: !!snapshot.maliHesaplamalar
    });
    
    // Snapshot kullanarak CSV satƒ±rƒ± olu≈ütur
    const row = [];
    
    // Temel bilgiler - ENHANCED DEBUG
    const gmId = snapshot.tesvikId || snapshot.gmId || '';
    // TALEP/SONU√á: Revizyona √∂zel se√ßilen durum √∂ncelikli
    // "TALEP/SONU√á": √ñncelik sƒ±rasƒ± ‚Üí Revizyonun se√ßilen i≈ülemi (revizyonSebebi) > revizyonun yeni durumu > snapshot durumu
    const talepSonuc = (revizyon?.revizyonSebebi)
      || (revizyon?.yeniDurum)
      || (revizyon?.durumSonrasi)
      || (snapshot.kunyeBilgileri?.talepSonuc)
      || (snapshot.durumBilgileri?.genelDurum)
      || (revizyonNo === 0 ? 'ƒ∞lk Olu≈üturma' : '');
    const firmaId = snapshot.firmaId || '';
    const yatirimciUnvan = snapshot.yatirimciUnvan || '';
    
    console.log(`üè¢ [DEBUG] Temel bilgiler: GM=${gmId}, Talep/Sonu√ß=${talepSonuc}, Firma=${firmaId}, √únvan=${yatirimciUnvan}`);
    console.log(`üßæ [DEBUG] TALEP/SONU√á s√ºtunu kaynaƒüƒ±:`, {
      kullanilan: talepSonuc,
      revizyonSebebi: revizyon?.revizyonSebebi,
      yeniDurum: revizyon?.yeniDurum,
      durumSonrasi: revizyon?.durumSonrasi,
      snapshotTalepSonuc: snapshot?.kunyeBilgileri?.talepSonuc,
      snapshotDurum: snapshot?.durumBilgileri?.genelDurum
    });
    
    row.push(gmId);                                               // GM ID
    row.push(talepSonuc);                                         // TALEP/SONU√á  
    row.push(revizyonNo.toString());                              // REVIZE ID
    row.push(firmaId);                                            // FIRMA ID
    row.push(yatirimciUnvan);                                     // YATIRIMCI UNVAN
    row.push('');                                                 // SGK Sƒ∞Cƒ∞L NO
    
    // Belge bilgileri - ENHANCED DEBUG
    const belge = snapshot.belgeYonetimi || {};
    console.log(`üìã [DEBUG] Belge bilgileri:`, {
      belgeId: belge.belgeId,
      belgeNo: belge.belgeNo,
      belgeTarihi: belge.belgeTarihi,
      dayandigiKanun: belge.dayandigiKanun
    });
    
    row.push(belge.belgeId || '');                                // BELGE ID
    row.push(belge.belgeNo || '');                                // BELGE NO
    row.push(belge.belgeTarihi || '');                            // BELGE TARIHI
    row.push(belge.belgeMuracaatTarihi || '');                    // BELGE MURACAAT TARIHI
    row.push(belge.muracaatSayisi || snapshot.belgeYonetimi?.muracaatSayisi || ''); // M√úRACAAT SAYISI
    row.push(belge.belgeBaslamaTarihi || '');                     // BELGE BASLAMA TARIHI
    row.push(belge.belgeBitisTarihi || snapshot.belgeYonetimi?.belgeBitisTarihi || ''); // BELGE BITIS TARIHI
    row.push(belge.sureUzatimTarihi || snapshot.belgeYonetimi?.sureUzatimTarihi || ''); // S√úRE UZATIM TARƒ∞Hƒ∞
    row.push(belge.oncelikliYatirim || 'hayƒ±r');                  // √ñZELLƒ∞KLƒ∞ YATIRIM ƒ∞SE
    row.push(belge.dayandigiKanun || '');                         // DAYANDIƒûI KANUN
    row.push(snapshot.durumBilgileri?.genelDurum || '');          // BELGE DURUMU
    
    // Yatƒ±rƒ±m bilgileri - FIXED FIELD MAPPING!
    const yatirimBilgileri = snapshot.yatirimBilgileri || {};
    const yatirim1 = yatirimBilgileri.yatirimBilgileri1 || yatirimBilgileri;
    const yatirim2 = yatirimBilgileri.yatirimBilgileri2 || yatirimBilgileri;
    
    console.log(`üè≠ [DEBUG] Yatƒ±rƒ±m bilgileri:`, {
      yatirim1: {
        yatirimKonusu: yatirim1.yatirimKonusu,
        cins1: yatirim1.cins1,
        destekSinifi: yatirim1.destekSinifi
      },
      yatirim2: {
        il: yatirim2.il,
        ilce: yatirim2.ilce,
        yatirimAdresi1: yatirim2.yatirimAdresi1
      }
    });
    
    row.push(yatirim1.yatirimKonusu || '');                       // 2-YATIRIM KONUSU
    row.push(yatirim1.cins1 || yatirimBilgileri.sCinsi1 || snapshot.yatirimBilgileri?.sCinsi1 || '');  // 3-CINSI(1)
    row.push(yatirim1.cins2 || yatirimBilgileri.tCinsi2 || snapshot.yatirimBilgileri?.tCinsi2 || '');  // 3-CINSI(2)
    row.push(yatirim1.cins3 || yatirimBilgileri.uCinsi3 || snapshot.yatirimBilgileri?.uCinsi3 || '');  // 3-CINSI(3)
    row.push(yatirim1.cins4 || yatirimBilgileri.vCinsi4 || snapshot.yatirimBilgileri?.vCinsi4 || '');  // 3-CINSI(4)
    row.push(yatirim1.destekSinifi || yatirimBilgileri.destekSinifi || ''); // DESTEK SINIFI
    row.push(yatirim2.yerinIl || yatirimBilgileri.yerinIl || ''); // YERI IL
    row.push(yatirim2.yerinIlce || yatirimBilgileri.yerinIlce || ''); // YERI ILCE
    row.push(yatirim2.ada || yatirimBilgileri.ada || '');        // ADA
    row.push(yatirim2.parsel || yatirimBilgileri.parsel || '');  // PARSEL
    row.push(yatirim2.yatirimAdresi1 || '');                      // YATIRIM ADRESI(1)
    row.push(yatirim2.yatirimAdresi2 || '');                      // YATIRIM ADRESI(2)
    row.push(yatirim2.yatirimAdresi3 || '');                      // YATIRIM ADRESI(3)
    row.push('');                                                 // OSB ISE MUDURLUK
    row.push('');                                                 // ƒ∞L BAZLI B√ñLGE
    row.push('');                                                 // ƒ∞L√áE BAZLI B√ñLGE
    row.push('');                                                 // SERBEST B√ñLGE
    
    // ƒ∞stihdam - ENHANCED DEBUG
    const istihdam = snapshot.istihdam || {};
    console.log(`üë• [DEBUG] ƒ∞stihdam bilgileri:`, {
      mevcutKisi: istihdam.mevcutKisi,
      ilaveKisi: istihdam.ilaveKisi,
      toplamKisi: istihdam.toplamKisi
    });
    
    row.push(istihdam.mevcutKisi || 0);                           // Mevcut Ki≈üi
    row.push(istihdam.ilaveKisi || 0);                            // ƒ∞lave Ki≈üi
    
    // √úr√ºn bilgileri (9 √ºr√ºn x 6 alan = 54 s√ºtun) - FIXED FIELD MAPPING!
    const urunler = snapshot.urunler || snapshot.urunBilgileri || [];
    console.log(`üì¶ [DEBUG] √úr√ºn bilgileri:`, {
      length: urunler.length,
      first: urunler[0] ? {
        us97Kodu: urunler[0].us97Kodu,
        urunAdi: urunler[0].urunAdi,
        mevcutKapasite: urunler[0].mevcutKapasite,
        ilaveKapasite: urunler[0].ilaveKapasite,
        kapasiteBirimi: urunler[0].kapasiteBirimi
      } : null
    });
    
    // CRITICAL FIX: Sadece KAPASƒ∞TESƒ∞ OLAN √ºr√ºnleri g√∂ster!
    const actualProducts = urunler.filter(urun => 
      urun && 
      (urun.urunAdi || urun.us97Kodu) && 
      urun.urunAdi !== '' && 
      // CRITICAL: Kapasite kontrol√º ekle!
      (
        (urun.mevcutKapasite && urun.mevcutKapasite > 0) ||
        (urun.ilaveKapasite && urun.ilaveKapasite > 0) ||
        (urun.toplamKapasite && urun.toplamKapasite > 0)
      )
    );
    
    console.log(`üì¶ [DEBUG] Filtered products: ${actualProducts.length}/${urunler.length} ger√ßek √ºr√ºn`);
    
    for (let i = 0; i < 9; i++) {
      if (i < actualProducts.length) {
        // GER√áEK √úR√úN VAR - G√∂ster
        const urun = actualProducts[i];
        row.push(urun.u97Kodu || '');                            // US97 Kodu - MODEL'E UYGUN
        row.push(urun.urunAdi || '');                             // √úr√ºn
        row.push(urun.mevcutKapasite || 0);                       // Mevcut
        row.push(urun.ilaveKapasite || 0);                        // ƒ∞lave
        row.push(urun.toplamKapasite || (urun.mevcutKapasite || 0) + (urun.ilaveKapasite || 0));  // Toplam
        row.push(urun.kapasiteBirimi || '');                      // Kapasite Birimi
      } else {
        // BO≈û SLOT - Tamamen bo≈ü bƒ±rak (0 deƒüil, bo≈ü string)
        row.push('');     // US97 Kodu
        row.push('');     // √úr√ºn
        row.push('');     // Mevcut - BO≈û STRING!
        row.push('');     // ƒ∞lave - BO≈û STRING!
        row.push('');     // Toplam - BO≈û STRING!
        row.push('');     // Kapasite Birimi
      }
    }
    
    // Destek unsurlarƒ± (8 destek x 2 alan = 16 s√ºtun) - PROFESSIONAL DEBUG!
    const destekUnsurlari = snapshot.destekUnsurlari || [];
    console.log(`üéØ [DEBUG] Destek unsurlarƒ± DETAYLI:`, {
      length: destekUnsurlari.length,
      raw: destekUnsurlari,
      first: destekUnsurlari[0] ? {
        destekUnsuru: destekUnsurlari[0].destekUnsuru,
        sartlari: destekUnsurlari[0].sartlari,
        keys: Object.keys(destekUnsurlari[0])
      } : null
    });
    
    for (let i = 0; i < 8; i++) {
      if (i < destekUnsurlari.length && destekUnsurlari[i] && destekUnsurlari[i].destekUnsuru) {
        // Ger√ßek destek unsuru var - FIXED FIELD MAPPING!
        const destek = destekUnsurlari[i];
        row.push(destek.destekUnsuru || '');                      // Destek Unsuru
        row.push(destek.sartlari || destek.sarti || '');          // ≈ûartlarƒ± (VERƒ∞TABANI: 'sarti')
      } else {
        // Bo≈ü destek unsuru
        row.push('');  // Destek Unsuru
        row.push('');  // ≈ûartlarƒ±
      }
    }
    
    // √ñzel ≈üartlar (14 ≈üart x 2 alan = 28 s√ºtun) - PROFESSIONAL DEBUG!
    const ozelSartlar = snapshot.ozelSartlar || [];
    console.log(`‚öôÔ∏è [DEBUG] √ñzel ≈üartlar DETAYLI:`, {
      length: ozelSartlar.length,
      raw: ozelSartlar,
      all: ozelSartlar.map(s => ({
        kisaltma: s.kisaltma,
        notu: s.notu,
        keys: s ? Object.keys(s) : []
      }))
    });
    
    for (let i = 0; i < 14; i++) {
      if (i < ozelSartlar.length && ozelSartlar[i] && 
          (ozelSartlar[i].kisaltma || ozelSartlar[i].notu || ozelSartlar[i].ko≈üulMetni || ozelSartlar[i].aciklamaNotu)) {
        // Ger√ßek √∂zel ≈üart var - FIXED FIELD MAPPING!
        const sart = ozelSartlar[i];
        row.push(sart.kisaltma || sart.ko≈üulMetni || '');         // √ñzel ≈ûart Kƒ±saltma (VERƒ∞TABANI: 'ko≈üulMetni')
        row.push(sart.notu || sart.aciklamaNotu || '');           // √ñzel≈üart Notu (VERƒ∞TABANI: 'aciklamaNotu')
      } else {
        // Bo≈ü √∂zel ≈üart
        row.push('');  // √ñzel ≈ûart Kƒ±saltma
        row.push('');  // √ñzel≈üart Notu
      }
    }
    
    // Finansal bilgiler (26 s√ºtun) - FIXED FIELD MAPPING!
    const finansal = snapshot.maliHesaplamalar || snapshot.finansalBilgiler || {};
    console.log(`üí∞ [DEBUG] Finansal bilgiler DETAYLI:`, {
      has: !!finansal,
      keys: finansal ? Object.keys(finansal) : [],
      dataFields: {
        araziArsaBedeli_OLD: finansal.araziArsaBedeli,
        araciArsaBedeli_NEW: finansal.araciArsaBedeli,
        toplamSabitYatirimTutari_OLD: finansal.toplamSabitYatirimTutari,
        toplamSabitYatirim_NEW: finansal.toplamSabitYatirim,
        binaInsaatGiderleri_OLD: finansal.binaInsaatGiderleri,
        binaInsaatGideri_NEW: finansal.binaInsaatGideri,
        makinaTechizat_NEW: finansal.makinaTechizat,
        makineTe√ßhizatGiderleri_OLD: finansal.makineTe√ßhizatGiderleri
      }
    });
    
    // Arazi-Arsa Bedeli (4 s√ºtun) - MODEL'E UYGUN
    // NOT: Frontend'den maliyetlenen objesi i√ßinde geliyor, model'de aracAracaGideri
    const maliyetlenen = finansal.maliyetlenen || {};
    const araziGideri = finansal.aracAracaGideri || {};
    
    // Veri √∂ncelik sƒ±rasƒ±: maliyetlenen > aracAracaGideri > legacy alan
    const metrekaresi = parseInt(maliyetlenen.sl ?? araziGideri.sx ?? 0);
    const birimFiyat  = parseInt(maliyetlenen.sm ?? araziGideri.sayisi ?? 0);
    // Her revizyonda doƒüru toplamƒ± t√ºret: eƒüer sn yoksa sl*sm; o da yoksa alternatif/legacy toplam
    const hesaplananSn = Number.isFinite(maliyetlenen.sl) && Number.isFinite(maliyetlenen.sm)
      ? (maliyetlenen.sl || 0) * (maliyetlenen.sm || 0)
      : undefined;
    const araziToplam = parseInt(
      (maliyetlenen.sn ?? hesaplananSn ?? araziGideri.toplam ?? finansal.araciArsaBedeli ?? 0)
    );
    
    // A√ßƒ±klama i√ßin otomatik olu≈ütur veya varsa kullan
    const araziAciklama = finansal.araziAciklama || 
                         (metrekaresi > 0 ? `${metrekaresi} m¬≤ x ${birimFiyat} TL` : '');
    
    row.push(araziAciklama);                                       // Arazi-Arsa Bedeli A√ßƒ±klama
    
    // G√ºvenlik kontrol√º: 1 trilyon √ºzerindeki sayƒ±larƒ± sƒ±fƒ±rla
    const maxValue = 1000000000000; // 1 trilyon TL limit
    
    row.push(metrekaresi > maxValue ? 0 : metrekaresi);           // Metrekaresi
    row.push(birimFiyat > maxValue ? 0 : birimFiyat);             // Birim Fiyatƒ± TL
    row.push(araziToplam > maxValue ? 0 : araziToplam);           // ARAZƒ∞ ARSA BEDELƒ∞
    
    // Bina ƒ∞n≈üaat Giderleri (5 s√ºtun) - MODEL'E UYGUN
    const bina = finansal.binaInsaatGideri || finansal.binaInsaatGiderleri || {};
    row.push(bina.aciklama || '');                                // Bina ƒ∞n≈üaat Gideri A√ßƒ±klama
    row.push(bina.anaBinaGideri || bina.anaBinaVeTesisleri || 0);                       // Ana Bina ve Tesisleri
    row.push(bina.yardimciBinaGideri || bina.yardimciIsBinaVeTesisleri || 0);                // Yardƒ±mcƒ± ƒ∞≈ü. Bina ve Tesisleri
    row.push(bina.idareBinalari || 0);                            // ƒ∞dare Binalarƒ±
    row.push(bina.toplamBinaGideri || bina.toplamBinaInsaatGideri || 0);                   // TOPLAM Bƒ∞NA ƒ∞N≈ûAAT Gƒ∞DERƒ∞
    
    // Diƒüer Yatƒ±rƒ±m Harcamalarƒ± (7 s√ºtun) - MODEL'E UYGUN
    // NOT: Model'de yatirimHesaplamalari altƒ±nda et, eu, ev, ew, ex, ey, ez olarak saklanƒ±yor
    const yatirimHesap = finansal.yatirimHesaplamalari || {};
    
    row.push(parseInt(yatirimHesap.et || 0));                   // Yardƒ±mcƒ± ƒ∞≈ül. Mak. Te√ß. Gid.
    row.push(parseInt(yatirimHesap.eu || 0));                   // ƒ∞thalat ve G√ºm.Giderleri
    row.push(parseInt(yatirimHesap.ev || 0));                   // Ta≈üƒ±ma ve Sigorta Giderleri
    row.push(parseInt(yatirimHesap.ew || 0));                   // Montaj Giderleri
    row.push(parseInt(yatirimHesap.ex || 0));                   // Et√ºd ve Proje Giderleri
    row.push(parseInt(yatirimHesap.ey || 0));                   // Diƒüer Giderleri
    row.push(parseInt(yatirimHesap.ez || 0));                   // TOPLAM Dƒ∞ƒûER YATIRIM HARCAMALARI
    
    // Toplam Sabit Yatƒ±rƒ±m Tutarƒ± (1 s√ºtun) - PRIORITY: toplamSabitYatirim FIRST!
    const toplamSabitYatirim = parseInt(finansal.toplamSabitYatirim || finansal.toplamSabitYatirimTutari || 0);
    row.push(toplamSabitYatirim > maxValue ? 0 : toplamSabitYatirim);  // TOPLAM SABƒ∞T YATIRIM TUTARI TL
    
    // Makine Te√ßhizat Giderleri TL (3 s√ºtun) - MODEL'E UYGUN
    const makineTe√ßhizat = finansal.makinaTechizat || finansal.makineTe√ßhizatGiderleri || {};
    row.push(makineTe√ßhizat.ithalMakina || 0);                                  // ƒ∞thal
    row.push(makineTe√ßhizat.yerliMakina || 0);                                  // Yerli
    row.push(makineTe√ßhizat.toplamMakina || ((makineTe√ßhizat.ithalMakina || 0) + (makineTe√ßhizat.yerliMakina || 0)));          // Toplam Makine Te√ßhizat
    
    // ƒ∞thal Makine USD (3 s√ºtun) - MODEL'E UYGUN
    row.push(makineTe√ßhizat.yeniMakina || 0);                        // Yeni Makine
    row.push(makineTe√ßhizat.kullanimisMakina || 0);                 // Kullanƒ±lmƒ±≈ü Makine
    row.push(makineTe√ßhizat.toplamYeniMakina || ((makineTe√ßhizat.yeniMakina || 0) + (makineTe√ßhizat.kullanimisMakina || 0))); // TOPLAM ƒ∞THAL MAKƒ∞NE ($)
    
    // Finansman (3 s√ºtun) - MODEL'E UYGUN
    const finansmanBilgisi = finansal.finansman || {};
    row.push(finansmanBilgisi.yabanciKaynak || 0);                                      // Toplam Yabancƒ± Kaynak
    row.push(finansmanBilgisi.ozKaynak || 0);                          // √ñz kaynak
    row.push(finansmanBilgisi.toplamFinansman || 0);        // TOPLAM Fƒ∞NANSMAN
    
    // Revize tarihi (revizyon varsa onun tarihi, yoksa kaydƒ±n olu≈üturulma)
    const revizyonTarihi = revizyon?.revizyonTarihi || revizyon?.createdAt || snapshot.updatedAt || snapshot.createdAt;
    row.push(revizyonTarihi ? new Date(revizyonTarihi).toLocaleString('tr-TR') : '');
    
    console.log(`üìä CSV satƒ±rƒ± olu≈üturuldu: ${row.length} s√ºtun, Revizyon: ${revizyonNo}`);
    
    return row;
    
  } catch (error) {
    console.error('‚ùå CSV satƒ±r olu≈üturma hatasƒ±:', error);
    throw error;
  }
};

// üîç CSV SATIRLAR ARASI DEƒûƒ∞≈ûƒ∞KLƒ∞K TESPƒ∞T ALGORƒ∞TMASI
const detectDetailedChangesInCsvRows = (previousRow, currentRow) => {
  try {
    const changes = [];
    
    // CSV s√ºtun isimleri - indeks bazlƒ± mapping
    const csvColumnNames = [
      'GM ID', 'TALEP/SONU√á', 'REVIZE ID', 'FIRMA ID', 'YATIRIMCI UNVAN', 'SGK Sƒ∞Cƒ∞L NO',
      'BELGE ID', 'BELGE NO', 'BELGE TARIHI', 'BELGE MURACAAT TARIHI', 'M√úRACAAT SAYISI', 
      'BELGE BASLAMA TARIHI', 'BELGE BITIS TARIHI', 'S√úRE UZATIM TARƒ∞Hƒ∞', '√ñZELLƒ∞KLƒ∞ YATIRIM ƒ∞SE', 
      'DAYANDIƒûI KANUN', 'BELGE DURUMU', '2-YATIRIM KONUSU', '3-CINSI(1)', '3-CINSI(2)', 
      '3-CINSI(3)', '3-CINSI(4)', 'DESTEK SINIFI', 'YERI IL', 'YERI ILCE', 'ADA', 'PARSEL',
      'YATIRIM ADRESI(1)', 'YATIRIM ADRESI(2)', 'YATIRIM ADRESI(3)', 'OSB ISE MUDURLUK', 
      'ƒ∞L BAZLI B√ñLGE', 'ƒ∞L√áE BAZLI B√ñLGE', 'SERBEST B√ñLGE', 'Mevcut Ki≈üi', 'ƒ∞lave Ki≈üi'
    ];
    
    // √úr√ºn bilgileri s√ºtunlarƒ± (9 √ºr√ºn x 6 alan = 54 s√ºtun)
    for (let i = 1; i <= 9; i++) {
      csvColumnNames.push(
        `US97 Kodu (${i})`, `√úr√ºn(${i})`, `Mevcut(${i})`, 
        `ƒ∞lave(${i})`, `Toplam(${i})`, `Kapsite Birimi(${i})`
      );
    }
    
    // Destek unsurlarƒ± s√ºtunlarƒ± (8 destek x 2 alan = 16 s√ºtun)
    for (let i = 1; i <= 8; i++) {
      csvColumnNames.push(`Destek Unusrlarƒ±(${i})`, `≈ûartlarƒ±(${i})`);
    }
    
    // √ñzel ≈üartlar s√ºtunlarƒ± (14 ≈üart x 2 alan = 28 s√ºtun)
    for (let i = 1; i <= 14; i++) {
      csvColumnNames.push(`√ñzel ≈ûart Kƒ±saltma ${i}`, `√ñzel≈üart Notu ${i}`);
    }
    
    // Finansal bilgiler s√ºtunlarƒ± (26 s√ºtun)
    csvColumnNames.push(
      'Arazi-Arsa Bedeli A√ßƒ±klama', 'Metrekaresi', 'Birim Fiyatƒ± TL', 'ARAZƒ∞ ARSA BEDELƒ∞',
      'Bina ƒ∞n≈üaat Gideri A√ßƒ±klama', 'Ana Bina ve Tesisleri', 'Yardƒ±mcƒ± ƒ∞≈ü. Bina ve Tesisleri', 
      'ƒ∞dare Binalarƒ±', 'TOPLAM Bƒ∞NA ƒ∞N≈ûAAT Gƒ∞DERƒ∞', 'Yardƒ±mcƒ± ƒ∞≈ül. Mak. Te√ß. Gid.',
      'ƒ∞thalat ve G√ºm.Giderleri', 'Ta≈üƒ±ma ve Sigorta Giderleri', 'Montaj Giderleri', 
      'Et√ºd ve Proje Giderleri', 'Diƒüer Giderleri', 'TOPLAM Dƒ∞ƒûER YATIRIM HARCAMALARI',
      'TOPLAM SABƒ∞T YATIRIM TUTARI TL', 'ƒ∞thal', 'Yerli', 'Toplam Makine Te√ßhizat',
      'Yeni Makine', 'Kullanƒ±lmƒ±≈ü Makine', 'TOPLAM ƒ∞THAL MAKƒ∞NE ($)', 
      'Toplam Yabancƒ± Kaynak', '√ñz kaynak', 'TOPLAM Fƒ∞NANSMAN', 'REVIZE TARIHI'
    );
    
    // Satƒ±r uzunluƒüu kontrol√º
    const maxLength = Math.max(previousRow?.length || 0, currentRow?.length || 0);
    
    if (maxLength === 0) {
      console.log('‚ö†Ô∏è Her iki CSV satƒ±rƒ± da bo≈ü');
      return [];
    }
    
    // Her s√ºtunu kar≈üƒ±la≈ütƒ±r
    for (let i = 0; i < maxLength; i++) {
      const oldValue = previousRow && previousRow[i] !== undefined ? previousRow[i] : '';
      const newValue = currentRow && currentRow[i] !== undefined ? currentRow[i] : '';
      
      // Deƒüer farklƒ±ysa deƒüi≈üiklik kaydet
      if (String(oldValue).trim() !== String(newValue).trim()) {
        // Sistem s√ºtunlarƒ±nƒ± filtrele (REVIZE ID hep farklƒ± olacak)
        if (i !== 2) { // REVIZE ID s√ºtununu skip et
          changes.push({
            columnIndex: i,
            columnName: csvColumnNames[i] || `S√ºtun ${i + 1}`,
            oldValue: oldValue === '' ? '-' : String(oldValue),
            newValue: newValue === '' ? '-' : String(newValue),
            changeType: oldValue === '' ? 'added' : newValue === '' ? 'removed' : 'modified'
          });
        }
      }
    }
    
    console.log(`üîç CSV deƒüi≈üiklik analizi: ${changes.length} farklƒ±lƒ±k tespit edildi`);
    
    return changes;
    
  } catch (error) {
    console.error('‚ùå CSV deƒüi≈üiklik tespit hatasƒ±:', error);
    return [];
  }
};

// üèóÔ∏è CSV DATA ROW BUILDER - 156 S√úTUN TAM UYUMLU
const buildCsvDataRow = async (tesvik, revizyon = null, revizyonNo = 0) => {
  try {
    const row = [];
    
    // K√úNYE Bƒ∞LGLERƒ∞ (17 s√ºtun)
    row.push(tesvik.tesvikId || tesvik.gmId || 'GM2025000'); // GM ID
    // TALEP/SONU√á: Revizyon satƒ±rƒ±nda varsa o revizyonun durumunu yaz
    const revTalepSonuc = (revizyon && (revizyon.revizyonSebebi || revizyon.yeniDurum || revizyon.durumSonrasi)) || tesvik.kunyeBilgileri?.talepSonuc || tesvik.durumBilgileri?.genelDurum || 'taslak';
    row.push(revTalepSonuc); // TALEP/SONU√á
    row.push(revizyonNo); // REVIZE ID
    row.push(tesvik.firma?.firmaId || 'A000000'); // FIRMA ID
    row.push(tesvik.firma?.tamUnvan || tesvik.yatirimciUnvan || '-'); // YATIRIMCI UNVAN
    row.push(tesvik.kunyeBilgileri?.sgkSicilNo || ''); // Schema'da 'kunyeBilgileri' i√ßinde
    row.push(tesvik._id || ''); // BELGE ID
    row.push(tesvik.belgeYonetimi?.belgeNo || ''); // BELGE NO
    row.push(tesvik.belgeYonetimi?.belgeTarihi ? new Date(tesvik.belgeYonetimi.belgeTarihi).toLocaleDateString('tr-TR') : ''); // BELGE TARIHI
    row.push(tesvik.belgeYonetimi?.belgeMuracaatTarihi ? new Date(tesvik.belgeYonetimi.belgeMuracaatTarihi).toLocaleDateString('tr-TR') : ''); // BELGE MURACAAT TARIHI
    row.push(tesvik.belgeYonetimi?.muracaatSayisi || ''); // M√úRACAAT SAYISI
    row.push(tesvik.belgeYonetimi?.belgeBaslamaTarihi ? new Date(tesvik.belgeYonetimi.belgeBaslamaTarihi).toLocaleDateString('tr-TR') : ''); // BELGE BASLAMA TARIHI
    row.push(tesvik.belgeYonetimi?.belgeBitisTarihi ? new Date(tesvik.belgeYonetimi.belgeBitisTarihi).toLocaleDateString('tr-TR') : ''); // BELGE BITIS TARIHI
    row.push(tesvik.belgeYonetimi?.sureUzatimTarihi ? new Date(tesvik.belgeYonetimi.sureUzatimTarihi).toLocaleDateString('tr-TR') : ''); // S√úRE UZATIM TARƒ∞Hƒ∞
    row.push(tesvik.yatirimBilgileri?.ozellikliYatirimMi ? 'evet' : 'hayir'); // √ñZELLƒ∞KLƒ∞ YATIRIM ƒ∞SE
    row.push(tesvik.belgeYonetimi?.dayandigiKanun || '2012/3305'); // DAYANDIƒûI KANUN
    row.push(tesvik.durumBilgileri?.genelDurum || 'taslak'); // BELGE DURUMU
    
    // YATIRIM ƒ∞LE ƒ∞LGƒ∞Lƒ∞ Bƒ∞LGLER (17 s√ºtun)
    row.push(tesvik.yatirimBilgileri?.yatirimKonusu || ''); // 2-YATIRIM KONUSU
    row.push(tesvik.yatirimBilgileri?.sCinsi1 || ''); // Schema'da 'sCinsi1'
    row.push(tesvik.yatirimBilgileri?.tCinsi2 || ''); // Schema'da 'tCinsi2'
    row.push(tesvik.yatirimBilgileri?.uCinsi3 || ''); // Schema'da 'uCinsi3'
    row.push(tesvik.yatirimBilgileri?.vCinsi4 || ''); // Schema'da 'vCinsi4'
    row.push(tesvik.yatirimBilgileri?.destekSinifi || 'Genel'); // DESTEK SINIFI
    row.push(tesvik.yatirimBilgileri?.yerinIl || tesvik.firma?.firmaIl || ''); // YERI IL
    row.push(tesvik.yatirimBilgileri?.yerinIlce || tesvik.firma?.firmaIlce || ''); // YERI ILCE
    row.push(tesvik.yatirimBilgileri?.ada || ''); // ADA
    row.push(tesvik.yatirimBilgileri?.parsel || ''); // PARSEL
    row.push(tesvik.yatirimBilgileri?.yatirimAdresi1 || ''); // YATIRIM ADRESI(1)
    row.push(tesvik.yatirimBilgileri?.yatirimAdresi2 || ''); // YATIRIM ADRESI(2)
    row.push(tesvik.yatirimBilgileri?.yatirimAdresi3 || ''); // YATIRIM ADRESI(3)
    row.push(tesvik.yatirimBilgileri?.osbMudurluk || ''); // OSB ISE MUDURLUK
    row.push(tesvik.yatirimBilgileri?.ilBazliBolge || ''); // ƒ∞L BAZLI B√ñLGE
    row.push(tesvik.yatirimBilgileri?.ilceBazliBolge || ''); // ƒ∞L√áE BAZLI B√ñLGE
    row.push(tesvik.yatirimBilgileri?.serbsetBolge || ''); // Schema'da 'serbsetBolge' (typo olabilir)
    
    // ƒ∞STƒ∞HDAM (2 s√ºtun)
    row.push(tesvik.istihdam?.mevcutKisi || 0); // Mevcut Ki≈üi
    row.push(tesvik.istihdam?.ilaveKisi || 0); // ƒ∞lave Ki≈üi
    
    // √úR√úN Bƒ∞LGLERƒ∞ (54 s√ºtun - 9 √ºr√ºn x 6 alan)
    for (let i = 1; i <= 9; i++) {
      const urun = tesvik.urunler?.[i-1]; // Schema'da 'urunler' array'i kullanƒ±lƒ±yor
      row.push(urun?.u97Kodu || ''); // Schema'da 'u97Kodu' kullanƒ±lƒ±yor
      row.push(urun?.urunAdi || ''); // √úr√ºn(i)
      row.push(urun?.mevcutKapasite || 0); // Mevcut(i)
      row.push(urun?.ilaveKapasite || 0); // ƒ∞lave(i)
      row.push(urun?.toplamKapasite || 0); // Toplam(i)
      row.push(urun?.kapasiteBirimi || ''); // Kapsite Birimi(i)
    }
    
    // DESTEK UNSURLARI (16 s√ºtun - 8 destek x 2 alan)
    for (let i = 1; i <= 8; i++) {
      const destek = tesvik.destekUnsurlari?.[i-1]; // Schema'da 'destekUnsurlari' kullanƒ±lƒ±yor
      row.push(destek?.destekUnsuru || ''); // Schema'da 'destekUnsuru' kullanƒ±lƒ±yor
      row.push(destek?.sarti || ''); // Schema'da 'sarti' kullanƒ±lƒ±yor
    }
    
    // √ñZEL ≈ûARTLAR (28 s√ºtun - 14 ≈üart x 2 alan)
    for (let i = 1; i <= 14; i++) {
      const sart = tesvik.ozelSartlar?.[i-1];
      row.push(sart?.ko≈üulNo || ''); // Schema'da 'ko≈üulNo' kullanƒ±lƒ±yor
      row.push(sart?.ko≈üulMetni || ''); // Schema'da 'ko≈üulMetni' kullanƒ±lƒ±yor
    }
    
    // Fƒ∞NANSAL Bƒ∞LGLER (25 s√ºtun) - Schema'ya uygun d√ºzeltmeler
    row.push(''); // Arazi-Arsa Bedeli A√ßƒ±klama (schema'da yok)
    row.push(0); // Metrekaresi (schema'da yok)
    row.push(0); // Birim Fiyatƒ± TL (schema'da yok)
    row.push(tesvik.maliHesaplamalar?.araciArsaBedeli || 0); // Schema'da 'araciArsaBedeli'
    row.push(''); // Bina ƒ∞n≈üaat Gideri A√ßƒ±klama (schema'da yok)
    row.push(tesvik.maliHesaplamalar?.binaInsaatGideri?.anaBinaGideri || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.binaInsaatGideri?.yardimciBinaGideri || 0); // Schema'da nested
    row.push(0); // ƒ∞dare Binalarƒ± (schema'da yok)
    row.push(tesvik.maliHesaplamalar?.binaInsaatGideri?.toplamBinaGideri || 0); // Schema'da nested
    row.push(0); // Yardƒ±mcƒ± ƒ∞≈ül. Mak. Te√ß. Gid. (schema'da yok)
    row.push(0); // ƒ∞thalat ve G√ºm.Giderleri (schema'da yok)
    row.push(0); // Ta≈üƒ±ma ve Sigorta Giderleri (schema'da yok)
    row.push(0); // Montaj Giderleri (schema'da yok)
    row.push(0); // Et√ºd ve Proje Giderleri (schema'da yok)
    row.push(0); // Diƒüer Giderleri (schema'da yok)
    row.push(tesvik.maliHesaplamalar?.yatirimHesaplamalari?.ez || 0); // Schema'da 'ez' = TOPLAM
    row.push(tesvik.maliHesaplamalar?.toplamSabitYatirim || 0); // Schema'da mevcut
    row.push(tesvik.maliHesaplamalar?.makinaTechizat?.ithalMakina || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.makinaTechizat?.yerliMakina || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.makinaTechizat?.toplamMakina || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.makinaTechizat?.yeniMakina || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.makinaTechizat?.kullanimisMakina || 0); // Schema'da nested
    row.push(0); // TOPLAM ƒ∞THAL MAKƒ∞NE ($) (schema'da yok)
    row.push(tesvik.maliHesaplamalar?.finansman?.yabanciKaynak || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.finansman?.ozKaynak || 0); // Schema'da nested
    row.push(tesvik.maliHesaplamalar?.finansman?.toplamFinansman || 0); // Schema'da nested
    
    // REVƒ∞ZE TARƒ∞Hƒ∞ (1 s√ºtun)
    const revizeTarihi = revizyon?.revizyonTarihi || tesvik.createdAt;
    row.push(revizeTarihi ? new Date(revizeTarihi).toLocaleDateString('tr-TR') + ' ' + new Date(revizeTarihi).toLocaleTimeString('tr-TR') : '');
    
    return row;
    
  } catch (error) {
    console.error('‚ùå CSV data row build hatasƒ±:', error);
    throw error;
  }
};

// üîç CHANGE DETECTION ALGORITHM
const detectChanges = (previousRow, currentRow) => {
  const changes = [];
  
  for (let i = 0; i < currentRow.length; i++) {
    if (previousRow[i] !== currentRow[i] && currentRow[i] !== '' && currentRow[i] !== 0) {
      changes.push({
        columnIndex: i,
        oldValue: previousRow[i],
        newValue: currentRow[i]
      });
    }
  }
  
  return changes;
};

// üìä PHASE 4: PROFESSIONAL WORKBOOK CREATION
const createProfessionalWorkbook = async (csvStructure, revisionData, includeColors, exportId) => {
  try {
    console.log(`üìä [${exportId}] Professional workbook olu≈üturuluyor...`);
    
    const ExcelJS = require('exceljs');
    // üè¢ ENTERPRISE-LEVEL WORKBOOK SETUP
    const workbook = new ExcelJS.Workbook();
    
    // Set workbook properties for professional look
    workbook.creator = 'GM Te≈üvik Sistemi';
    workbook.lastModifiedBy = 'GM Te≈üvik Sistemi';
    workbook.created = new Date();
    workbook.modified = new Date();
    workbook.subject = 'Te≈üvik Revizyon Excel √áƒ±ktƒ±sƒ±';
    workbook.description = 'Kurumsal Te≈üvik Sistemi - Profesyonel Excel Raporu';
    workbook.keywords = 'te≈üvik, revizyon, excel, kurumsal, rapor';
    workbook.category = 'Raporlar';
    
    const sheet = workbook.addWorksheet('üìä Sistem Revizyon √áƒ±ktƒ±sƒ±', {
      properties: { 
        tabColor: { argb: 'FF1F4E79' },
        defaultRowHeight: 18,
        defaultColWidth: 12
      },
      pageSetup: {
        orientation: 'landscape',
        fitToPage: true,
        fitToHeight: 1,
        fitToWidth: 1,
        paperSize: 9, // A4
        margins: {
          left: 0.5,
          right: 0.5,
          top: 0.75,
          bottom: 0.75,
          header: 0.3,
          footer: 0.3
        }
      }
    });
    
    // üé® ENTERPRISE-LEVEL PROFESSIONAL STYLES - SECTION-BASED CORPORATE DESIGN
    const styles = {
            // üè¢ K√úNYE Bƒ∞LGLERƒ∞ - Deep Blue Corporate Theme - FONTRENGƒ∞ Sƒ∞YAH!
      kunyeLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1E3A8A' } }, // Deep blue
      alignment: { horizontal: 'center', vertical: 'middle' },
      border: {
          top: { style: 'medium', color: { argb: 'FF1E40AF' } }, 
          left: { style: 'medium', color: { argb: 'FF1E40AF' } }, 
          bottom: { style: 'medium', color: { argb: 'FF1E40AF' } }, 
          right: { style: 'medium', color: { argb: 'FF1E40AF' } }
        }
      },
      kunyeLevel2: {
        font: { bold: true, color: { argb: 'FF1E3A8A' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE0E7FF' } }, // Light blue
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FF3B82F6' } }, 
          left: { style: 'thin', color: { argb: 'FF3B82F6' } }, 
          bottom: { style: 'thin', color: { argb: 'FF3B82F6' } }, 
          right: { style: 'thin', color: { argb: 'FF3B82F6' } }
        }
      },
      kunyeColumn: {
        font: { bold: true, color: { argb: 'FF1E3A8A' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F4FF' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FF3B82F6' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FF3B82F6' } }, right: { style: 'thin' } }
      },
      kunyeData: {
        font: { color: { argb: 'FF1E40AF' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFBFCFF' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üè≠ YATIRIM Bƒ∞LGLERƒ∞ - Forest Green Corporate Theme
      yatirimLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF064E3B' } }, // Forest green
      alignment: { horizontal: 'center', vertical: 'middle' },
      border: {
          top: { style: 'medium', color: { argb: 'FF065F46' } }, 
          left: { style: 'medium', color: { argb: 'FF065F46' } }, 
          bottom: { style: 'medium', color: { argb: 'FF065F46' } }, 
          right: { style: 'medium', color: { argb: 'FF065F46' } }
        }
      },
      yatirimLevel2: {
        font: { bold: true, color: { argb: 'FF064E3B' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD1FAE5' } }, // Light green
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FF10B981' } }, 
          left: { style: 'thin', color: { argb: 'FF10B981' } }, 
          bottom: { style: 'thin', color: { argb: 'FF10B981' } }, 
          right: { style: 'thin', color: { argb: 'FF10B981' } }
        }
      },
      yatirimColumn: {
        font: { bold: true, color: { argb: 'FF064E3B' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFECFDF5' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FF10B981' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FF10B981' } }, right: { style: 'thin' } }
      },
      yatirimData: {
        font: { color: { argb: 'FF065F46' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF7FEFC' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üë• ƒ∞STƒ∞HDAM - Purple Corporate Theme
      istihdamLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF581C87' } }, // Purple
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'medium', color: { argb: 'FF7C3AED' } }, 
          left: { style: 'medium', color: { argb: 'FF7C3AED' } }, 
          bottom: { style: 'medium', color: { argb: 'FF7C3AED' } }, 
          right: { style: 'medium', color: { argb: 'FF7C3AED' } }
        }
      },
      istihdamLevel2: {
        font: { bold: true, color: { argb: 'FF581C87' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE9D5FF' } }, // Light purple
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FF8B5CF6' } }, 
          left: { style: 'thin', color: { argb: 'FF8B5CF6' } }, 
          bottom: { style: 'thin', color: { argb: 'FF8B5CF6' } }, 
          right: { style: 'thin', color: { argb: 'FF8B5CF6' } }
        }
      },
      istihdamColumn: {
        font: { bold: true, color: { argb: 'FF581C87' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF5F3FF' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FF8B5CF6' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FF8B5CF6' } }, right: { style: 'thin' } }
      },
      istihdamData: {
        font: { color: { argb: 'FF7C3AED' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFAF9FF' } },
      alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üì¶ √úR√úN Bƒ∞LGLERƒ∞ - Orange Corporate Theme  
      urunLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFB45309' } }, // Orange
        alignment: { horizontal: 'center', vertical: 'middle' },
      border: {
          top: { style: 'medium', color: { argb: 'FFD97706' } }, 
          left: { style: 'medium', color: { argb: 'FFD97706' } }, 
          bottom: { style: 'medium', color: { argb: 'FFD97706' } }, 
          right: { style: 'medium', color: { argb: 'FFD97706' } }
        }
      },
      urunLevel2: {
        font: { bold: true, color: { argb: 'FFB45309' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEF3C7' } }, // Light orange
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FFF59E0B' } }, 
          left: { style: 'thin', color: { argb: 'FFF59E0B' } }, 
          bottom: { style: 'thin', color: { argb: 'FFF59E0B' } }, 
          right: { style: 'thin', color: { argb: 'FFF59E0B' } }
        }
      },
      urunColumn: {
        font: { bold: true, color: { argb: 'FFB45309' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFBEB' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FFF59E0B' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FFF59E0B' } }, right: { style: 'thin' } }
      },
      urunData: {
        font: { color: { argb: 'FFD97706' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFEF7' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üõ†Ô∏è DESTEK UNSURLARI - Teal Corporate Theme
      destekLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF0F766E' } }, // Teal
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'medium', color: { argb: 'FF14B8A6' } }, 
          left: { style: 'medium', color: { argb: 'FF14B8A6' } }, 
          bottom: { style: 'medium', color: { argb: 'FF14B8A6' } }, 
          right: { style: 'medium', color: { argb: 'FF14B8A6' } }
        }
      },
      destekLevel2: {
        font: { bold: true, color: { argb: 'FF0F766E' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFCCFBF1' } }, // Light teal
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FF2DD4BF' } }, 
          left: { style: 'thin', color: { argb: 'FF2DD4BF' } }, 
          bottom: { style: 'thin', color: { argb: 'FF2DD4BF' } }, 
          right: { style: 'thin', color: { argb: 'FF2DD4BF' } }
        }
      },
      destekColumn: {
        font: { bold: true, color: { argb: 'FF0F766E' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0FDFA' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FF2DD4BF' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FF2DD4BF' } }, right: { style: 'thin' } }
      },
      destekData: {
        font: { color: { argb: 'FF14B8A6' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFCFFFE' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üìã √ñZEL ≈ûARTLAR - Indigo Corporate Theme
      ozelLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF3730A3' } }, // Indigo
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'medium', color: { argb: 'FF4F46E5' } }, 
          left: { style: 'medium', color: { argb: 'FF4F46E5' } }, 
          bottom: { style: 'medium', color: { argb: 'FF4F46E5' } }, 
          right: { style: 'medium', color: { argb: 'FF4F46E5' } }
        }
      },
      ozelLevel2: {
        font: { bold: true, color: { argb: 'FF3730A3' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE0E7FF' } }, // Light indigo
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FF6366F1' } }, 
          left: { style: 'thin', color: { argb: 'FF6366F1' } }, 
          bottom: { style: 'thin', color: { argb: 'FF6366F1' } }, 
          right: { style: 'thin', color: { argb: 'FF6366F1' } }
        }
      },
      ozelColumn: {
        font: { bold: true, color: { argb: 'FF3730A3' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F2FF' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FF6366F1' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FF6366F1' } }, right: { style: 'thin' } }
      },
      ozelData: {
        font: { color: { argb: 'FF4F46E5' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFCFCFF' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üí∞ Fƒ∞NANSAL Bƒ∞LGLER - Rose Gold Corporate Theme
      finansalLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF9F1239' } }, // Rose
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'medium', color: { argb: 'FFE11D48' } }, 
          left: { style: 'medium', color: { argb: 'FFE11D48' } }, 
          bottom: { style: 'medium', color: { argb: 'FFE11D48' } }, 
          right: { style: 'medium', color: { argb: 'FFE11D48' } }
        }
      },
      finansalLevel2: {
        font: { bold: true, color: { argb: 'FF9F1239' }, size: 10, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFCE7F3' } }, // Light rose
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FFF43F5E' } }, 
          left: { style: 'thin', color: { argb: 'FFF43F5E' } }, 
          bottom: { style: 'thin', color: { argb: 'FFF43F5E' } }, 
          right: { style: 'thin', color: { argb: 'FFF43F5E' } }
        }
      },
      finansalLevel3: {
        font: { bold: true, color: { argb: 'FF9F1239' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFDF2F8' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FFF43F5E' } }, 
          left: { style: 'thin', color: { argb: 'FFF43F5E' } }, 
          bottom: { style: 'thin', color: { argb: 'FFF43F5E' } }, 
          right: { style: 'thin', color: { argb: 'FFF43F5E' } }
        }
      },
      finansalColumn: {
        font: { bold: true, color: { argb: 'FF9F1239' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEF7F0' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FFF43F5E' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FFF43F5E' } }, right: { style: 'thin' } }
      },
      finansalData: {
        font: { color: { argb: 'FFE11D48' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEFCFD' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // üïê REVƒ∞ZE TARƒ∞Hƒ∞ - Gray Corporate Theme
      revizyonLevel1: {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12, name: 'Calibri' }, // Sƒ∞YAH FONT!
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF374151' } }, // Gray
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { 
          top: { style: 'medium', color: { argb: 'FF6B7280' } }, 
          left: { style: 'medium', color: { argb: 'FF6B7280' } }, 
          bottom: { style: 'medium', color: { argb: 'FF6B7280' } }, 
          right: { style: 'medium', color: { argb: 'FF6B7280' } }
        }
      },
      revizyonColumn: {
        font: { bold: true, color: { argb: 'FF374151' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF9FAFB' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: { top: { style: 'medium', color: { argb: 'FF9CA3AF' } }, left: { style: 'thin' }, bottom: { style: 'medium', color: { argb: 'FF9CA3AF' } }, right: { style: 'thin' } }
      },
      revizyonData: {
        font: { color: { argb: 'FF6B7280' }, size: 9, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEFEFE' } },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
      },

      // ‚ö†Ô∏è SPECIAL DATA STYLES
      initialRowCell: {
        font: { color: { argb: 'FF065F46' }, size: 9, bold: true, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE6FFFA' } }, // Very light green
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { 
          top: { style: 'thin', color: { argb: 'FF059669' } }, 
          left: { style: 'thin', color: { argb: 'FF059669' } }, 
          bottom: { style: 'thin', color: { argb: 'FF059669' } }, 
          right: { style: 'thin', color: { argb: 'FF059669' } }
        }
      },
      changedCell: {
        font: { color: { argb: 'FF8B0000' }, size: 9, bold: true, name: 'Calibri' },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFE6E6' } }, // Light red
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: { 
          top: { style: 'medium', color: { argb: 'FFFF0000' } }, 
          bottom: { style: 'medium', color: { argb: 'FFFF0000' } },
          left: { style: 'medium', color: { argb: 'FFFF0000' } }, 
          right: { style: 'medium', color: { argb: 'FFFF0000' } }
        }
      }
    };
    
    // üèóÔ∏è BUILD 4-LEVEL HEADER STRUCTURE WITH SECTION-BASED CORPORATE COLORS
    console.log(`üìä [${exportId}] 4 seviyeli kurumsal renk ≈üemalƒ± ba≈ülƒ±k yapƒ±sƒ± olu≈üturuluyor...`);
    
    // üé® Section styling mapping function - D√úZELTƒ∞LMƒ∞≈û VERSƒ∞YON
    const getSectionStyle = (colIndex, level) => {
      console.log(`üé® [${exportId}] getSectionStyle called: colIndex=${colIndex}, level=${level}`);
      
      // K√úNYE Bƒ∞LGLERƒ∞: 1-17
      if (colIndex >= 1 && colIndex <= 17) {
        return level === 1 ? styles.kunyeLevel1 : 
               level === 2 ? styles.kunyeLevel2 : 
               level === 3 ? styles.kunyeLevel2 : // Level 3 fallback
               level === 4 ? styles.kunyeColumn : styles.kunyeLevel1;
      }
      // YATIRIM Bƒ∞LGLERƒ∞: 18-34
      else if (colIndex >= 18 && colIndex <= 34) {
        return level === 1 ? styles.yatirimLevel1 : 
               level === 2 ? styles.yatirimLevel2 : 
               level === 3 ? styles.yatirimLevel2 : // Level 3 fallback
               level === 4 ? styles.yatirimColumn : styles.yatirimLevel1;
      }
      // ƒ∞STƒ∞HDAM: 35-36
      else if (colIndex >= 35 && colIndex <= 36) {
        return level === 1 ? styles.istihdamLevel1 : 
               level === 2 ? styles.istihdamLevel2 : 
               level === 3 ? styles.istihdamLevel2 : // Level 3 fallback
               level === 4 ? styles.istihdamColumn : styles.istihdamLevel1;
      }
      // √úR√úN Bƒ∞LGLERƒ∞: 37-90
      else if (colIndex >= 37 && colIndex <= 90) {
        return level === 1 ? styles.urunLevel1 : 
               level === 2 ? styles.urunLevel2 : 
               level === 3 ? styles.urunLevel2 : // Level 3 fallback
               level === 4 ? styles.urunColumn : styles.urunLevel1;
      }
      // DESTEK UNSURLARI: 91-106
      else if (colIndex >= 91 && colIndex <= 106) {
        return level === 1 ? styles.destekLevel1 : 
               level === 2 ? styles.destekLevel2 : 
               level === 3 ? styles.destekLevel2 : // Level 3 fallback
               level === 4 ? styles.destekColumn : styles.destekLevel1;
      }
      // √ñZEL ≈ûARTLAR: 107-134
      else if (colIndex >= 107 && colIndex <= 134) {
        return level === 1 ? styles.ozelLevel1 : 
               level === 2 ? styles.ozelLevel2 : 
               level === 3 ? styles.ozelLevel2 : // Level 3 fallback
               level === 4 ? styles.ozelColumn : styles.ozelLevel1;
      }
      // Fƒ∞NANSAL Bƒ∞LGLER: 135-160
      else if (colIndex >= 135 && colIndex <= 160) {
        return level === 1 ? styles.finansalLevel1 : 
               level === 2 ? styles.finansalLevel2 : 
               level === 3 ? styles.finansalLevel3 :
               level === 4 ? styles.finansalColumn : styles.finansalLevel1;
      }
      // REVƒ∞ZE TARƒ∞Hƒ∞: 161
      else if (colIndex >= 161) {
        return level === 1 ? styles.revizyonLevel1 : 
               level === 2 ? styles.revizyonLevel1 : // Level 2 fallback
               level === 3 ? styles.revizyonLevel1 : // Level 3 fallback
               level === 4 ? styles.revizyonColumn : styles.revizyonLevel1;
      }
      
      return styles.kunyeLevel1; // Default
    };
    
    // üèÜ ENTERPRISE-LEVEL KURUMSAL EXCEL ≈ûABLONU - A≈ûK OLACAKSIN!
    console.log(`üèÜ [${exportId}] PROFESYONEL KURUMSAL ≈ûABLON OLU≈ûTURULUYOR...`);
    
    // üé® KURUMSAL PROFESYONEL STƒ∞LLER - HER B√ñL√úM √ñZEL RENK!
    const professionalStyles = {
      // üè¢ K√úNYE Bƒ∞LGLERƒ∞ - Navy Blue Corporate
      kunye: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1E3A8A' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FF1E3A8A' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFBFDBFE' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FF1E40AF' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFDBEAFE' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      },
      // üè≠ YATIRIM - Forest Green Corporate  
      yatirim: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF064E3B' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FF064E3B' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFB7F5E8' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FF065F46' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFECFDF5' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      },
      // üë• ƒ∞STƒ∞HDAM - Purple Corporate
      istihdam: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF581C87' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FF581C87' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE9D5FF' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FF7C3AED' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF3E8FF' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      },
      // üì¶ √úR√úN - Orange Corporate
      urun: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFEA580C' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FFEA580C' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEF3C7' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FFDC2626' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFBEB' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      },
      // üõ†Ô∏è DESTEK - Teal Corporate
      destek: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF0F766E' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FF0F766E' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFCCFBF1' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FF14B8A6' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0FDFA' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      },
      // üìã √ñZEL ≈ûARTLAR - Indigo Corporate
      ozel: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4338CA' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FF4338CA' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE0E7FF' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FF6366F1' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0F2FF' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      },
      // üí∞ Fƒ∞NANSAL - Rose Corporate
      finansal: {
        level1: {
          font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 13, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFBE185D' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'thick' }, left: { style: 'thick' }, bottom: { style: 'thick' }, right: { style: 'thick' } }
        },
        level2: {
          font: { bold: true, color: { argb: 'FFBE185D' }, size: 11, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFCE7F3' } },
          alignment: { horizontal: 'center', vertical: 'middle' },
          border: { top: { style: 'medium' }, left: { style: 'medium' }, bottom: { style: 'medium' }, right: { style: 'medium' } }
        },
        column: {
          font: { bold: true, color: { argb: 'FFE11D48' }, size: 9, name: 'Segoe UI' },
          fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEF7F0' } },
          alignment: { horizontal: 'center', vertical: 'middle', wrapText: true },
          border: { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } }
        }
      }
    };
    
    // üéØ B√ñL√úM TANIMLAMALARI - KURUMSAL RENKLER ƒ∞LE
    const sections = [
      { name: 'K√úNYE Bƒ∞LGLERƒ∞', start: 1, end: 17, style: professionalStyles.kunye },
      { name: 'YATIRIM Bƒ∞LGLERƒ∞', start: 18, end: 34, style: professionalStyles.yatirim },
      { name: 'ƒ∞STƒ∞HDAM', start: 35, end: 36, style: professionalStyles.istihdam },
      { name: '√úR√úN Bƒ∞LGLERƒ∞', start: 37, end: 90, style: professionalStyles.urun },
      { name: 'DESTEK UNSURLARI', start: 91, end: 106, style: professionalStyles.destek },
      { name: '√ñZEL ≈ûARTLAR', start: 107, end: 134, style: professionalStyles.ozel },
      { name: 'Fƒ∞NANSAL Bƒ∞LGLER', start: 135, end: 161, style: professionalStyles.finansal }
    ];
    
    // üèÜ SATIR 1 - ANA B√ñL√úM BA≈ûLIKLARI (KURUMSAL RENKLER)
    console.log(`üèÜ [${exportId}] Level 1 - Ana b√∂l√ºm ba≈ülƒ±klarƒ± kurumsal renklerle...`);
    sections.forEach(section => {
      // Merge cells for entire section
      sheet.mergeCells(1, section.start, 1, section.end);
      
      // Apply corporate styling to merged area
      for (let col = section.start; col <= section.end; col++) {
        const cell = sheet.getCell(1, col);
        if (col === section.start) cell.value = section.name;
        cell.style = section.style.level1;
      }
      console.log(`üé® Merged: ${section.name} (${section.start}-${section.end}) - ${section.style.level1.fill.fgColor.argb}`);
    });
    
    // üéØ SATIR 2 - ALT B√ñL√úM BA≈ûLIKLARI (KURUMSAL RENKLER)
    console.log(`üéØ [${exportId}] Level 2 - Alt b√∂l√ºm ba≈ülƒ±klarƒ± kurumsal renklerle...`);
    
    // K√úNYE alt b√∂l√ºmleri
    sheet.mergeCells(2, 1, 2, 6);
    for (let c = 1; c <= 6; c++) {
      const cell = sheet.getCell(2, c);
      if (c === 1) cell.value = 'YATIRIMCI';
      cell.style = professionalStyles.kunye.level2;
    }
    sheet.mergeCells(2, 7, 2, 17);
    for (let c = 7; c <= 17; c++) {
      const cell = sheet.getCell(2, c);
      if (c === 7) cell.value = 'BELGE Bƒ∞LGLERƒ∞';
      cell.style = professionalStyles.kunye.level2;
    }
    
    // Diƒüer ana b√∂l√ºmler
    const level2Sections = [
      { name: 'YATIRIM ƒ∞LE ƒ∞LGƒ∞Lƒ∞ Bƒ∞LGLER', start: 18, end: 34, style: professionalStyles.yatirim.level2 },
      { name: 'ƒ∞STƒ∞HDAM', start: 35, end: 36, style: professionalStyles.istihdam.level2 },
      { name: '√úR√úN Bƒ∞LGLERƒ∞', start: 37, end: 90, style: professionalStyles.urun.level2 },
      { name: 'DESTEK UNSURLARI', start: 91, end: 106, style: professionalStyles.destek.level2 },
      { name: '√ñZEL ≈ûARTLAR', start: 107, end: 134, style: professionalStyles.ozel.level2 },
      { name: 'Fƒ∞NANSAL Bƒ∞LGLER', start: 135, end: 161, style: professionalStyles.finansal.level2 }
    ];
    
    level2Sections.forEach(section => {
      sheet.mergeCells(2, section.start, 2, section.end);
      for (let c = section.start; c <= section.end; c++) {
        const cell = sheet.getCell(2, c);
        if (c === section.start) cell.value = section.name;
        cell.style = section.style;
      }
      console.log(`üé® Level2: ${section.name} (${section.start}-${section.end})`);
    });
    
    // üìù SATIR 4 - S√úTUN ƒ∞Sƒ∞MLERƒ∞ (B√ñL√úM BAZLI KURUMSAL RENKLER)
    console.log(`üìù [${exportId}] Level 4 - S√ºtun isimleri b√∂l√ºm renkleryle...`);
    csvStructure.level4.forEach((columnName, index) => {
      const cell = sheet.getCell(4, index + 1);
      cell.value = columnName;
      
      // B√∂l√ºm bazlƒ± stil ata
      const colNum = index + 1;
      let columnStyle = professionalStyles.kunye.column; // Default
      
      if (colNum >= 1 && colNum <= 17) columnStyle = professionalStyles.kunye.column;
      else if (colNum >= 18 && colNum <= 34) columnStyle = professionalStyles.yatirim.column;
      else if (colNum >= 35 && colNum <= 36) columnStyle = professionalStyles.istihdam.column;
      else if (colNum >= 37 && colNum <= 90) columnStyle = professionalStyles.urun.column;
      else if (colNum >= 91 && colNum <= 106) columnStyle = professionalStyles.destek.column;
      else if (colNum >= 107 && colNum <= 134) columnStyle = professionalStyles.ozel.column;
      else if (colNum >= 135 && colNum <= 161) columnStyle = professionalStyles.finansal.column;
      
      cell.style = columnStyle;
      
      if (index < 10) {
        console.log(`üé® Col ${colNum}: "${columnName}"`);
      }
    });
    
    console.log(`üèÜ [${exportId}] KURUMSAL ≈ûABLON TAMAMLANDI - 161 s√ºtun, 7 renkli b√∂l√ºm!`);
    
    // üé® PROFESYONEL SATIR Y√úKSEKLƒ∞KLERƒ∞ & DONDURMALAR
    sheet.getRow(1).height = 35; // Ana b√∂l√ºm ba≈ülƒ±klarƒ± - daha y√ºksek
    sheet.getRow(2).height = 30; // Alt b√∂l√ºm ba≈ülƒ±klarƒ±  
    sheet.getRow(3).height = 25; // Bo≈ü satƒ±r (ileride kullanƒ±m i√ßin)
    sheet.getRow(4).height = 28; // S√ºtun isimleri - daha y√ºksek
    
    // Freeze header rows for better user experience
    sheet.views = [{
      state: 'frozen',
      xSplit: 0,
      ySplit: 4, // Freeze first 4 header rows
      topLeftCell: 'A5',
      activeCell: 'A5'
    }];
    
    console.log(`üìä [${exportId}] Ba≈ülƒ±k yapƒ±sƒ± tamamlandƒ±: ${csvStructure.totalColumns} s√ºtun`);
    
    // üìä POPULATE DATA ROWS WITH SECTION-BASED CORPORATE COLORS
    console.log(`üìä [${exportId}] Kurumsal renk ≈üemalƒ± veri satƒ±rlarƒ± olu≈üturuluyor: ${revisionData.length} satƒ±r`);
    
    // üé® Section data styling function
    const getSectionDataStyle = (colIndex, isInitial = false, isChanged = false) => {
      // ƒ∞lk satƒ±r i√ßin √∂zel stil
      if (isInitial) {
        return styles.initialRowCell;
      }
      // Deƒüi≈üen h√ºcreler i√ßin kƒ±rmƒ±zƒ± vurgu
      if (isChanged) {
        return styles.changedCell;
      }
      
      // Section-based normal data styles
      // K√úNYE Bƒ∞LGLERƒ∞: 1-17 (Blue theme)
      if (colIndex >= 1 && colIndex <= 17) {
        return styles.kunyeData;
      }
      // YATIRIM Bƒ∞LGLERƒ∞: 18-34 (Green theme)
      else if (colIndex >= 18 && colIndex <= 34) {
        return styles.yatirimData;
      }
      // ƒ∞STƒ∞HDAM: 35-36 (Purple theme)
      else if (colIndex >= 35 && colIndex <= 36) {
        return styles.istihdamData;
      }
      // √úR√úN Bƒ∞LGLERƒ∞: 37-90 (Orange theme)
      else if (colIndex >= 37 && colIndex <= 90) {
        return styles.urunData;
      }
      // DESTEK UNSURLARI: 91-106 (Teal theme)
      else if (colIndex >= 91 && colIndex <= 106) {
        return styles.destekData;
      }
      // √ñZEL ≈ûARTLAR: 107-134 (Indigo theme)
      else if (colIndex >= 107 && colIndex <= 134) {
        return styles.ozelData;
      }
      // Fƒ∞NANSAL Bƒ∞LGLER: 135-160 (Rose theme)
      else if (colIndex >= 135 && colIndex <= 160) {
        return styles.finansalData;
      }
      // REVƒ∞ZE TARƒ∞Hƒ∞: 161+ (Gray theme)
      else if (colIndex >= 161) {
        return styles.revizyonData;
      }
      
      return styles.kunyeData; // Default
    };
    
    let currentRow = 5;
    
    revisionData.forEach((revision, revisionIndex) => {
      revision.rowData.forEach((value, colIndex) => {
        const cell = sheet.getCell(currentRow, colIndex + 1);
            cell.value = value;
        
        // Determine styling based on section and state
        const isChanged = includeColors && revision.changes?.some(c => c.columnIndex === colIndex);
        const baseStyle = getSectionDataStyle(colIndex + 1, revision.isInitial, isChanged);
        
        // üé® ADD ALTERNATING ROW EFFECT (subtle gradient-like effect)
        if (!revision.isInitial && !isChanged && revisionIndex % 2 === 1) {
          // Create slightly darker version for alternating rows
          const alternatingStyle = { ...baseStyle };
          
          // Section-specific alternating colors
          if (colIndex + 1 >= 1 && colIndex + 1 <= 17) { // K√úNYE
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8F9FF' } };
          } else if (colIndex + 1 >= 18 && colIndex + 1 <= 34) { // YATIRIM
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF3FDF6' } };
          } else if (colIndex + 1 >= 35 && colIndex + 1 <= 36) { // ƒ∞STƒ∞HDAM
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF7F5FF' } };
          } else if (colIndex + 1 >= 37 && colIndex + 1 <= 90) { // √úR√úN
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFCF5' } };
          } else if (colIndex + 1 >= 91 && colIndex + 1 <= 106) { // DESTEK
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8FFFE' } };
          } else if (colIndex + 1 >= 107 && colIndex + 1 <= 134) { // √ñZEL ≈ûARTLAR
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF9F8FF' } };
          } else if (colIndex + 1 >= 135 && colIndex + 1 <= 160) { // Fƒ∞NANSAL
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEF8F9' } };
          } else { // REVƒ∞ZYON
            alternatingStyle.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFCFCFC' } };
          }
          
          cell.style = alternatingStyle;
        } else {
          cell.style = baseStyle;
        }
      });
      
      // üé® ENHANCED ROW HEIGHTS
      if (revision.isInitial) {
        sheet.getRow(currentRow).height = 22; // Initial row daha y√ºksek
      } else if (revision.changes && revision.changes.length > 0) {
        sheet.getRow(currentRow).height = 20; // Changed rows biraz daha y√ºksek
      } else {
        sheet.getRow(currentRow).height = 18; // Normal rows
      }
      
      currentRow++;
    });
    
    // üìè COLUMN WIDTHS
    console.log(`üìä [${exportId}] S√ºtun geni≈ülikleri ayarlanƒ±yor...`);
    
    const columnWidths = [
      8, 12, 8, 10, 35, 12, 25, 12, 12, 15, 12, 15, 12, 15, 15, 12, 15, // K√úNYE + YATIRIM
      25, 10, 10, 10, 10, 18, 12, 12, 8, 8, 20, 20, 20, 15, 15, 15, 12, 10, 10, // YATIRIM devam + ƒ∞STƒ∞HDAM
    ];
    
    // √úr√ºn bilgileri i√ßin s√ºtun geni≈ülikleri (54 s√ºtun)
    for (let i = 0; i < 54; i++) {
      if (i % 6 === 0) columnWidths.push(12); // US97 Kodu
      else if (i % 6 === 1) columnWidths.push(25); // √úr√ºn adƒ±
      else columnWidths.push(8); // Diƒüer alanlar
    }
    
    // Kalan s√ºtunlar i√ßin
    for (let i = columnWidths.length; i < csvStructure.totalColumns; i++) {
      columnWidths.push(12);
    }
    
    columnWidths.forEach((width, index) => {
      if (sheet.getColumn(index + 1)) {
        sheet.getColumn(index + 1).width = width;
      }
    });
    
    console.log(`‚úÖ [${exportId}] Professional workbook olu≈üturuldu`);
    return workbook;
    
  } catch (error) {
    console.error(`‚ùå [${exportId}] Workbook creation hatasƒ±:`, error);
    throw error;
  }
};

// üìÅ FILE NAME GENERATOR
const generateFileName = (tesvik) => {
  const firmId = tesvik.firma?.firmaId || 'A000000';
  const tesvikId = tesvik.tesvikId || tesvik.gmId || 'UNKNOWN';
  const date = new Date().toISOString().split('T')[0];
  
  return `sistem_excel_ciktisi_${firmId}_${tesvikId}_${date}.xlsx`;
};

// üìã EXPORT ACTIVITY LOGGER
const logExportActivity = async (tesvik, user, exportId, rowCount, duration, ip, userAgent) => {
  try {
    await Activity.logActivity({
      action: 'export',
      category: 'tesvik',
      title: 'Enterprise Sistem Revizyon Excel √áƒ±ktƒ±sƒ±',
      description: `${tesvik.tesvikId || tesvik.gmId} i√ßin enterprise seviyede CSV formatƒ±nda sistem revizyon Excel √ßƒ±ktƒ±sƒ± olu≈üturuldu`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: user._id,
        name: user.adSoyad,
        email: user.email,
        role: user.rol
      },
      metadata: {
        ip: ip || '127.0.0.1',
        userAgent: userAgent,
        exportId,
        exportType: 'enterprise_sistem_revizyon_excel',
        csvFormat: true,
        columnCount: 156,
        rowCount,
        duration,
        enterprise: true,
        source: 'web'
      }
    });
  } catch (error) {
    console.error('‚ùå Export activity log hatasƒ±:', error);
    // Log hatasƒ± export'u engellemez
  }
};

// MODULE EXPORTS
module.exports = {
  createTesvik,
  getTesvikler,
  getTesvik,
  updateTesvik,
  deleteTesvik,
  searchTesvikler,
  getTesvikStats,
  getTesvikByFirma,
  updateTesvikDurum,
  addTesvikRevizyon,
  exportRevizyonExcel,
  calculateMaliHesaplamalar,
  getDurumRenkleri,
  getNextTesvikId,
  bulkUpdateDurum,
  
  // üìÑ EXCEL EXPORT - Excel benzeri renk kodlamalƒ± √ßƒ±ktƒ± (ExcelJS ile)
  exportTesvikExcel: async (req, res) => {
    try {
        const { id } = req.params;
  const { format = 'xlsx', includeColors = true } = req.query;
  
  console.log(`üìä Excel export ba≈ülatƒ±lƒ±yor: ${id}`);
  
  // ID validation
  if (!id || id === 'undefined') {
    return res.status(400).json({
      success: false,
      message: 'Ge√ßersiz te≈üvik ID\'si'
    });
  }
  
  // Te≈üvik verisini getir
  const tesvik = await Tesvik.findById(id)
        .populate('firma', 'unvan vergiNo')
        .lean();
        
      if (!tesvik) {
        return res.status(404).json({ success: false, message: 'Te≈üvik bulunamadƒ±' });
      }
      
      // ExcelJS workbook olu≈ütur
      const ExcelJS = require('exceljs');
      const workbook = new ExcelJS.Workbook();
      
      // Ana sayfa - Te≈üvik Detaylarƒ±
      const mainSheet = workbook.addWorksheet('Te≈üvik Detaylarƒ±');
      
      // Ba≈ülƒ±k stilleri
      const headerStyle = {
        font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 14 },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF4F81BD' } },
        alignment: { horizontal: 'center', vertical: 'middle' },
        border: {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      };
      
      const subHeaderStyle = {
        font: { bold: true, color: { argb: 'FF000000' }, size: 12 },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFE6F3FF' } },
        alignment: { horizontal: 'left', vertical: 'middle' }
      };
      
      const dataStyle = {
        font: { color: { argb: 'FF000000' }, size: 11 },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        }
      };
      
      // Ana ba≈ülƒ±k
      mainSheet.mergeCells('A1:G1');
      mainSheet.getCell('A1').value = 'TE≈ûVƒ∞K BELGESI';
      mainSheet.getCell('A1').style = headerStyle;
      
      // Temel bilgiler
      let row = 3;
      mainSheet.getCell(`A${row}`).value = 'GM ID:';
      mainSheet.getCell(`A${row}`).style = subHeaderStyle;
      mainSheet.getCell(`B${row}`).value = tesvik.gmId || '';
      mainSheet.getCell(`B${row}`).style = dataStyle;
      mainSheet.getCell(`D${row}`).value = 'Te≈üvik ID:';
      mainSheet.getCell(`D${row}`).style = subHeaderStyle;
      mainSheet.getCell(`E${row}`).value = tesvik.tesvikId || '';
      mainSheet.getCell(`E${row}`).style = dataStyle;
      
      row++;
      mainSheet.getCell(`A${row}`).value = 'Firma:';
      mainSheet.getCell(`A${row}`).style = subHeaderStyle;
      mainSheet.getCell(`B${row}`).value = tesvik.firma?.unvan || '';
      mainSheet.getCell(`B${row}`).style = dataStyle;
      mainSheet.getCell(`D${row}`).value = 'Vergi No:';
      mainSheet.getCell(`D${row}`).style = subHeaderStyle;
      mainSheet.getCell(`E${row}`).value = tesvik.firma?.vergiNo || '';
      mainSheet.getCell(`E${row}`).style = dataStyle;
      
      // K√ºnye bilgileri b√∂l√ºm√º
      row += 2;
      mainSheet.mergeCells(`A${row}:G${row}`);
      mainSheet.getCell(`A${row}`).value = 'K√úNYE Bƒ∞LGƒ∞LERƒ∞';
      mainSheet.getCell(`A${row}`).style = headerStyle;
      
      row++;
      const kunyeFields = [
        ['Karar Tarihi:', tesvik.kunyeBilgileri?.kararTarihi || '', 'Karar Sayƒ±sƒ±:', tesvik.kunyeBilgileri?.kararSayisi || ''],
        ['Ba≈üvuru Tarihi:', tesvik.kunyeBilgileri?.basvuruTarihi || '', 'Dosya No:', tesvik.kunyeBilgileri?.dosyaNo || ''],
        ['Proje Bedeli:', tesvik.kunyeBilgileri?.projeBedeli || 0, 'Te≈üvik Miktarƒ±:', tesvik.kunyeBilgileri?.tesvikMiktari || 0]
      ];
      
      kunyeFields.forEach(fieldRow => {
        mainSheet.getCell(`A${row}`).value = fieldRow[0];
        mainSheet.getCell(`A${row}`).style = subHeaderStyle;
        mainSheet.getCell(`B${row}`).value = fieldRow[1];
        mainSheet.getCell(`B${row}`).style = dataStyle;
        mainSheet.getCell(`D${row}`).value = fieldRow[2];
        mainSheet.getCell(`D${row}`).style = subHeaderStyle;
        mainSheet.getCell(`E${row}`).value = fieldRow[3];
        mainSheet.getCell(`E${row}`).style = dataStyle;
        row++;
      });
      
      // Finansal bilgiler b√∂l√ºm√º
      row++;
      mainSheet.mergeCells(`A${row}:G${row}`);
      mainSheet.getCell(`A${row}`).value = 'Fƒ∞NANSAL Bƒ∞LGƒ∞LER';
      mainSheet.getCell(`A${row}`).style = headerStyle;
      
      row++;
      const finansalFields = [
        ['Toplam Sabit Yatƒ±rƒ±m:', tesvik.maliHesaplamalar?.toplamSabitYatirim || 0],
        ['Arazi/Arsa Bedeli:', tesvik.maliHesaplamalar?.araciArsaBedeli || 0],
        ['Yerli Makine (TL):', tesvik.maliHesaplamalar?.makinaTechizat?.yerliMakina || 0],
        ['ƒ∞thal Makine (TL):', tesvik.maliHesaplamalar?.makinaTechizat?.ithalMakina || 0],
        ['ƒ∞thal Makine (USD):', tesvik.maliHesaplamalar?.makinaTechizat?.yeniMakina || 0]
      ];
      
      finansalFields.forEach(fieldRow => {
        mainSheet.getCell(`A${row}`).value = fieldRow[0];
        mainSheet.getCell(`A${row}`).style = subHeaderStyle;
        mainSheet.getCell(`B${row}`).value = fieldRow[1];
        mainSheet.getCell(`B${row}`).style = dataStyle;
        row++;
      });
      
      // S√ºtun geni≈ülikleri
      mainSheet.columns = [
        { width: 25 }, { width: 20 }, { width: 5 }, { width: 20 }, { width: 20 }, { width: 10 }, { width: 10 }
      ];
      
      // √úr√ºn bilgileri sayfasƒ±
      const urunSheet = workbook.addWorksheet('√úr√ºn Bilgileri');
      
      // √úr√ºn sayfasƒ± ba≈ülƒ±ƒüƒ±
      urunSheet.mergeCells('A1:G1');
      urunSheet.getCell('A1').value = '√úR√úN Bƒ∞LGƒ∞LERƒ∞ (U$97 KODLARI)';
      urunSheet.getCell('A1').style = headerStyle;
      
      // √úr√ºn tablosu ba≈ülƒ±klarƒ±
      const urunHeaders = ['Kod', 'A√ßƒ±klama', 'Mevcut', 'ƒ∞lave', 'Toplam', 'Kapasite', 'Birim'];
      urunHeaders.forEach((header, index) => {
        const cell = urunSheet.getCell(3, index + 1);
        cell.value = header;
        cell.style = subHeaderStyle;
      });
      
      // √úr√ºn verileri - Sadece anlamlƒ± verisi olan √ºr√ºnler
      if (tesvik.urunler && tesvik.urunler.length > 0) {
        // üîß Fƒ∞LTRE: SADECE 1+ kapasitesi olan √ºr√ºnleri g√∂ster (Kod/a√ßƒ±klama olsa bile kapasite 0 ise g√∂sterme)
        const filteredUrunler = tesvik.urunler.filter(urun => 
          (urun.mevcutKapasite && urun.mevcutKapasite > 0) ||
          (urun.ilaveKapasite && urun.ilaveKapasite > 0) ||
          (urun.toplamKapasite && urun.toplamKapasite > 0)
        );
        
        filteredUrunler.forEach((urun, index) => {
          const rowIndex = index + 4;
          const urunData = [
            urun.u97Kodu || '',
            urun.urunAdi || '',
            urun.mevcutKapasite || 0,
            urun.ilaveKapasite || 0,
            urun.toplamKapasite || 0,
            urun.toplamKapasite || 0,
            urun.kapasiteBirimi || ''
          ];
          
          urunData.forEach((value, colIndex) => {
            const cell = urunSheet.getCell(rowIndex, colIndex + 1);
            cell.value = value;
            cell.style = dataStyle;
          });
        });
      }
      
      // √úr√ºn sayfasƒ± s√ºtun geni≈ülikleri
      urunSheet.columns = [
        { width: 15 }, { width: 40 }, { width: 12 }, { width: 12 }, { width: 12 }, { width: 15 }, { width: 12 }
      ];
      
      // Destek unsurlarƒ± sayfasƒ±
      const destekSheet = workbook.addWorksheet('Destek Unsurlarƒ±');
      
      // Destek sayfasƒ± ba≈ülƒ±ƒüƒ±
      destekSheet.mergeCells('A1:D1');
      destekSheet.getCell('A1').value = 'DESTEK UNSURLARI';
      destekSheet.getCell('A1').style = headerStyle;
      
      // Destek tablosu ba≈ülƒ±klarƒ±
      const destekHeaders = ['Sƒ±ra', 'Destek Unsuru', '≈ûartlarƒ±', 'A√ßƒ±klama'];
      destekHeaders.forEach((header, index) => {
        const cell = destekSheet.getCell(3, index + 1);
        cell.value = header;
        cell.style = subHeaderStyle;
      });
      
      // Destek verileri
      if (tesvik.destekUnsurlari && tesvik.destekUnsurlari.length > 0) {
        tesvik.destekUnsurlari.forEach((destek, index) => {
          const rowIndex = index + 4;
          const destekData = [
            index + 1,
            destek.destekUnsuru || '',
            destek.sarti || '',
            destek.aciklama || ''
          ];
          
          destekData.forEach((value, colIndex) => {
            const cell = destekSheet.getCell(rowIndex, colIndex + 1);
            cell.value = value;
            cell.style = dataStyle;
          });
        });
      }
      
      // Destek sayfasƒ± s√ºtun geni≈ülikleri
      destekSheet.columns = [
        { width: 8 }, { width: 50 }, { width: 40 }, { width: 40 }
      ];
      
      // Excel dosyasƒ±nƒ± buffer olarak olu≈ütur
      const excelBuffer = await workbook.xlsx.writeBuffer();
      
      // Response headers ayarla
      const fileName = `tesvik_${tesvik.gmId || tesvik.tesvikId}_${new Date().toISOString().split('T')[0]}.xlsx`;
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.setHeader('Content-Length', excelBuffer.length);
      
      // Excel dosyasƒ±nƒ± g√∂nder
      res.send(excelBuffer);
      
      console.log(`‚úÖ Excel export tamamlandƒ±: ${fileName}`);
      
    } catch (error) {
      console.error('‚ùå Excel export hatasƒ±:', error);
      res.status(500).json({
        success: false,
        message: 'Excel export sƒ±rasƒ±nda hata olu≈ütu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
      });
    }
  },
  
  // üìÑ PDF EXPORT - Excel benzeri g√∂rsel PDF √ßƒ±ktƒ±
  exportTesvikPDF: async (req, res) => {
    try {
      const { id } = req.params;
      const { includeColors = true } = req.query;
      
      console.log(`üìÑ PDF export ba≈ülatƒ±lƒ±yor: ${id}`);
      
      // Te≈üvik verisini getir
      const tesvik = await Tesvik.findById(id)
        .populate('firma', 'unvan vergiNo')
        .lean();
        
      if (!tesvik) {
        return res.status(404).json({ success: false, message: 'Te≈üvik bulunamadƒ±' });
      }
      
      // PDF document olu≈ütur
      const doc = new PDFDocument({ margin: 50, size: 'A4' });
      
      // Response headers ayarla
      const fileName = `tesvik_${tesvik.gmId || tesvik.tesvikId}_${new Date().toISOString().split('T')[0]}.pdf`;
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      
      // PDF stream'i response'a pipe et
      doc.pipe(res);
      
      // Ba≈ülƒ±k
      doc.fontSize(20).font('Helvetica-Bold').text('TE≈ûVƒ∞K BELGESI', { align: 'center' });
      doc.moveDown(2);
      
      // Temel bilgiler
      doc.fontSize(12).font('Helvetica-Bold').text('TEMEL Bƒ∞LGƒ∞LER', { underline: true });
      doc.moveDown(0.5);
      doc.font('Helvetica');
      doc.text(`GM ID: ${tesvik.gmId || 'Belirtilmemi≈ü'}`);
      doc.text(`Te≈üvik ID: ${tesvik.tesvikId || 'Belirtilmemi≈ü'}`);
      doc.text(`Firma: ${tesvik.firma?.unvan || 'Belirtilmemi≈ü'}`);
      doc.text(`Vergi No: ${tesvik.firma?.vergiNo || 'Belirtilmemi≈ü'}`);
      doc.moveDown(1);
      
      // K√ºnye bilgileri
      doc.font('Helvetica-Bold').text('K√úNYE Bƒ∞LGƒ∞LERƒ∞', { underline: true });
      doc.moveDown(0.5);
      doc.font('Helvetica');
      doc.text(`Karar Tarihi: ${tesvik.kunyeBilgileri?.kararTarihi || 'Belirtilmemi≈ü'}`);
      doc.text(`Karar Sayƒ±sƒ±: ${tesvik.kunyeBilgileri?.kararSayisi || 'Belirtilmemi≈ü'}`);
      doc.text(`Ba≈üvuru Tarihi: ${tesvik.kunyeBilgileri?.basvuruTarihi || 'Belirtilmemi≈ü'}`);
      doc.text(`Dosya No: ${tesvik.kunyeBilgileri?.dosyaNo || 'Belirtilmemi≈ü'}`);
      doc.text(`Proje Bedeli: ${tesvik.kunyeBilgileri?.projeBedeli || 0} TL`);
      doc.text(`Te≈üvik Miktarƒ±: ${tesvik.kunyeBilgileri?.tesvikMiktari || 0} TL`);
      doc.moveDown(1);
      
      // Finansal bilgiler
      doc.font('Helvetica-Bold').text('Fƒ∞NANSAL Bƒ∞LGƒ∞LER', { underline: true });
      doc.moveDown(0.5);
      doc.font('Helvetica');
      doc.text(`Toplam Sabit Yatƒ±rƒ±m: ${tesvik.finansalBilgiler?.toplamSabitYatirimTutari || 0} TL`);
      doc.text(`Arazi/Arsa Bedeli: ${tesvik.finansalBilgiler?.araziArsaBedeli || 0} TL`);
      doc.moveDown(0.5);
      
      // Makine te√ßhizat TL
      doc.text(`Yerli Makine: ${tesvik.finansalBilgiler?.makineTe√ßhizatGiderleri?.tl?.yerliMakine || 0} TL`);
      doc.text(`ƒ∞thal Makine: ${tesvik.finansalBilgiler?.makineTe√ßhizatGiderleri?.tl?.ithalMakine || 0} TL`);
      doc.text(`Toplam Makine (TL): ${tesvik.finansalBilgiler?.makineTe√ßhizatGiderleri?.tl?.toplamMakineTe√ß || 0} TL`);
      doc.moveDown(0.5);
      
      // Makine te√ßhizat USD
      doc.text(`ƒ∞thal Makine (USD): ${tesvik.finansalBilgiler?.makineTe√ßhizatGiderleri?.dolar?.ithalMakine || 0} USD`);
      doc.text(`Toplam ƒ∞thal (USD): ${tesvik.finansalBilgiler?.makineTe√ßhizatGiderleri?.dolar?.toplamIthalMakine || 0} USD`);
      doc.moveDown(1);
      
      // Yeni sayfa - √úr√ºn bilgileri
      doc.addPage();
      doc.fontSize(16).font('Helvetica-Bold').text('√úR√úN Bƒ∞LGƒ∞LERƒ∞ (U$97 KODLARI)', { align: 'center' });
      doc.moveDown(1);
      
      if (tesvik.urunBilgileri && tesvik.urunBilgileri.length > 0) {
        // Tablo ba≈ülƒ±klarƒ±
        doc.fontSize(10).font('Helvetica-Bold');
        const tableTop = doc.y;
        const colWidths = [60, 150, 60, 60, 60, 80, 60];
        let currentX = 50;
        
        ['Kod', 'A√ßƒ±klama', 'Mevcut', 'ƒ∞lave', 'Toplam', 'Kapasite', 'Birim'].forEach((header, i) => {
          doc.text(header, currentX, tableTop, { width: colWidths[i], align: 'center' });
          currentX += colWidths[i];
        });
        
        doc.moveDown(0.5);
        
        // Tablo verileri
        doc.font('Helvetica');
        tesvik.urunBilgileri.forEach((urun, index) => {
          if (doc.y > 700) { // Sayfa sonu kontrol√º
            doc.addPage();
          }
          
          currentX = 50;
          const rowY = doc.y;
          
          [
            urun.kod || '',
            urun.aciklama || '',
            urun.mevcut || 0,
            urun.ilave || 0,
            urun.toplam || 0,
            urun.kapsite || 0,
            urun.kapasite_birimi || ''
          ].forEach((value, i) => {
            doc.text(String(value), currentX, rowY, { width: colWidths[i], align: 'center' });
            currentX += colWidths[i];
          });
          
          doc.moveDown(0.3);
        });
      }
      
      // Yeni sayfa - Destek unsurlarƒ±
      doc.addPage();
      doc.fontSize(16).font('Helvetica-Bold').text('DESTEK UNSURLARI', { align: 'center' });
      doc.moveDown(1);
      
      if (tesvik.destekUnsurlari && tesvik.destekUnsurlari.length > 0) {
        tesvik.destekUnsurlari.forEach((destek, index) => {
          if (doc.y > 700) { // Sayfa sonu kontrol√º
            doc.addPage();
          }
          
          doc.fontSize(12).font('Helvetica-Bold').text(`${index + 1}. ${destek.destekUnsuru || 'Belirtilmemi≈ü'}`);
          doc.fontSize(10).font('Helvetica');
          doc.text(`≈ûartlarƒ±: ${destek.sarti || 'Belirtilmemi≈ü'}`);
          if (destek.aciklama) {
            doc.text(`A√ßƒ±klama: ${destek.aciklama}`);
          }
          doc.moveDown(0.5);
        });
      }
      
      // PDF'i sonlandƒ±r
      doc.end();
      
      console.log(`‚úÖ PDF export tamamlandƒ±: ${fileName}`);
      
    } catch (error) {
      console.error('‚ùå PDF export hatasƒ±:', error);
      res.status(500).json({
        success: false,
        message: 'PDF export sƒ±rasƒ±nda hata olu≈ütu',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
      });
    }
  },
  getTesvikTimeline: async (req, res) => {
    try {
      const { id } = req.params;
      
      // Te≈üvik kaydƒ±nƒ± bul
      const tesvik = await Tesvik.findById(id).populate('revizyonlar.user', 'name email');
      
      if (!tesvik) {
        return res.status(404).json({
          success: false,
          message: 'Te≈üvik kaydƒ± bulunamadƒ±'
        });
      }
      
      // Revizyon ge√ßmi≈üini hazƒ±rla
      const timeline = [];
      
      // ƒ∞lk olu≈üturma kaydƒ±
      timeline.push({
        _id: 'created',
        type: 'created',
        title: 'Te≈üvik Kaydƒ± Olu≈üturuldu',
        description: `${tesvik.tesvikId} numaralƒ± te≈üvik kaydƒ± olu≈üturuldu`,
        user: tesvik.olusturan,
        createdAt: tesvik.createdAt,
        changes: []
      });
      
      // Revizyonlarƒ± ekle
      if (tesvik.revizyonlar && tesvik.revizyonlar.length > 0) {
        tesvik.revizyonlar.forEach(revizyon => {
          timeline.push({
            _id: revizyon._id,
            type: revizyon.type || 'updated',
            title: revizyon.baslik || 'Revizyon',
            description: revizyon.aciklama,
            reason: revizyon.sebep,
            notes: revizyon.notlar,
            user: revizyon.user,
            createdAt: revizyon.tarih,
            changes: revizyon.degisikenAlanlar || []
          });
        });
      }
      
      // Durum deƒüi≈üikliklerini ekle
      if (tesvik.durumGecmisi && tesvik.durumGecmisi.length > 0) {
        tesvik.durumGecmisi.forEach(durum => {
          timeline.push({
            _id: `status_${durum._id}`,
            type: 'status_changed',
            title: 'Durum Deƒüi≈üikliƒüi',
            description: `Durum "${durum.eskiDurum}" den "${durum.yeniDurum}" e deƒüi≈ütirildi`,
            reason: durum.sebep,
            user: durum.degistiren,
            createdAt: durum.tarih,
            changes: [{
              field: 'Durum',
              oldValue: durum.eskiDurum,
              newValue: durum.yeniDurum
            }]
          });
        });
      }
      
      // Tarihe g√∂re sƒ±rala (en yeni en √ºstte)
      timeline.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      res.json({
        success: true,
        data: timeline
      });
      
    } catch (error) {
      console.error('üö® Timeline hatasƒ±:', error);
      res.status(500).json({
        success: false,
        message: 'Timeline y√ºklenirken hata olu≈ütu'
      });
    }
  },
  getDestekUnsurlari: (req, res) => {
    res.status(501).json({ success: false, message: 'Destek unsurlarƒ± yakƒ±nda gelecek' });
  },
  getTesvikAnalytics: (req, res) => {
    res.status(501).json({ success: false, message: 'Analytics yakƒ±nda gelecek' });
  },
  getTesvikFormTemplate: getTesvikFormTemplate,
  getNextGmId: getNextGmId,
  addNewOption: addNewOption,
  getOptionsForType: getOptionsForType,
  getTesvikRevisions: getTesvikRevisions,
  
  // üéØ Dƒ∞NAMƒ∞K VERƒ∞ Y√ñNETƒ∞Mƒ∞ API'LERƒ∞
  getDynamicDestekUnsurlari: getDynamicDestekUnsurlari,
  addDestekUnsuru: addDestekUnsuru,
  getDynamicDestekSartlari: getDynamicDestekSartlari,
  addDestekSarti: addDestekSarti,
  getDynamicOzelSartlar: getDynamicOzelSartlar,
  addOzelSart: addOzelSart,
  getDynamicOzelSartNotlari: getDynamicOzelSartNotlari,
  addOzelSartNotu: addOzelSartNotu
};
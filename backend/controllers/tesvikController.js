// üèÜ TE≈ûVƒ∞K CONTROLLER - ENTERPRISE EDITION
// Excel + Word ≈üablonu analizine g√∂re tam kapsamlƒ± controller
// Mali hesaplamalar + renk kodlamasƒ± + durum y√∂netimi + revizyon takibi

const Tesvik = require('../models/Tesvik');
const Firma = require('../models/Firma');
const Activity = require('../models/Activity');
const Notification = require('../models/Notification');
const { validationResult } = require('express-validator');
const XLSX = require('xlsx');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

// üìù YENƒ∞ TE≈ûVƒ∞K OLU≈ûTUR
const createTesvik = async (req, res) => {
  try {
    // Validation kontrol√º
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Girilen bilgilerde hatalar var',
        errors: errors.array()
      });
    }

    const tesvikData = req.body;
    
    // Firma kontrol√º
    const firma = await Firma.findById(tesvikData.firma);
    if (!firma) {
      return res.status(404).json({
        success: false,
        message: 'Belirtilen firma bulunamadƒ±'
      });
    }

    // Yeni te≈üvik olu≈ütur
    const tesvik = new Tesvik({
      ...tesvikData,
      firmaId: firma.firmaId,
      yatirimciUnvan: tesvikData.yatirimciUnvan || firma.tamUnvan,
      olusturanKullanici: req.user._id,
      sonGuncelleyen: req.user._id
    });

    // Mali hesaplamalarƒ± otomatik g√ºncelle
    tesvik.updateMaliHesaplamalar();
    
    // Durum rengini g√ºncelle
    tesvik.updateDurumRengi();

    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'create',
      category: 'tesvik',
      title: 'Yeni Te≈üvik Olu≈üturuldu',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik olu≈üturuldu`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        after: tesvik.toSafeJSON()
      }
    });

    // Bildirim olu≈ütur
    await Notification.createNotification({
      title: 'Yeni Te≈üvik Olu≈üturuldu',
      message: `${tesvik.tesvikId} numaralƒ± te≈üvik ba≈üarƒ±yla olu≈üturuldu`,
      type: 'success',
      category: 'tesvik',
      userId: req.user._id,
      relatedEntity: {
        entityType: 'tesvik',
        entityId: tesvik._id
      }
    });

    // Populate i≈ülemi
    await tesvik.populate('firma', 'tamUnvan firmaId vergiNoTC');
    await tesvik.populate('olusturanKullanici', 'adSoyad email');

    res.status(201).json({
      success: true,
      message: 'Te≈üvik ba≈üarƒ±yla olu≈üturuldu',
      data: tesvik.toSafeJSON()
    });

  } catch (error) {
    console.error('üö® Te≈üvik olu≈üturma hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik olu≈üturulurken hata olu≈ütu',
      error: error.message
    });
  }
};

// üìã TE≈ûVƒ∞K Lƒ∞STESƒ∞ (Advanced Filtering + Pagination)
const getTesvikler = async (req, res) => {
  try {
    const {
      sayfa = 1,
      limit = 20,
      durum,
      il,
      firma,
      siraBy = 'createdAt',
      siraSekli = 'desc',
      tarihBaslangic,
      tarihBitis,
      destekSinifi,
      search
    } = req.query;

    // Build query
    const query = { aktif: true };
    
    if (durum) query['durumBilgileri.genelDurum'] = durum;
    if (il) query['yatirimBilgileri.yerinIl'] = il.toUpperCase();
    if (firma) query.firma = firma;
    if (destekSinifi) query['yatirimBilgileri.destekSinifi'] = destekSinifi;
    
    // Tarih filtresi
    if (tarihBaslangic || tarihBitis) {
      query.createdAt = {};
      if (tarihBaslangic) query.createdAt.$gte = new Date(tarihBaslangic);
      if (tarihBitis) query.createdAt.$lte = new Date(tarihBitis);
    }
    
    // Arama filtresi
    if (search) {
      const searchRegex = new RegExp(search, 'i');
      query.$or = [
        { tesvikId: searchRegex },
        { gmId: searchRegex },
        { yatirimciUnvan: searchRegex },
        { 'yatirimBilgileri.yatirimKonusu': searchRegex }
      ];
    }

    // Sort object
    const sortObj = {};
    sortObj[siraBy] = siraSekli === 'desc' ? -1 : 1;

    const skip = (parseInt(sayfa) - 1) * parseInt(limit);

    const [tesvikler, toplam] = await Promise.all([
      Tesvik.find(query)
        .populate('firma', 'tamUnvan firmaId vergiNoTC firmaIl')
        .populate('olusturanKullanici', 'adSoyad email')
        .populate('sonGuncelleyen', 'adSoyad email')
        .sort(sortObj)
        .skip(skip)
        .limit(parseInt(limit))
        .lean(),
      
      Tesvik.countDocuments(query)
    ]);

    res.json({
      success: true,
      message: 'Te≈üvikler ba≈üarƒ±yla getirildi',
      data: {
        tesvikler,
        pagination: {
          currentPage: parseInt(sayfa),
          totalPages: Math.ceil(toplam / parseInt(limit)),
          totalCount: toplam,
          hasNext: skip + parseInt(limit) < toplam,
          hasPrev: parseInt(sayfa) > 1
        }
      }
    });

  } catch (error) {
    console.error('üö® Te≈üvik liste hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvikler getirilemedi',
      error: error.message
    });
  }
};

// üëÅÔ∏è TEKƒ∞L TE≈ûVƒ∞K DETAYI
const getTesvik = async (req, res) => {
  try {
    const { id } = req.params;
    
    // ID veya TesvikId ile arama
    let tesvik;
    if (id.match(/^[0-9a-fA-F]{24}$/)) {
      // MongoDB ObjectId
      tesvik = await Tesvik.findById(id);
    } else {
      // TesvikId (TES2024001 format)
      tesvik = await Tesvik.findByTesvikId(id);
    }

    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Populate i≈ülemleri
    await tesvik.populate('firma', 'tamUnvan firmaId vergiNoTC firmaIl firmaIlce adres kepAdresi');
    await tesvik.populate('olusturanKullanici', 'adSoyad email rol');
    await tesvik.populate('sonGuncelleyen', 'adSoyad email');
    await tesvik.populate('revizyonlar.yapanKullanici', 'adSoyad email');

    // Activity log
    await Activity.logActivity({
      action: 'view',
      category: 'tesvik',
      title: 'Te≈üvik G√∂r√ºnt√ºlendi',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik detayƒ± g√∂r√ºnt√ºlendi`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      }
    });

    res.json({
      success: true,
      message: 'Te≈üvik detayƒ± getirildi',
      data: tesvik.toSafeJSON()
    });

  } catch (error) {
    console.error('üö® Te≈üvik detay hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik detayƒ± getirilemedi',
      error: error.message
    });
  }
};

// ‚úèÔ∏è TE≈ûVƒ∞K G√úNCELLEME
const updateTesvik = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    // Validation kontrol√º
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: 'Girilen bilgilerde hatalar var',
        errors: errors.array()
      });
    }

    const tesvik = await Tesvik.findById(id);
    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Deƒüi≈üiklikleri kaydet (revizyon i√ßin)
    const eskiVeri = tesvik.toSafeJSON();
    
    // G√ºncelleme verisini uygula
    Object.assign(tesvik, updateData);
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = updateData.guncellemeNotu || '';

    // Mali hesaplamalarƒ± otomatik g√ºncelle
    tesvik.updateMaliHesaplamalar();
    
    // Durum deƒüi≈ümi≈üse rengi g√ºncelle
    if (updateData.durumBilgileri?.genelDurum) {
      tesvik.updateDurumRengi();
    }

    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'update',
      category: 'tesvik',
      title: 'Te≈üvik G√ºncellendi',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik g√ºncellendi`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        before: eskiVeri,
        after: tesvik.toSafeJSON()
      }
    });

    await tesvik.populate('firma', 'tamUnvan firmaId');
    await tesvik.populate('sonGuncelleyen', 'adSoyad email');

    res.json({
      success: true,
      message: 'Te≈üvik ba≈üarƒ±yla g√ºncellendi',
      data: tesvik.toSafeJSON()
    });

  } catch (error) {
    console.error('üö® Te≈üvik g√ºncelleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik g√ºncellenirken hata olu≈ütu',
      error: error.message
    });
  }
};

// üéØ DURUM G√úNCELLEME (Excel Renk Kodlamasƒ±)
const updateTesvikDurum = async (req, res) => {
  try {
    const { id } = req.params;
    const { yeniDurum, aciklama, kullaniciNotu } = req.body;

    const tesvik = await Tesvik.findById(id);
    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    const eskiDurum = tesvik.durumBilgileri.genelDurum;
    
    // Durum g√ºncelle
    tesvik.durumBilgileri.genelDurum = yeniDurum;
    tesvik.durumBilgileri.durumAciklamasi = aciklama || '';
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = kullaniciNotu || `Durum g√ºncellendi: ${eskiDurum} ‚Üí ${yeniDurum}`;
    
    // Renk kodlamasƒ±nƒ± g√ºncelle
    tesvik.updateDurumRengi();
    
    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'update',
      category: 'tesvik',
      title: 'Te≈üvik Durum G√ºncellendi',
      description: `${tesvik.tesvikId} durumu g√ºncellendi: ${eskiDurum} ‚Üí ${yeniDurum}`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      },
      changes: {
        fields: [{
          field: 'durumBilgileri.genelDurum',
          oldValue: eskiDurum,
          newValue: yeniDurum
        }]
      }
    });

    // Bildirim olu≈ütur
    await Notification.createNotification({
      title: 'Te≈üvik Durum G√ºncellendi',
      message: `${tesvik.tesvikId} durumu: ${yeniDurum}`,
      type: yeniDurum === 'onaylandi' ? 'success' : yeniDurum === 'reddedildi' ? 'error' : 'info',
      category: 'tesvik',
      userId: req.user._id,
      relatedEntity: {
        entityType: 'tesvik',
        entityId: tesvik._id
      }
    });

    res.json({
      success: true,
      message: 'Te≈üvik durumu ba≈üarƒ±yla g√ºncellendi',
      data: {
        tesvikId: tesvik.tesvikId,
        eskiDurum,
        yeniDurum,
        durumRengi: tesvik.durumBilgileri.durumRengi,
        guncellenmeTarihi: tesvik.durumBilgileri.sonDurumGuncelleme
      }
    });

  } catch (error) {
    console.error('üö® Durum g√ºncelleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Durum g√ºncellenirken hata olu≈ütu',
      error: error.message
    });
  }
};

// üìù REVƒ∞ZYON EKLEME
const addTesvikRevizyon = async (req, res) => {
  try {
    const { id } = req.params;
    const { revizyonSebebi, degisikenAlanlar, yeniDurum, kullaniciNotu } = req.body;

    const tesvik = await Tesvik.findById(id);
    if (!tesvik || !tesvik.aktif) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Revizyon ekle
    tesvik.addRevizyon({
      revizyonSebebi,
      degisikenAlanlar: degisikenAlanlar || [],
      yapanKullanici: req.user._id,
      yeniDurum,
      kullaniciNotu
    });

    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = kullaniciNotu || `Revizyon eklendi: ${revizyonSebebi}`;

    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'update',
      category: 'tesvik',
      title: 'Te≈üvik Revizyonu',
      description: `${tesvik.tesvikId} revizyonu eklendi: ${revizyonSebebi}`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      }
    });

    res.json({
      success: true,
      message: 'Revizyon ba≈üarƒ±yla eklendi',
      data: {
        tesvikId: tesvik.tesvikId,
        revizyonNo: tesvik.revizyonlar.length,
        revizyonSebebi,
        eklenmeTarihi: new Date()
      }
    });

  } catch (error) {
    console.error('üö® Revizyon ekleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Revizyon eklenirken hata olu≈ütu',
      error: error.message
    });
  }
};

// üí∞ MALƒ∞ HESAPLAMALAR OTOMATƒ∞K HESAPLAMA
const calculateMaliHesaplamalar = async (req, res) => {
  try {
    const {
      sl = 0, sm = 0, // Maliyetlenen
      et = 0, eu = 0, ev = 0, ew = 0, ex = 0, ey = 0, // Yatƒ±rƒ±m hesaplamalarƒ±
      fb = 0, fc = 0, fe = 0, ff = 0, // Makina te√ßhizat
      fh = 0, fi = 0, // Finansman
      mevcutKisi = 0, ilaveKisi = 0 // ƒ∞stihdam
    } = req.body;

    // Otomatik hesaplamalar (Excel form√ºlleri)
    const hesaplamalar = {
      maliyetlenen: {
        sl: parseFloat(sl),
        sm: parseFloat(sm),
        sn: parseFloat(sl) * parseFloat(sm) // SL * SM
      },
      
      yatirimHesaplamalari: {
        et: parseFloat(et),
        eu: parseFloat(eu),
        ev: parseFloat(ev),
        ew: parseFloat(ew),
        ex: parseFloat(ex),
        ey: parseFloat(ey),
        ez: parseFloat(et) + parseFloat(eu) + parseFloat(ev) + parseFloat(ew) + parseFloat(ex) + parseFloat(ey) // TOPLAM
      },
      
      makinaTechizat: {
        ithalMakina: parseFloat(fb), // FB
        yerliMakina: parseFloat(fc),  // FC
        toplamMakina: parseFloat(fb) + parseFloat(fc), // FB + FC
        yeniMakina: parseFloat(fe),   // FE
        kullanimisMakina: parseFloat(ff), // FF
        toplamYeniMakina: parseFloat(fe) + parseFloat(ff) // FE + FF
      },
      
      finansman: {
        yabanciKaynak: parseFloat(fh), // FH
        ozKaynak: parseFloat(fi),      // FI
        toplamFinansman: parseFloat(fh) + parseFloat(fi) // FH + FI
      },
      
      istihdam: {
        mevcutKisi: parseInt(mevcutKisi),
        ilaveKisi: parseInt(ilaveKisi),
        toplamKisi: parseInt(mevcutKisi) + parseInt(ilaveKisi)
      },
      
      hesaplamaTarihi: new Date()
    };

    res.json({
      success: true,
      message: 'Mali hesaplamalar tamamlandƒ±',
      data: hesaplamalar,
      form√ºller: {
        'SN = SL * SM': `${sl} * ${sm} = ${hesaplamalar.maliyetlenen.sn}`,
        'EZ = ET+EU+EV+EW+EX+EY': `${et}+${eu}+${ev}+${ew}+${ex}+${ey} = ${hesaplamalar.yatirimHesaplamalari.ez}`,
        'Toplam Makina = FB + FC': `${fb} + ${fc} = ${hesaplamalar.makinaTechizat.toplamMakina}`,
        'Toplam Finansman = FH + FI': `${fh} + ${fi} = ${hesaplamalar.finansman.toplamFinansman}`,
        'Toplam Ki≈üi = Mevcut + ƒ∞lave': `${mevcutKisi} + ${ilaveKisi} = ${hesaplamalar.istihdam.toplamKisi}`
      }
    });

  } catch (error) {
    console.error('üö® Mali hesaplama hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Mali hesaplamalar yapƒ±lƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üé® DURUM RENKLERƒ∞ (Excel Renk Kodlama Sistemi)
const getDurumRenkleri = async (req, res) => {
  try {
    const renkKodlari = {
      'taslak': { renk: 'gri', hex: '#6B7280', aciklama: 'Taslak - Hen√ºz tamamlanmamƒ±≈ü' },
      'hazirlaniyor': { renk: 'sari', hex: '#F59E0B', aciklama: 'Hazƒ±rlanƒ±yor - ƒ∞≈ülem devam ediyor' },
      'ba≈üvuru_yapildi': { renk: 'mavi', hex: '#3B82F6', aciklama: 'Ba≈üvuru Yapƒ±ldƒ± - Deƒüerlendirme bekliyor' },
      'inceleniyor': { renk: 'turuncu', hex: '#F97316', aciklama: 'ƒ∞nceleniyor - Aktif deƒüerlendirme' },
      'ek_belge_istendi': { renk: 'sari', hex: '#F59E0B', aciklama: 'Ek Belge ƒ∞stendi - Eksik evrak' },
      'revize_talep_edildi': { renk: 'kirmizi', hex: '#EF4444', aciklama: 'Revize Talep Edildi - D√ºzeltme gerekli' },
      'onay_bekliyor': { renk: 'turuncu', hex: '#F97316', aciklama: 'Onay Bekliyor - Final a≈üamasƒ±' },
      'onaylandi': { renk: 'yesil', hex: '#10B981', aciklama: 'Onaylandƒ± - Ba≈üarƒ±yla tamamlandƒ±' },
      'reddedildi': { renk: 'kirmizi', hex: '#EF4444', aciklama: 'Reddedildi - Ba≈üvuru kabul edilmedi' },
      'iptal_edildi': { renk: 'gri', hex: '#6B7280', aciklama: 'ƒ∞ptal Edildi - ƒ∞≈ülem durduruldu' }
    };

    res.json({
      success: true,
      message: 'Durum renk kodlarƒ± getirildi',
      data: renkKodlari
    });

  } catch (error) {
    console.error('üö® Renk kodlarƒ± hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Renk kodlarƒ± getirilemedi',
      error: error.message
    });
  }
};

// üìä TE≈ûVƒ∞K ƒ∞STATƒ∞STƒ∞KLERƒ∞
const getTesvikStats = async (req, res) => {
  try {
    const stats = await Tesvik.getStatistics();
    
    res.json({
      success: true,
      message: 'Te≈üvik istatistikleri getirildi',
      data: stats
    });

  } catch (error) {
    console.error('üö® ƒ∞statistik hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'ƒ∞statistikler getirilemedi',
      error: error.message
    });
  }
};

// üîç TE≈ûVƒ∞K ARAMA
const searchTesvikler = async (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q || q.length < 2) {
      return res.status(400).json({
        success: false,
        message: 'Arama terimi en az 2 karakter olmalƒ±dƒ±r'
      });
    }

    const tesvikler = await Tesvik.searchTesvikler(q)
      .populate('firma', 'tamUnvan firmaId')
      .select('tesvikId gmId yatirimciUnvan durumBilgileri createdAt')
      .limit(50);

    res.json({
      success: true,
      message: `"${q}" i√ßin ${tesvikler.length} sonu√ß bulundu`,
      data: tesvikler
    });

  } catch (error) {
    console.error('üö® Arama hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Arama yapƒ±lƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üóëÔ∏è TE≈ûVƒ∞K Sƒ∞LME (Soft Delete)
const deleteTesvik = async (req, res) => {
  try {
    const { id } = req.params;

    const tesvik = await Tesvik.findById(id);
    if (!tesvik) {
      return res.status(404).json({
        success: false,
        message: 'Te≈üvik bulunamadƒ±'
      });
    }

    // Soft delete
    tesvik.aktif = false;
    tesvik.sonGuncelleyen = req.user._id;
    tesvik.sonGuncellemeNotlari = 'Te≈üvik silindi';
    
    await tesvik.save();

    // Activity log
    await Activity.logActivity({
      action: 'delete',
      category: 'tesvik',
      title: 'Te≈üvik Silindi',
      description: `${tesvik.tesvikId} numaralƒ± te≈üvik silindi`,
      targetResource: {
        type: 'tesvik',
        id: tesvik._id,
        name: tesvik.yatirimciUnvan,
        tesvikId: tesvik.tesvikId
      },
      user: {
        id: req.user._id,
        name: req.user.adSoyad,
        email: req.user.email,
        role: req.user.rol
      }
    });

    res.json({
      success: true,
      message: 'Te≈üvik ba≈üarƒ±yla silindi'
    });

  } catch (error) {
    console.error('üö® Te≈üvik silme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Te≈üvik silinirken hata olu≈ütu',
      error: error.message
    });
  }
};

// SONRAKƒ∞ TE≈ûVƒ∞K ID'Yƒ∞ AL
const getNextTesvikId = async (req, res) => {
  try {
    const year = new Date().getFullYear();
    const lastTesvik = await Tesvik.findOne(
      { tesvikId: new RegExp(`^TES${year}`) },
      { tesvikId: 1 },
      { sort: { tesvikId: -1 } }
    );
    
    let nextNumber = 1;
    if (lastTesvik && lastTesvik.tesvikId) {
      const currentNumber = parseInt(lastTesvik.tesvikId.slice(7));
      nextNumber = currentNumber + 1;
    }
    
    const nextTesvikId = `TES${year}${nextNumber.toString().padStart(4, '0')}`;

    res.json({
      success: true,
      message: 'Sonraki te≈üvik ID getirildi',
      data: {
        nextTesvikId,
        year,
        sequenceNumber: nextNumber
      }
    });

  } catch (error) {
    console.error('üö® Next ID hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Sonraki ID alƒ±nƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üÜî SONRAKƒ∞ GM ID'Yƒ∞ AL - OTOMATIK GENERATION
const getNextGmId = async (req, res) => {
  try {
    console.log('üîç Finding next available GM ID...');
    
    // Son GM ID'yi bul
    const lastTesvik = await Tesvik.findOne(
      { gmId: { $exists: true, $ne: '' } },
      { gmId: 1 },
      { sort: { gmId: -1 } }
    );
    
    let nextNumber = 1;
    
    if (lastTesvik && lastTesvik.gmId) {
      // GM ID format: GM2024001, GM2024002, etc.
      const match = lastTesvik.gmId.match(/^GM(\d{4})(\d{3})$/);
      if (match) {
        const year = parseInt(match[1]);
        const currentNumber = parseInt(match[2]);
        
        // Aynƒ± yƒ±l i√ßindeyse sequence artƒ±r, yoksa 1'den ba≈üla
        if (year === new Date().getFullYear()) {
          nextNumber = currentNumber + 1;
        } else {
          nextNumber = 1;
        }
      }
    }
    
    const currentYear = new Date().getFullYear();
    const nextGmId = `GM${currentYear}${nextNumber.toString().padStart(3, '0')}`;
    
    console.log('‚úÖ Next available GM ID:', nextGmId);

    res.json({
      success: true,
      message: 'Sonraki GM ID getirildi',
      data: {
        nextGmId,
        year: currentYear,
        sequenceNumber: nextNumber,
        format: 'GM + Year + 3 digit sequence'
      }
    });

  } catch (error) {
    console.error('üö® Next GM ID hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Sonraki GM ID alƒ±nƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üìã TE≈ûVƒ∞K FORM TEMPLATE VERƒ∞LERƒ∞Nƒ∞ GETƒ∞R
const getTesvikFormTemplate = async (req, res) => {
  try {
    console.log('üìã Loading template data for te≈üvik form...');

    // Paralel sorgular ile verileri al
    const [
      firmalar,
      nextGmId,
      nextTesvikId,
      durumlar,
      destekSiniflari,
      iller,
      dayandigiKanunlar,
      belgeDurumlari,
      yatirimTipleri,
      kapasiteBirimleri,
      osbOptions,
      yatirimKonusuKategorileri,
      u97Kodlari,
      destekUnsurlariOptions,
      destekSartlariOptions,
      ozelSartKisaltmalari,
      ozelSartNotlari
    ] = await Promise.all([
      // T√ºm aktif firmalarƒ± getir - LIMIT YOK!
      Firma.find({ aktif: true })
        .select('firmaId tamUnvan vergiNoTC firmaIl')
        .sort({ firmaId: 1 })
        .lean(),

      // Sonraki GM ID
      getNextGmIdValue(),

      // Sonraki Te≈üvik ID
      getNextTesvikIdValue(),

      // Durum listesi
      getDurumOptions(),

      // Destek sƒ±nƒ±flarƒ±
      getDestekSiniflariOptions(),

      // ƒ∞ller listesi
      getIllerOptions(),

      // Dayandƒ±ƒüƒ± Kanunlar
      getDayandigiKanunOptions(),

      // Belge Durumlarƒ±
      getBelgeDurumOptions(),

      // Yatƒ±rƒ±m Tipleri (Cinsi)
      getYatirimTipiOptions(),

      // Kapasite Birimleri
      getKapasiteBirimleriOptions(),

      // OSB Se√ßenekleri
      getOsbOptions(),

      // Yatƒ±rƒ±m Konusu Kategorileri
      getYatirimKonusuKategorileri(),

      // U$97 Kodlarƒ±
      getU97KodlariOptions(),

      // Destek Unsurlarƒ± Se√ßenekleri
      getDestekUnsurlariOptions(),

      // Destek ≈ûartlarƒ± Se√ßenekleri
      getDestekSartlariOptions(),

      // √ñzel ≈ûart Kƒ±saltmalarƒ± - CSV'den
      getOzelSartKisaltmalariOptions(),

      // √ñzel ≈ûart Notlarƒ±
      getOzelSartNotlariOptions()
    ]);

    console.log(`‚úÖ Template data loaded: ${firmalar.length} firmalar, GM ID: ${nextGmId}, Te≈üvik ID: ${nextTesvikId}`);

    res.json({
      success: true,
      message: 'Template verileri ba≈üarƒ±yla getirildi',
      data: {
        firmalar,
        nextGmId,
        nextTesvikId,
        durumlar,
        destekSiniflari,
        iller,
        dayandigiKanunlar,
        belgeDurumlari,
        yatirimTipleri,
        kapasiteBirimleri,
        osbOptions,
        yatirimKonusuKategorileri,
        u97Kodlari,
        destekUnsurlariOptions,
        destekSartlariOptions,
        ozelSartKisaltmalari,
        ozelSartNotlari,
        urunKodlari: getUrunKodlariTemplate(), // Excel U$97 kodlarƒ±
        destekUnsurlari: getDestekUnsurlariTemplate(),
        ozelSartlar: getOzelSartlarTemplate(),
        kunyeBilgileri: getKunyeBilgileriTemplate()
      }
    });

  } catch (error) {
    console.error('üö® Template data hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Template verileri y√ºklenirken hata olu≈ütu',
      error: error.message
    });
  }
};

// üîß Helper Functions for Template Data
const getNextGmIdValue = async () => {
  const lastTesvik = await Tesvik.findOne(
    { gmId: { $exists: true, $ne: '' } },
    { gmId: 1 },
    { sort: { gmId: -1 } }
  );
  
  let nextNumber = 1;
  if (lastTesvik && lastTesvik.gmId) {
    const match = lastTesvik.gmId.match(/^GM(\d{4})(\d{3})$/);
    if (match) {
      const year = parseInt(match[1]);
      const currentNumber = parseInt(match[2]);
      if (year === new Date().getFullYear()) {
        nextNumber = currentNumber + 1;
      }
    }
  }
  
  return `GM${new Date().getFullYear()}${nextNumber.toString().padStart(3, '0')}`;
};

const getNextTesvikIdValue = async () => {
  const year = new Date().getFullYear();
  const lastTesvik = await Tesvik.findOne(
    { tesvikId: new RegExp(`^TES${year}`) },
    { tesvikId: 1 },
    { sort: { tesvikId: -1 } }
  );
  
  let nextNumber = 1;
  if (lastTesvik && lastTesvik.tesvikId) {
    const currentNumber = parseInt(lastTesvik.tesvikId.slice(7));
    nextNumber = currentNumber + 1;
  }
  
  return `TES${year}${nextNumber.toString().padStart(4, '0')}`;
};

const getDurumOptions = () => [
  { value: 'taslak', label: 'Taslak', color: '#6B7280' },
  { value: 'hazirlaniyor', label: 'Hazƒ±rlanƒ±yor', color: '#F59E0B' },
  { value: 'ba≈üvuru_yapildi', label: 'Ba≈üvuru Yapƒ±ldƒ±', color: '#3B82F6' },
  { value: 'inceleniyor', label: 'ƒ∞nceleniyor', color: '#F97316' },
  { value: 'ek_belge_istendi', label: 'Ek Belge ƒ∞stendi', color: '#F59E0B' },
  { value: 'revize_talep_edildi', label: 'Revize Talep Edildi', color: '#EF4444' },
  { value: 'onay_bekliyor', label: 'Onay Bekliyor', color: '#F97316' },
  { value: 'onaylandi', label: 'Onaylandƒ±', color: '#10B981' },
  { value: 'reddedildi', label: 'Reddedildi', color: '#EF4444' },
  { value: 'iptal_edildi', label: 'ƒ∞ptal Edildi', color: '#6B7280' }
];

const getDestekSiniflariOptions = () => [
  { value: 'Genel', label: 'Genel Te≈üvik', aciklama: 'Genel te≈üvik uygulamasƒ±' },
  { value: 'B√∂lgesel', label: 'B√∂lgesel Te≈üvik', aciklama: 'B√∂lgesel kalkƒ±nma te≈üviki' },
  { value: 'B√∂lgesel Alt B√∂lge', label: 'B√∂lgesel Alt B√∂lge', aciklama: 'B√∂lgesel alt kategori te≈üviki' },
  { value: 'B√∂lgesel Alt B√∂lge 18-1-a', label: 'B√∂lgesel Alt B√∂lge 18-1-a', aciklama: '√ñzel b√∂lge te≈üviki 18-1-a' },
  { value: 'B√∂lgesel Alt B√∂lge 18-1-b', label: 'B√∂lgesel Alt B√∂lge 18-1-b', aciklama: '√ñzel b√∂lge te≈üviki 18-1-b' },
  { value: 'B√∂lgesel Alt B√∂lge 18-2', label: 'B√∂lgesel Alt B√∂lge 18-2', aciklama: '√ñzel b√∂lge te≈üviki 18-2' },
  { value: 'B√∂lgesel Alt B√∂lge 18-3 OECD', label: 'B√∂lgesel Alt B√∂lge 18-3 OECD', aciklama: 'OECD standartlarƒ±' },
  { value: 'B√∂lgesel Alt B√∂lge 18-3 OECD ƒ∞stanbul', label: 'B√∂lgesel Alt B√∂lge 18-3 OECD ƒ∞stanbul', aciklama: 'ƒ∞stanbul √∂zel kategori' },
  { value: 'B√∂lgesel Alt B√∂lge 18-5 il√ße', label: 'B√∂lgesel Alt B√∂lge 18-5 il√ße', aciklama: 'ƒ∞l√ße bazlƒ± te≈üvik' },
  { value: 'B√∂lgesel √ñncelikli 17', label: 'B√∂lgesel √ñncelikli 17', aciklama: '√ñncelikli b√∂lge te≈üviki' },
  { value: 'Stratejik', label: 'Stratejik Yatƒ±rƒ±m Te≈üviki', aciklama: 'Stratejik sekt√∂r te≈üviki' },
  { value: 'Stratejik Hamle', label: 'Stratejik Hamle Te≈üviki', aciklama: 'Stratejik hamle programƒ±' },
  { value: 'Stratejik Hamle - Y√ºksek √ñncelik', label: 'Stratejik Hamle - Y√ºksek √ñncelik', aciklama: 'Y√ºksek √∂ncelikli stratejik' },
  { value: 'Proje Bazlƒ±', label: 'Proje Bazlƒ± Te≈üvik', aciklama: '√ñzel proje te≈üviki' }
];

const getIllerOptions = () => [
  'ADANA', 'ADIYAMAN', 'AFYONKARAHƒ∞SAR', 'AƒûRI', 'AMASYA', 'ANKARA', 'ANTALYA', 
  'ARTVƒ∞N', 'AYDIN', 'BALIKESƒ∞R', 'Bƒ∞LECƒ∞K', 'Bƒ∞NG√ñL', 'Bƒ∞TLƒ∞S', 'BOLU', 
  'BURDUR', 'BURSA', '√áANAKKALE', '√áANKIRI', '√áORUM', 'DENƒ∞ZLƒ∞', 'Dƒ∞YARBAKIR', 
  'EDƒ∞RNE', 'ELAZIƒû', 'ERZƒ∞NCAN', 'ERZURUM', 'ESKƒ∞≈ûEHƒ∞R', 'GAZƒ∞ANTEP', 'Gƒ∞RESUN',
  'G√úM√ú≈ûHANE', 'HAKKARƒ∞', 'HATAY', 'ISPARTA', 'ƒ∞√áEL', 'ƒ∞STANBUL', 'ƒ∞ZMƒ∞R', 
  'KARS', 'KASTAMONU', 'KAYSERƒ∞', 'KIRKLARELƒ∞', 'KIR≈ûEHƒ∞R', 'KOCAELƒ∞', 'KONYA',
  'K√úTAHYA', 'MALATYA', 'MANƒ∞SA', 'KAHRAMANMARA≈û', 'MARDƒ∞N', 'MUƒûLA', 'MU≈û',
  'NEV≈ûEHƒ∞R', 'Nƒ∞ƒûDE', 'ORDU', 'Rƒ∞ZE', 'SAKARYA', 'SAMSUN', 'Sƒ∞ƒ∞RT', 'Sƒ∞NOP',
  'Sƒ∞VAS', 'TEKƒ∞RDAƒû', 'TOKAT', 'TRABZON', 'TUNCELƒ∞', '≈ûANLIURFA', 'U≈ûAK',
  'VAN', 'YOZGAT', 'ZONGULDAK', 'AKSARAY', 'BAYBURT', 'KARAMAN', 'KIRIKKALE',
  'BATMAN', '≈ûIRNAK', 'BARTIN', 'ARDAHAN', 'IƒûDIR', 'YALOVA', 'KARAB√úK', 
  'Kƒ∞Lƒ∞S', 'OSMANƒ∞YE', 'D√úZCE'
];

const getDayandigiKanunOptions = () => [
  { value: '2012/3305', label: '2012/3305', aciklama: 'Yatƒ±rƒ±m Te≈üvik Kararnamesi' },
  { value: '2018/11201', label: '2018/11201', aciklama: 'G√ºncel Te≈üvik Sistemi' },
  { value: '2016/9495', label: '2016/9495', aciklama: '√ñnceki Te≈üvik Sistemi' }
];

const getBelgeDurumOptions = () => [
  { value: 'hazirlaniyor', label: 'Hazƒ±rlanƒ±yor', color: '#F59E0B', backgroundColor: '#fef3c7' },
  { value: 'ba≈üvuru_yapildi', label: 'Ba≈üvuru Yapƒ±ldƒ±', color: '#3B82F6', backgroundColor: '#dbeafe' },
  { value: 'inceleniyor', label: 'ƒ∞nceleniyor', color: '#8B5CF6', backgroundColor: '#ede9fe' },
  { value: 'ek_belge_bekleniyor', label: 'Ek Belge Bekleniyor', color: '#F59E0B', backgroundColor: '#fef3c7' },
  { value: 'onaylandi', label: 'Onaylandƒ±', color: '#10B981', backgroundColor: '#d1fae5' },
  { value: 'reddedildi', label: 'Reddedildi', color: '#EF4444', backgroundColor: '#fee2e2' },
  { value: 'iptal', label: 'ƒ∞ptal', color: '#6B7280', backgroundColor: '#f3f4f6' }
];

// üîÑ YATIRIM Tƒ∞Pƒ∞ (Cƒ∞NSƒ∞) - CSV'den ger√ßek veriler
const getYatirimTipiOptions = () => [
  { value: 'Komple Yeni', label: 'Komple Yeni', aciklama: 'Tamamen yeni yatƒ±rƒ±m' },
  { value: 'Tevsi', label: 'Tevsi', aciklama: 'Mevcut yatƒ±rƒ±mƒ±n geni≈ületilmesi' },
  { value: 'Modernizasyon', label: 'Modernizasyon', aciklama: 'Teknolojik yenileme' },
  { value: 'Entegrasyon', label: 'Entegrasyon', aciklama: 'Entegre yatƒ±rƒ±m' },
  { value: '√úr√ºn √áe≈üitlendirme', label: '√úr√ºn √áe≈üitlendirme', aciklama: 'Yeni √ºr√ºn geli≈ütirme' },
  { value: 'Nakil', label: 'Nakil', aciklama: 'Ta≈üƒ±nma i≈ülemi' },
  { value: 'Ta≈üƒ±nma', label: 'Ta≈üƒ±nma', aciklama: 'Yer deƒüi≈ütirme' }
];

// üìä KAPASƒ∞TE Bƒ∞Rƒ∞MLERƒ∞ - CSV'den ger√ßek veriler (Excel'deki t√ºm se√ßenekler)
const getKapasiteBirimleriOptions = () => [
  // Temel birimler
  'ADET', 'ADET(UNIT)', 'ADET-√áƒ∞FT', 'ABONE', 'ABONELƒ∞K',
  'Kƒ∞LOGRAM', 'Kƒ∞LOGRAM-ADET', 'Kƒ∞LOGRAM-BA≈û', 'Kƒ∞LOGRAM-√áƒ∞FT',
  'GRAM', 'TON', 'Lƒ∞TRE', 'METRE', 'METRE KARE', 'METRE K√úP',
  
  // Zamanlƒ± birimler - Excel'deki gibi
  'ADET/YIL', 'ADET/AY', 'ADET/G√úN', 'ADET/SAAT', 'ADET/8 SAAT',
  'ADET/HAFTA', 'ADET/D√ñNEM', 'ADET/PERYOT', 'ADET/DAKƒ∞KA',
  'ABONE/YIL', 'ABONE/G√úN', '√áƒ∞FT/YIL', '√áƒ∞FT/G√úN', 'GRAM/YIL',
  
  // √ñzel birimler - Excel'den
  'ADET/10L', 'ADET/BALON', 'ADET/DEVRE', 'ADET/TEST', 'ADET/TEKNE', 'ADET/U√áAK',
  '√áƒ∞FT', 'LEVHA', 'RULO', 'PLAKA', 'BOBIN', 'TABAKA',
  'DEMET', 'PAKET', 'KOLI', 'KASA', 'KUTU',
  
  // Kilo Watt ve enerji birimleri
  'KILO WATT', 'KILO WATT SAAT', 'Bƒ∞N KILO WATT SAAT',
  
  // Bin birimler
  'Bƒ∞N ADET', 'Bƒ∞N Kƒ∞LOGRAM', 'Bƒ∞N Lƒ∞TRE', 'Bƒ∞N METRE K√úP',
  
  // Diƒüer √∂zel birimler
  'ALTIN AYARI', 'ATV birim fiyatƒ±', 'AFƒ∞F birim fiyatƒ±',
  'AZOTUN Kƒ∞LOGRAMI', 'BAS', 'BR√úT KALORƒ∞ DEƒûERƒ∞',
  'Dƒ∞FOSFOR PENTAOKSƒ∞T Kƒ∞LOGRAMI', 'FISSILE ƒ∞ZOTOP GRAMI'
];

// üì¶ U$97 KODLARI - CSV'den ger√ßek √ºr√ºn kodlarƒ±  
const getU97KodlariOptions = () => [
  // 0111 - TAHIL VE Dƒ∞ƒûER Bƒ∞TKƒ∞SEL √úR√úNLER
  { kod: '0111.0.01', aciklama: 'Durum buƒüdayƒ± (makarnalƒ±k buƒüday)', kategori: 'Tahƒ±l' },
  { kod: '0111.0.02', aciklama: 'Yumu≈üak buƒüday ve diƒüer buƒüdaylar', kategori: 'Tahƒ±l' },
  { kod: '0111.0.03', aciklama: 'Mƒ±sƒ±r', kategori: 'Tahƒ±l' },
  { kod: '0111.0.04', aciklama: 'Dƒ±≈ü zarƒ± √ßƒ±kartƒ±lmamƒ±≈ü pirin√ß (√ßeltik)', kategori: 'Tahƒ±l' },
  { kod: '0111.0.05', aciklama: 'Arpa', kategori: 'Tahƒ±l' },
  { kod: '0111.0.06', aciklama: '√áavdar ve yulaf', kategori: 'Tahƒ±l' },
  { kod: '0111.0.07', aciklama: 'Diƒüer tahƒ±llar', kategori: 'Tahƒ±l' },
  { kod: '0111.0.08', aciklama: 'Patates', kategori: 'K√∂k ve Yumru' },
  { kod: '0111.0.09', aciklama: 'Kuru baklagil sebzeler (kabuklu)', kategori: 'Baklagil' },
  { kod: '0111.0.10', aciklama: 'Y√ºksek oranda ni≈üasta ve in√ºlin i√ßeren k√∂k ve yumru bitkiler', kategori: 'K√∂k ve Yumru' },
  { kod: '0111.0.11', aciklama: 'Soya fas√ºlyesi', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.12', aciklama: 'Yer fƒ±stƒ±ƒüƒ±', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.14', aciklama: '√áiƒüit (pamuk tohumu)', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.15', aciklama: 'B.y.s. yaƒülƒ± tohumlar ve yaƒülƒ± meyveler', kategori: 'Yaƒülƒ± Tohum' },
  { kod: '0111.0.16', aciklama: 'T√ºt√ºn (i≈ülenmemi≈ü)', kategori: 'End√ºstriyel Bitki' },
  { kod: '0111.0.17', aciklama: '≈ûeker pancarƒ±', kategori: 'End√ºstriyel Bitki' },
  { kod: '0111.0.18', aciklama: '≈ûeker kamƒ±≈üƒ±', kategori: 'End√ºstriyel Bitki' },
  { kod: '0111.0.19', aciklama: 'Saman ve yem bitkileri', kategori: 'Yem Bitkisi' },
  { kod: '0111.0.20', aciklama: 'Pamuk (√ßƒ±r√ßƒ±rlanmƒ±≈ü ya da √ßƒ±r√ßƒ±rlanmamƒ±≈ü)', kategori: 'End√ºstriyel Bitki' },
  
  // 0112 - SEBZE, BAH√áE VE K√úLT√úR Bƒ∞TKƒ∞LERƒ∞
  { kod: '0112.0.02', aciklama: 'Meyvesi yenen sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.03', aciklama: 'Yapraƒüƒ± yenen sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.04', aciklama: 'Baklagil sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.05', aciklama: 'B.y.s. diƒüer sebzeler', kategori: 'Sebze' },
  { kod: '0112.0.08', aciklama: '√ái√ßek ve meyve tohumlarƒ±', kategori: 'Tohum' },
  { kod: '0112.0.09', aciklama: 'Sebze tohumlarƒ±', kategori: 'Tohum' },
  
  // 0113 - MEYVE VE BAHARAT Bƒ∞TKƒ∞LERƒ∞
  { kod: '0113.0.01', aciklama: 'Sofralƒ±k √ºz√ºm', kategori: 'Meyve' },
  { kod: '0113.0.02', aciklama: 'Diƒüer ya≈ü √ºz√ºm', kategori: 'Meyve' },
  { kod: '0113.0.04', aciklama: 'Turun√ßgiller', kategori: 'Meyve' },
  { kod: '0113.0.05', aciklama: 'Diƒüer meyveler (yumu≈üak √ßekirdekli)', kategori: 'Meyve' },
  { kod: '0113.0.06', aciklama: 'Diƒüer meyveler (sert √ßekirdekli)', kategori: 'Meyve' },
  { kod: '0113.0.08', aciklama: 'Zeytin', kategori: 'Meyve' },
  { kod: '0113.0.12', aciklama: 'Kakao √ßekirdeƒüi', kategori: 'End√ºstriyel Bitki' },
  { kod: '0113.0.13', aciklama: 'Baharatlar (i≈ülenmemi≈ü)', kategori: 'Baharat' },
  
  // 0121 - B√úY√úKBA≈û HAYVANCILIK
  { kod: '0121.1.01', aciklama: 'Sƒ±ƒüƒ±r (saf k√ºlt√ºr)', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.02', aciklama: 'Sƒ±ƒüƒ±r (k√ºlt√ºr melezi)', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.03', aciklama: 'Sƒ±ƒüƒ±r (yerli-diƒüer)', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.04', aciklama: 'Manda', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.05', aciklama: 'Damƒ±zlƒ±k sƒ±ƒüƒ±r yeti≈ütiriciliƒüi', kategori: 'B√ºy√ºkba≈ü' },
  { kod: '0121.1.06', aciklama: 'Sƒ±ƒüƒ±rdan elde edilen ham s√ºt', kategori: 'S√ºt √úr√ºn√º' },
  { kod: '0121.1.07', aciklama: 'Sƒ±ƒüƒ±r spermi √ºretimi (dondurulmu≈ü)', kategori: 'Damƒ±zlƒ±k' },
  
  // 0121 - K√ú√á√úKBA≈û HAYVANCILIK  
  { kod: '0121.2.01', aciklama: 'Merinos Koyunu', kategori: 'K√º√ß√ºkba≈ü' },
  { kod: '0121.2.02', aciklama: 'Yerli Koyun', kategori: 'K√º√ß√ºkba≈ü' },
  { kod: '0121.2.03', aciklama: 'Damƒ±zlƒ±k koyun yeti≈ütiriciliƒüi', kategori: 'K√º√ß√ºkba≈ü' },
  { kod: '0121.2.04', aciklama: 'Kƒ±l ke√ßisi', kategori: 'K√º√ß√ºkba≈ü' }
];

// üè¢ OSB (Organize Sanayi B√∂lgesi) SE√áENEKLERƒ∞
const getOsbOptions = () => [
  { il: 'Adana', osb: 'Adana Gƒ±da ƒ∞htisas OSB' },
  { il: 'Adana', osb: 'Adana Hacƒ± Sabancƒ± OSB' },
  { il: 'Adana', osb: 'Adana Karata≈ü TDƒ∞ (Su √úr√ºnleri)' },
  { il: 'Adana', osb: 'Adana TDƒ∞ (Sera)' },
  { il: 'Adana', osb: 'Ceyhan OSB' },
  { il: 'Adana', osb: 'Kozan OSB' },
  { il: 'Adƒ±yaman', osb: 'Adƒ±yaman OSB' },
  { il: 'Adƒ±yaman', osb: 'Adƒ±yaman G√∂lba≈üƒ± OSB' },
  { il: 'Adƒ±yaman', osb: 'Adƒ±yaman Kahta OSB' },
  { il: 'Afyonkarahisar', osb: 'Afyonkarahisar OSB' },
  { il: 'Afyonkarahisar', osb: 'Afyonkarahisar Bolvadin OSB' },
  { il: 'Afyonkarahisar', osb: 'Afyonkarahisar Bolvadin TDƒ∞(Besi)' },
  // ... daha fazla OSB se√ßeneƒüi eklenebilir
];

// üíº YATIRIM KONUSU KATEGORƒ∞LERƒ∞ - CSV'den ana kategoriler
const getYatirimKonusuKategorileri = () => [
  {
    kod: '111',
    kategori: 'TAHIL VE BA≈ûKA YERDE SINIFLANDIRILMAMI≈û Dƒ∞ƒûER Bƒ∞TKƒ∞SEL √úR√úNLERƒ∞N YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞',
    altKategoriler: [
      '111.0.01 - Durum buƒüdayƒ± (makarnalƒ±k buƒüday)',
      '111.0.02 - Yumu≈üak buƒüday ve diƒüer buƒüdaylar',
      '111.0.03 - Mƒ±sƒ±r',
      '111.0.04 - Dƒ±≈ü zarƒ± √ßƒ±kartƒ±lmamƒ±≈ü pirin√ß (√ßeltik)',
      '111.0.05 - Arpa',
      '111.0.06 - √áavdar ve yulaf',
      '111.0.07 - Diƒüer tahƒ±llar'
    ]
  },
  {
    kod: '112',
    kategori: 'SEBZE, BAH√áE VE K√úLT√úR Bƒ∞TKƒ∞LERƒ∞ ƒ∞LE Fƒ∞DANLIK √úR√úNLERƒ∞Nƒ∞N YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞',
    altKategoriler: [
      '112.01 - Sebze yeti≈ütiriciliƒüi',
      '112.02 - Bah√ße bitkileri yeti≈ütiriciliƒüi',
      '112.03 - Fidan yeti≈ütiriciliƒüi'
    ]
  },
  {
    kod: '113',
    kategori: 'MEYVE, SERT KABUKLULAR, ƒ∞√áECEK VE BAHARAT Bƒ∞TKƒ∞LERƒ∞Nƒ∞N YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞',
    altKategoriler: [
      '113.01 - Meyve yeti≈ütiriciliƒüi',
      '113.02 - Sert kabuklu yeti≈ütiriciliƒüi',
      '113.03 - ƒ∞√ßecek bitkileri yeti≈ütiriciliƒüi'
    ]
  },
  {
    kod: '121',
    kategori: 'KOYUN, KE√áƒ∞, SIƒûIR, AT, E≈ûEK, BARDO, KATIR VB. YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞; S√úT HAYVANCILIƒûI',
    altKategoriler: [
      '121.01 - B√ºy√ºkba≈ü hayvancƒ±lƒ±k',
      '121.02 - K√º√ß√ºkba≈ü hayvancƒ±lƒ±k',
      '121.03 - S√ºt hayvancƒ±lƒ±ƒüƒ±'
    ]
  },
  {
    kod: '122',
    kategori: 'Dƒ∞ƒûER HAYVANLARIN YETƒ∞≈ûTƒ∞Rƒ∞LMESƒ∞; BA≈ûKA YERDE SINIFLANDIRILMAMI≈û HAYVANSAL √úR√úNLERƒ∞N √úRETƒ∞Mƒ∞',
    altKategoriler: [
      '122.01 - K√ºmes hayvancƒ±lƒ±ƒüƒ±',
      '122.02 - Arƒ±cƒ±lƒ±k',
      '122.03 - Diƒüer hayvan yeti≈ütiriciliƒüi'
    ]
  }
];

const getKunyeBilgileriTemplate = () => ({
  talepSonuc: '',
  sorguBaglantisi: '',
  belgeBaslamaTarihi: null,
  belgeBitisTarihi: null,
  uzatimTarihi: null,
  mucbirUzatimTarihi: null
});

// üì¶ Excel U$97 √úr√ºn Kodlarƒ± Template
const getUrunKodlariTemplate = () => [
  { kod: 'U$97_1', aciklama: '√úr√ºn Kodu 1', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_2', aciklama: '√úr√ºn Kodu 2', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_3', aciklama: '√úr√ºn Kodu 3', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_4', aciklama: '√úr√ºn Kodu 4', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_5', aciklama: '√úr√ºn Kodu 5', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_6', aciklama: '√úr√ºn Kodu 6', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_7', aciklama: '√úr√ºn Kodu 7', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_8', aciklama: '√úr√ºn Kodu 8', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' },
  { kod: 'U$97_9', aciklama: '√úr√ºn Kodu 9', mevcut: 0, ilave: 0, toplam: 0, kapsite: 0, kapasite_birimi: '' }
];

// üéØ DESTEK UNSURLARI - CSV'den ger√ßek veriler
const getDestekUnsurlariOptions = () => [
  { value: 'Sigorta Primi ƒ∞≈üveren Hissesi', label: 'Sigorta Primi ƒ∞≈üveren Hissesi', kategori: 'Sigorta', renk: '#10B981' },
  { value: 'Sigorta Prim Desteƒüi', label: 'Sigorta Prim Desteƒüi', kategori: 'Sigorta', renk: '#10B981' },
  { value: 'Vergi ƒ∞ndirimi', label: 'Vergi ƒ∞ndirimi', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'Gelir Vergisi Stopaj Desteƒüi', label: 'Gelir Vergisi Stopaj Desteƒüi', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'KDV ƒ∞stisnasƒ±', label: 'KDV ƒ∞stisnasƒ±', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'KDV ƒ∞adesi', label: 'KDV ƒ∞adesi', kategori: 'Vergi', renk: '#3B82F6' },
  { value: 'G√ºmr√ºk Vergisi Muafiyeti', label: 'G√ºmr√ºk Vergisi Muafiyeti', kategori: 'G√ºmr√ºk', renk: '#F59E0B' },
  { value: 'Faiz Desteƒüi', label: 'Faiz Desteƒüi', kategori: 'Finansal', renk: '#EF4444' },
  { value: 'Yatƒ±rƒ±m Yeri Tahsisi', label: 'Yatƒ±rƒ±m Yeri Tahsisi', kategori: 'Yer', renk: '#8B5CF6' },
  { value: 'Yatƒ±rƒ±m Konusu Zorunluluƒüu', label: 'Yatƒ±rƒ±m Konusu Zorunluluƒüu', kategori: 'Zorunluluk', renk: '#6B7280' }
];

// üìã DESTEK UNSURU ≈ûARTLARI - CSV'den ger√ßek veriler
const getDestekSartlariOptions = () => [
  // B√∂lgesel Katkƒ± Oranlarƒ±
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%15 - Vergi ƒ∞ndirim %50 (1. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%15 - Vergi ƒ∞ndirim %50 (1. B√∂lge)', kategori: '1. B√∂lge', yuzde: 15 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%20 - Vergi ƒ∞ndirim %55 (2. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%20 - Vergi ƒ∞ndirim %55 (2. B√∂lge)', kategori: '2. B√∂lge', yuzde: 20 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%25 - Vergi ƒ∞ndirim %60 (3. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%25 - Vergi ƒ∞ndirim %60 (3. B√∂lge)', kategori: '3. B√∂lge', yuzde: 25 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%30 - Vergi ƒ∞ndirim %70 (4. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%30 - Vergi ƒ∞ndirim %70 (4. B√∂lge)', kategori: '4. B√∂lge', yuzde: 30 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%40 - Vergi ƒ∞ndirim %80 (5. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%40 - Vergi ƒ∞ndirim %80 (5. B√∂lge)', kategori: '5. B√∂lge', yuzde: 40 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (6. B√∂lge)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (6. B√∂lge)', kategori: '6. B√∂lge', yuzde: 50 },
  { value: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (Stratejik)', label: 'Yatƒ±rƒ±ma Katkƒ± Oranƒ±:%50 - Vergi ƒ∞ndirim %90 (Stratejik)', kategori: 'Stratejik', yuzde: 50 },
  
  // Yatƒ±rƒ±m Tutarƒ± Destekleri
  { value: '2 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %10\'lu (1. B√∂lge)', label: '2 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %10\'lu (1. B√∂lge)', kategori: '1. B√∂lge', yil: 2 },
  { value: '3 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (2. B√∂lge)', label: '3 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (2. B√∂lge)', kategori: '2. B√∂lge', yil: 3 },
  { value: '5 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %20\'si (3. B√∂lge)', label: '5 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %20\'si (3. B√∂lge)', kategori: '3. B√∂lge', yil: 5 },
  { value: '6 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %25\'i (4. B√∂lge)', label: '6 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %25\'i (4. B√∂lge)', kategori: '4. B√∂lge', yil: 6 },
  { value: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %35\'i (5. B√∂lge)', label: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %35\'i (5. B√∂lge)', kategori: '5. B√∂lge', yil: 7 },
  { value: '10 Yƒ±l (6. B√∂lge)', label: '10 Yƒ±l (6. B√∂lge)', kategori: '6. B√∂lge', yil: 10 },
  { value: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (Stratejik)', label: '7 Yƒ±l ve En Fazla Yatƒ±rƒ±m Tutarƒ±nƒ±n %15\'i (Stratejik)', kategori: 'Stratejik', yil: 7 },
  
  // Hamle Programlarƒ±
  { value: '5 Yƒ±l (Hamle)', label: '5 Yƒ±l (Hamle)', kategori: 'Hamle', yil: 5 },
  { value: '7 Yƒ±l (Hamle Y√ºksek Teknoloji)', label: '7 Yƒ±l (Hamle Y√ºksek Teknoloji)', kategori: 'Hamle', yil: 7 },
  
  // √ñzel ≈ûartlar
  { value: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', label: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', kategori: 'Liste' },
  { value: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', label: 'Var (Yerli ve ƒ∞thal Liste - Tamamƒ±)', kategori: 'Liste' },
  
  // Diƒüer ≈ûartlar
  { value: '10 Yƒ±l 6. B√∂lge', label: '10 Yƒ±l 6. B√∂lge', kategori: '6. B√∂lge', yil: 10 }
];

// üéØ Destek Unsurlarƒ± Template - Excel benzeri 8 alan yapƒ±sƒ±
const getDestekUnsurlariTemplate = () => [
  {
    index: 1,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 2,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 3,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 4,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 5,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 6,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 7,
    destekUnsuru: '',
    sartlari: ''
  },
  {
    index: 8,
    destekUnsuru: '',
    sartlari: ''
  }
];

// üè∑Ô∏è √ñzel ≈ûartlar Template
const getOzelSartlarTemplate = () => [
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 1', 
    aciklama: 'A√ßƒ±klama Notu 1',
    kosul2: '√ñzel ≈ûart Ko≈üulu 2',
    aciklama2: 'A√ßƒ±klama Notu 2'
  },
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 3', 
    aciklama: 'A√ßƒ±klama Notu 3',
    kosul2: '√ñzel ≈ûart Ko≈üulu 4',
    aciklama2: 'A√ßƒ±klama Notu 4'
  },
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 5', 
    aciklama: 'A√ßƒ±klama Notu 5',
    kosul2: '√ñzel ≈ûart Ko≈üulu 6',
    aciklama2: 'A√ßƒ±klama Notu 6'
  },
  { 
    kosul: '√ñzel ≈ûart Ko≈üulu 7', 
    aciklama: 'A√ßƒ±klama Notu 7',
    kosul2: '',
    aciklama2: ''
  }
];

// üè¢ Fƒ∞RMAYA Aƒ∞T TE≈ûVƒ∞KLER
const getTesvikByFirma = async (req, res) => {
  try {
    const { firmaId } = req.params;
    
    const tesvikler = await Tesvik.find({ firma: firmaId, aktif: true })
      .populate('olusturanKullanici', 'adSoyad')
      .select('tesvikId gmId durumBilgileri istihdam maliHesaplamalar createdAt')
      .sort({ createdAt: -1 });

    res.json({
      success: true,
      message: `Firmaya ait ${tesvikler.length} te≈üvik bulundu`,
      data: tesvikler
    });

  } catch (error) {
    console.error('üö® Firma te≈üvikleri hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Firma te≈üvikleri getirilemedi',
      error: error.message
    });
  }
};

// TOPLU DURUM G√úNCELLEME
const bulkUpdateDurum = async (req, res) => {
  try {
    const { tesvikIds, yeniDurum, aciklama } = req.body;

    if (!tesvikIds || !Array.isArray(tesvikIds) || tesvikIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Te≈üvik ID listesi gerekli'
      });
    }

    const updateResult = await Tesvik.updateMany(
      { _id: { $in: tesvikIds }, aktif: true },
      {
        'durumBilgileri.genelDurum': yeniDurum,
        'durumBilgileri.durumAciklamasi': aciklama || '',
        'durumBilgileri.sonDurumGuncelleme': new Date(),
        sonGuncelleyen: req.user._id
      }
    );

    res.json({
      success: true,
      message: `${updateResult.modifiedCount} te≈üvik durumu g√ºncellendi`,
      data: {
        guncellenenSayisi: updateResult.modifiedCount,
        yeniDurum,
        aciklama
      }
    });

  } catch (error) {
    console.error('üö® Toplu g√ºncelleme hatasƒ±:', error);
    res.status(500).json({
      success: false,
      message: 'Toplu g√ºncelleme yapƒ±lƒ±rken hata olu≈ütu',
      error: error.message
    });
  }
};

// üè∑Ô∏è √ñZEL ≈ûART KISALTMALARI - CSV'den ger√ßek veriler
const getOzelSartKisaltmalariOptions = () => [
  // B√∂lgesel Kodlar
  { value: 'B√ñL - SGK NO', label: 'B√ñL - SGK NO', kategori: 'SGK', renk: '#10B981' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-1.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-1.B√∂lge', kategori: '1. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-2.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-2.B√∂lge', kategori: '2. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-3.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-3.B√∂lge', kategori: '3. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-4.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-4.B√∂lge', kategori: '4. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL 3305-SGK:B√∂lgesel-5.B√∂lge', label: 'B√ñL 3305-SGK:B√∂lgesel-5.B√∂lge', kategori: '5. B√∂lge', renk: '#3B82F6' },
  { value: 'B√ñL- Faliyet Zorunlukuƒüu', label: 'B√ñL- Faliyet Zorunlukuƒüu', kategori: 'Zorunluluk', renk: '#6B7280' },
  { value: 'B√ñL - Faiz Desteƒüi', label: 'B√ñL - Faiz Desteƒüi', kategori: 'Faiz', renk: '#EF4444' },
  
  // Kurum ve Tarih
  { value: 'Dƒ∞ƒûER KURUM-3(21.08.2020)', label: 'Dƒ∞ƒûER KURUM-3(21.08.2020)', kategori: 'Kurum', renk: '#F59E0B' },
  
  // Sigorta ve √ñzel Durumlar
  { value: 'Sƒ∞GORTA BA≈ûLAMA', label: 'Sƒ∞GORTA BA≈ûLAMA', kategori: 'Sigorta', renk: '#10B981' },
  { value: '√ñCELƒ∞KLƒ∞ YATIRIM', label: '√ñCELƒ∞KLƒ∞ YATIRIM', kategori: 'Yatƒ±rƒ±m', renk: '#8B5CF6' },
  { value: '3305-Yatƒ±rƒ±m Konusu Zorunluluƒüu', label: '3305-Yatƒ±rƒ±m Konusu Zorunluluƒüu', kategori: 'Zorunluluk', renk: '#6B7280' },
  
  // Finansal ve Makine
  { value: 'Fƒ∞NANSAL Kƒ∞RALAMA', label: 'Fƒ∞NANSAL Kƒ∞RALAMA', kategori: 'Finansal', renk: '#EF4444' },
  { value: 'Kullanƒ±lmƒ±≈ü Makine M√ºnferit', label: 'Kullanƒ±lmƒ±≈ü Makine M√ºnferit', kategori: 'Makine', renk: '#F59E0B' },
  
  // Genel
  { value: 'Dƒ∞ƒûER', label: 'Dƒ∞ƒûER', kategori: 'Genel', renk: '#6B7280' },
  { value: 'ƒ∞≈üyeri A√ßma ve √áalƒ±≈üma Ruhsatƒ±', label: 'ƒ∞≈üyeri A√ßma ve √áalƒ±≈üma Ruhsatƒ±', kategori: 'Ruhsat', renk: '#8B5CF6' }
];

// üìù √ñZEL ≈ûART NOTLARI - Detaylƒ± a√ßƒ±klamalar
const getOzelSartNotlariOptions = () => [
  'B√∂lgesel te≈üvik kapsamƒ±nda',
  'SGK primleri i√ßin ge√ßerli',
  'Yatƒ±rƒ±m tutarƒ± sƒ±nƒ±rlamasƒ± var',
  'Faiz desteƒüi s√ºre sƒ±nƒ±rƒ±: 5 yƒ±l',
  'Sigorta ba≈ülama tarihi √∂nemli',
  '√ñncelikli yatƒ±rƒ±m listesinde',
  'Finansal kiralama ≈üartlarƒ± uygulanƒ±r',
  'Kullanƒ±lmƒ±≈ü makine deƒüerlendirmesi',
  'ƒ∞≈üyeri ruhsatƒ± zorunlu',
  'Diƒüer √∂zel ≈üartlar i√ßin a√ßƒ±klama ekleyin'
];

// üéØ YENƒ∞ SE√áENEK EKLEME - Dinamik Dropdown Y√∂netimi
const addNewOption = async (req, res) => {
  try {
    const { type } = req.params;
    const { value, label, kategori, aciklama, ek_bilgi } = req.body;

    console.log(`üÜï Yeni se√ßenek ekleniyor: ${type} - ${label}`);

    // Yeni se√ßenek objesi olu≈ütur
    const newOption = {
      value: value || label,
      label,
      kategori: kategori || 'Genel',
      aciklama: aciklama || '',
      ek_bilgi: ek_bilgi || {},
      olusturma_tarihi: new Date(),
      aktif: true
    };

    // Type'a g√∂re MongoDB collection'ƒ±na kaydet
    let savedOption;
    switch (type) {
      case 'yatirimTipleri':
        // Yatƒ±rƒ±m tipleri i√ßin basit yapƒ±
        savedOption = newOption;
        break;
        
      case 'osbOptions':
        // OSB i√ßin ≈üehir bilgisi ekle
        newOption.sehir = ek_bilgi.sehir || 'Belirtilmemi≈ü';
        savedOption = newOption;
        break;
        
      case 'u97Kodlari':
        // U$97 kodlarƒ± i√ßin kod ve kategori
        newOption.kod = value;
        newOption.kategori = kategori || 'Dƒ∞ƒûER';
        savedOption = newOption;
        break;
        
      case 'destekUnsurlariOptions':
        // Destek unsurlarƒ± i√ßin renk kodu
        newOption.renk = ek_bilgi.renk || '#6B7280';
        savedOption = newOption;
        break;
        
      case 'ozelSartKisaltmalari':
        // √ñzel ≈üartlar i√ßin renk kodu
        newOption.renk = ek_bilgi.renk || '#6B7280';
        savedOption = newOption;
        break;
        
      case 'destekSartlariOptions':
        // ≈ûartlar i√ßin y√ºzde ve yƒ±l bilgisi
        newOption.yuzde = ek_bilgi.yuzde || null;
        newOption.yil = ek_bilgi.yil || null;
        savedOption = newOption;
        break;
        
      case 'kapasiteBirimleri':
        // Kapasite birimleri i√ßin basit yapƒ±
        savedOption = newOption;
        break;
        
      case 'belgeDurumlari':
        // Belge durumlarƒ± i√ßin renk kodu
        newOption.renk = ek_bilgi.renk || '#6B7280';
        savedOption = newOption;
        break;
        
      default:
        return res.status(400).json({
          success: false,
          message: `Desteklenmeyen se√ßenek t√ºr√º: ${type}`
        });
    }

    // Ba≈üarƒ± yanƒ±tƒ±
    res.status(201).json({
      success: true,
      message: `Yeni ${type} ba≈üarƒ±yla eklendi`,
      data: savedOption
    });

    console.log(`‚úÖ Yeni se√ßenek eklendi: ${type} - ${label}`);

  } catch (error) {
    console.error(`‚ùå Se√ßenek ekleme hatasƒ±:`, error);
    res.status(500).json({
      success: false,
      message: 'Yeni se√ßenek eklenirken hata olu≈ütu',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// üìã DROPDOWN SE√áENEKLERƒ∞Nƒ∞ GETIR - G√ºncel liste
const getOptionsForType = async (req, res) => {
  try {
    const { type } = req.params;

    console.log(`üìã Dropdown se√ßenekleri getiriliyor: ${type}`);

    let options = [];
    
    // Type'a g√∂re g√ºncel se√ßenekleri getir
    switch (type) {
      case 'yatirimTipleri':
        options = getYatirimTipiOptions();
        break;
      case 'destekSiniflari':
        options = getDestekSiniflariOptions();
        break;
      case 'dayandigiKanunlar':
        options = getDayandigiKanunOptions();
        break;
      case 'osbOptions':
        options = getOsbOptions();
        break;
      case 'u97Kodlari':
        options = getU97KodlariOptions();
        break;
      case 'destekUnsurlariOptions':
        options = getDestekUnsurlariOptions();
        break;
      case 'ozelSartKisaltmalari':
        options = getOzelSartKisaltmalariOptions();
        break;
      case 'destekSartlariOptions':
        options = getDestekSartlariOptions();
        break;
      case 'kapasiteBirimleri':
        options = getKapasiteBirimleriOptions();
        break;
      case 'belgeDurumlari':
        options = getBelgeDurumOptions();
        break;
      default:
        return res.status(400).json({
          success: false,
          message: `Desteklenmeyen se√ßenek t√ºr√º: ${type}`
        });
    }

    res.json({
      success: true,
      data: options,
      count: options.length
    });

    console.log(`‚úÖ ${type} se√ßenekleri g√∂nderildi: ${options.length} adet`);

  } catch (error) {
    console.error(`‚ùå Se√ßenekler getirme hatasƒ±:`, error);
    res.status(500).json({
      success: false,
      message: 'Se√ßenekler getirilirken hata olu≈ütu',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// MODULE EXPORTS
module.exports = {
  createTesvik,
  getTesvikler,
  getTesvik,
  updateTesvik,
  deleteTesvik,
  searchTesvikler,
  getTesvikStats,
  getTesvikByFirma,
  updateTesvikDurum,
  addTesvikRevizyon,
  calculateMaliHesaplamalar,
  getDurumRenkleri,
  getNextTesvikId,
  bulkUpdateDurum,
  
  // TODO: Implement remaining functions
  exportTesvikExcel: (req, res) => {
    res.status(501).json({ success: false, message: 'Excel export yakƒ±nda gelecek' });
  },
  exportTesvikPDF: (req, res) => {
    res.status(501).json({ success: false, message: 'PDF export yakƒ±nda gelecek' });
  },
  getTesvikTimeline: (req, res) => {
    res.status(501).json({ success: false, message: 'Timeline yakƒ±nda gelecek' });
  },
  getDestekUnsurlari: (req, res) => {
    res.status(501).json({ success: false, message: 'Destek unsurlarƒ± yakƒ±nda gelecek' });
  },
  getTesvikAnalytics: (req, res) => {
    res.status(501).json({ success: false, message: 'Analytics yakƒ±nda gelecek' });
  },
  getTesvikFormTemplate: getTesvikFormTemplate,
  getNextGmId: getNextGmId,
  addNewOption: addNewOption,
  getOptionsForType: getOptionsForType
}; 